{"version":3,"file":"taquito-michel-codec.umd.js","sources":["../src/micheline.ts","../src/scan.ts","../src/michelson-types.ts","../src/macros.ts","../src/micheline-parser.ts","../src/micheline-emitter.ts","../src/base58.ts","../src/utils.ts","../src/michelson-validator.ts","../src/binary.ts","../src/michelson-typecheck.ts","../src/michelson-contract.ts","../src/formatters.ts","../src/version.ts"],"sourcesContent":["// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\n\nexport type SourceReference = {\n    first: number;\n    last: number;\n    macro?: Expr;\n};\n\nexport const sourceReference: unique symbol = Symbol(\"source_reference\");\n\nexport interface Node {\n    [sourceReference]?: SourceReference;\n}\n\n/**\n * An AST node representing Michelson string literal.\n */\nexport interface StringLiteral extends Node {\n    string: string;\n}\n\n/**\n * An AST node representing Michelson int literal.\n */\nexport interface IntLiteral<T extends string = string> extends Node {\n    int: T;\n}\n\n/**\n * An AST node representing Michelson bytes literal.\n */\nexport interface BytesLiteral extends Node {\n    bytes: string;\n}\n\n/**\n * An AST node representing Michelson primitive.\n */\nexport interface Prim<PT extends string = string, AT extends Expr[] = Expr[]> extends Node {\n    prim: PT;\n    args?: AT;\n    annots?: string[];\n}\n\nexport type List<T extends Expr> = T[] & Node;\n\ninterface ExprList extends List<Expr> { }\n\n/**\n * An AST node representing valid Michelson expression. Directly corresponds to JSON-encoded Michelson node\n */\n\nexport type Expr = Prim | StringLiteral | IntLiteral | BytesLiteral | ExprList;\n","export class ScanError extends Error {\n    constructor(public src: string, public idx: number, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, ScanError.prototype);\n    }\n}\n\nexport enum Literal {\n    Comment,\n    Number,\n    String,\n    Bytes,\n    Ident,\n}\n\nexport type TokenType = \"(\" | \")\" | \"{\" | \"}\" | \";\" | Literal;\n\nconst isSpace = new RegExp(\"\\\\s\");\nconst isIdentStart = new RegExp(\"[:@%_A-Za-z]\");\nconst isIdent = new RegExp(\"[@%_\\\\.A-Za-z0-9]\");\nconst isDigit = new RegExp(\"[0-9]\");\nconst isHex = new RegExp(\"[0-9a-fA-F]\");\n\nexport interface Token {\n    t: TokenType;\n    v: string;\n    first: number;\n    last: number;\n}\n\nexport function* scan(src: string, scanComments = false): Generator<Token, void> {\n    let i = 0;\n    while (i < src.length) {\n        // Skip space\n        while (i < src.length && isSpace.test(src[i])) {\n            i++;\n        }\n        if (i === src.length) {\n            return;\n        }\n\n        const s = src[i];\n        const start = i;\n        if (isIdentStart.test(s)) {\n            // Identifier\n            i++;\n            while (i < src.length && isIdent.test(src[i])) {\n                i++;\n            }\n            yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n        } else if (src.length - i > 1 && src.substr(i, 2) === \"0x\") {\n            // Bytes\n            i += 2;\n            while (i < src.length && isHex.test(src[i])) {\n                i++;\n            }\n            if (((i - start) & 1) !== 0) {\n                throw new ScanError(src, i, \"Bytes literal length is expected to be power of two\");\n            }\n            yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n        } else if (isDigit.test(s) || s === \"-\") {\n            // Number\n            if (s === \"-\") {\n                i++;\n            }\n            const ii = i;\n            while (i < src.length && isDigit.test(src[i])) {\n                i++;\n            }\n            if (ii === i) {\n                throw new ScanError(src, i, \"Number literal is too short\");\n            }\n            yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n        } else if (s === \"\\\"\") {\n            // String\n            i++;\n            let esc = false;\n            for (; i < src.length && (esc || src[i] !== \"\\\"\"); i++) {\n                if (!esc && src[i] === \"\\\\\") {\n                    esc = true;\n                } else {\n                    esc = false;\n                }\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, \"Unterminated string literal\");\n            }\n            i++;\n            yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n        } else if (s === \"#\") {\n            // Comment\n            i++;\n            while (i < src.length && src[i] !== \"\\n\") {\n                i++;\n            }\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        } else if (src.length - i > 1 && src.substr(i, 2) === \"/*\") {\n            // C style comment\n            i += 2;\n            while (i < src.length && !(src.length - i > 1 && src.substr(i, 2) === \"*/\")) {\n                i++;\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, \"Unterminated C style comment\");\n            }\n            i += 2;\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        } else if (s === \"(\" || s === \")\" || s === \"{\" || s === \"}\" || s === \";\") {\n            i++;\n            yield { t: s, v: s, first: start, last: i };\n        } else {\n            throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n        }\n    }\n}","import { Prim, Expr, IntLiteral, StringLiteral, BytesLiteral, List, Node } from \"./micheline\";\n\ninterface Prim0<PT extends string = string> extends Prim<PT> {\n    args?: never;\n}\ninterface PrimX<PT extends string = string, AT extends Expr[] = Expr[]> extends Prim<PT, AT> {\n    args: AT;\n}\n\n// Instructions\ntype MichelsonNoArgInstructionID = \"ABS\" | \"ADD\" | \"ADDRESS\" | \"AMOUNT\" | \"AND\" | \"APPLY\" | \"BALANCE\" |\n    \"BLAKE2B\" | \"CAR\" | \"CDR\" | \"CHAIN_ID\" | \"CHECK_SIGNATURE\" | \"COMPARE\" | \"CONCAT\" | \"CONS\" | \"EDIV\" |\n    \"EQ\" | \"EXEC\" | \"FAILWITH\" | \"GE\" | \"GET_AND_UPDATE\" | \"GT\" | \"HASH_KEY\" | \"IMPLICIT_ACCOUNT\" |\n    \"INT\" | \"ISNAT\" | \"JOIN_TICKETS\" | \"KECCAK\" | \"LE\" | \"LEVEL\" | \"LSL\" | \"LSR\" | \"LT\" | \"MEM\" | \"MUL\" |\n    \"NEG\" | \"NEQ\" | \"NEVER\" | \"NOT\" | \"NOW\" | \"OR\" | \"PACK\" | \"PAIRING_CHECK\" | \"READ_TICKET\" |\n    \"SAPLING_VERIFY_UPDATE\" | \"SELF\" | \"SELF_ADDRESS\" | \"SENDER\" | \"SET_DELEGATE\" | \"SHA256\" | \"SHA3\" |\n    \"SHA512\" | \"SIZE\" | \"SLICE\" | \"SOME\" | \"SOURCE\" | \"SPLIT_TICKET\" | \"SUB\" | \"SWAP\" | \"TICKET\" |\n    \"TOTAL_VOTING_POWER\" | \"TRANSFER_TOKENS\" | \"UNIT\" | \"VOTING_POWER\" | \"XOR\" | \"RENAME\";\n\ntype MichelsonRegularInstructionID = \"CONTRACT\" | \"CREATE_CONTRACT\" | \"DIG\" | \"DIP\" | \"DROP\" |\n    \"DUG\" | \"DUP\" | \"EMPTY_BIG_MAP\" | \"EMPTY_MAP\" | \"EMPTY_SET\" | \"GET\" | \"IF\" | \"IF_CONS\" | \"IF_LEFT\" |\n    \"IF_NONE\" | \"ITER\" | \"LAMBDA\" | \"LEFT\" | \"LOOP\" | \"LOOP_LEFT\" | \"MAP\" | \"NIL\" | \"NONE\" | \"PAIR\" |\n    \"PUSH\" | \"RIGHT\" | \"SAPLING_EMPTY_STATE\" | \"UNPACK\" | \"UNPAIR\" | \"UPDATE\" | \"CAST\" |\n    // legacy\n    \"CREATE_ACCOUNT\" | \"STEPS_TO_QUOTA\";\n\nexport type MichelsonInstructionID = MichelsonNoArgInstructionID | MichelsonRegularInstructionID;\ntype InstrPrim<PT extends MichelsonInstructionID, AT extends Expr[]> = Prim<PT, AT>;\ntype Instr0<PT extends MichelsonNoArgInstructionID> = Prim0<PT>;\ntype InstrX<PT extends MichelsonRegularInstructionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonCode = InstructionList | MichelsonInstruction;\nexport interface InstructionList extends List<MichelsonCode> { }\n\nexport type MichelsonNoArgInstruction = Instr0<MichelsonNoArgInstructionID>;\nexport type MichelsonInstruction =\n    MichelsonNoArgInstruction |\n    InstrX<\"DIG\" | \"DUG\" | \"SAPLING_EMPTY_STATE\", [IntLiteral]> |\n    InstrX<\"NONE\" | \"LEFT\" | \"RIGHT\" | \"NIL\" | \"CAST\", [MichelsonType]> |\n    InstrX<\"IF_NONE\" | \"IF_LEFT\" | \"IF_CONS\" | \"IF\", [InstructionList, InstructionList]> |\n    InstrX<\"MAP\" | \"ITER\" | \"LOOP\" | \"LOOP_LEFT\" | \"DIP\", [InstructionList]> |\n    InstrX<\"UNPACK\", [MichelsonType]> |\n    InstrX<\"CONTRACT\", [MichelsonType]> |\n    InstrX<\"CREATE_CONTRACT\", [MichelsonContract]> |\n    InstrX<\"PUSH\", [MichelsonType, MichelsonData]> |\n    InstrX<\"EMPTY_SET\", [MichelsonType]> |\n    InstrX<\"EMPTY_MAP\", [MichelsonType, MichelsonType]> |\n    InstrX<\"EMPTY_BIG_MAP\", [MichelsonType, MichelsonType]> |\n    InstrX<\"LAMBDA\", [MichelsonType, MichelsonType, InstructionList]> |\n    InstrX<\"DIP\", [IntLiteral, InstructionList] | [InstructionList]> |\n    InstrPrim<\"DROP\" | \"PAIR\" | \"UNPAIR\" | \"DUP\" | \"GET\" | \"UPDATE\", [IntLiteral]>;\n\n// Types\n\nexport type MichelsonSimpleComparableTypeID = \"string\" | \"nat\" | \"int\" | \"bytes\" | \"bool\" | \"mutez\" |\n    \"key_hash\" | \"address\" | \"timestamp\" | \"never\" | \"key\" | \"unit\" | \"signature\" | \"chain_id\";\n\nexport type MichelsonTypeID = MichelsonSimpleComparableTypeID |\n    \"option\" | \"list\" | \"set\" | \"contract\" | \"operation\" | \"pair\" | \"or\" | \"lambda\" | \"map\" | \"big_map\" |\n    \"sapling_transaction\" | \"sapling_state\" | \"ticket\" | \"bls12_381_g1\" | \"bls12_381_g2\" | \"bls12_381_fr\";\n\ntype Type0<PT extends MichelsonTypeID> = Prim0<PT>;\ntype TypeX<PT extends MichelsonTypeID, AT extends Expr[]> = PrimX<PT, AT>;\n\n// Michelson types\n\nexport const refContract: unique symbol = Symbol(\"ref_contract\");\nexport interface MichelsonTypeAddress extends Type0<\"address\"> {\n    [refContract]?: MichelsonTypeContract<MichelsonType>;\n}\n\nexport type MichelsonTypeInt = Type0<\"int\">;\nexport type MichelsonTypeNat = Type0<\"nat\">;\nexport type MichelsonTypeString = Type0<\"string\">;\nexport type MichelsonTypeBytes = Type0<\"bytes\">;\nexport type MichelsonTypeMutez = Type0<\"mutez\">;\nexport type MichelsonTypeBool = Type0<\"bool\">;\nexport type MichelsonTypeKeyHash = Type0<\"key_hash\">;\nexport type MichelsonTypeTimestamp = Type0<\"timestamp\">;\nexport type MichelsonTypeKey = Type0<\"key\">;\nexport type MichelsonTypeUnit = Type0<\"unit\">;\nexport type MichelsonTypeSignature = Type0<\"signature\">;\nexport type MichelsonTypeOperation = Type0<\"operation\">;\nexport type MichelsonTypeChainID = Type0<\"chain_id\">;\nexport type MichelsonTypeNever = Type0<\"never\">;\nexport type MichelsonTypeBLS12_381_G1 = Type0<\"bls12_381_g1\">;\nexport type MichelsonTypeBLS12_381_G2 = Type0<\"bls12_381_g2\">;\nexport type MichelsonTypeBLS12_381_FR = Type0<\"bls12_381_fr\">;\n\ntype TypeList<T extends MichelsonType[]> = T & Node;\nexport type MichelsonTypePair<T extends MichelsonType[]> = TypeX<\"pair\", T> | TypeList<T>;\n\nexport interface MichelsonTypeOption<T extends MichelsonType> extends TypeX<\"option\", [T]> { }\nexport interface MichelsonTypeList<T extends MichelsonType> extends TypeX<\"list\", [T]> { }\nexport interface MichelsonTypeContract<T extends MichelsonType> extends TypeX<\"contract\", [T]> { }\nexport interface MichelsonTypeOr<T extends [MichelsonType, MichelsonType]> extends TypeX<\"or\", T> { }\nexport interface MichelsonTypeLambda<Arg extends MichelsonType, Ret extends MichelsonType> extends TypeX<\"lambda\", [Arg, Ret]> { }\nexport interface MichelsonTypeSet<T extends MichelsonType> extends TypeX<\"set\", [T]> { }\nexport interface MichelsonTypeMap<K extends MichelsonType, V extends MichelsonType> extends TypeX<\"map\", [K, V]> { }\nexport interface MichelsonTypeBigMap<K extends MichelsonType, V extends MichelsonType> extends TypeX<\"big_map\", [K, V]> { }\nexport interface MichelsonTypeSaplingState<S extends string = string> extends TypeX<\"sapling_state\", [IntLiteral<S>]> { }\nexport interface MichelsonTypeSaplingTransaction<S extends string = string> extends TypeX<\"sapling_transaction\", [IntLiteral<S>]> { }\nexport interface MichelsonTypeTicket<T extends MichelsonType> extends TypeX<\"ticket\", [T]> { }\n\nexport type MichelsonType<T extends MichelsonTypeID = MichelsonTypeID> =\n    T extends \"int\" ? MichelsonTypeInt :\n    T extends \"nat\" ? MichelsonTypeNat :\n    T extends \"string\" ? MichelsonTypeString :\n    T extends \"bytes\" ? MichelsonTypeBytes :\n    T extends \"mutez\" ? MichelsonTypeMutez :\n    T extends \"bool\" ? MichelsonTypeBool :\n    T extends \"key_hash\" ? MichelsonTypeKeyHash :\n    T extends \"timestamp\" ? MichelsonTypeTimestamp :\n    T extends \"address\" ? MichelsonTypeAddress :\n    T extends \"key\" ? MichelsonTypeKey :\n    T extends \"unit\" ? MichelsonTypeUnit :\n    T extends \"signature\" ? MichelsonTypeSignature :\n    T extends \"operation\" ? MichelsonTypeOperation :\n    T extends \"chain_id\" ? MichelsonTypeChainID :\n    T extends \"option\" ? MichelsonTypeOption<MichelsonType> :\n    T extends \"list\" ? MichelsonTypeList<MichelsonType> :\n    T extends \"contract\" ? MichelsonTypeContract<MichelsonType> :\n    T extends \"ticket\" ? MichelsonTypeTicket<MichelsonType> :\n    T extends \"pair\" ? MichelsonTypePair<MichelsonType[]> :\n    T extends \"or\" ? MichelsonTypeOr<[MichelsonType, MichelsonType]> :\n    T extends \"lambda\" ? MichelsonTypeLambda<MichelsonType, MichelsonType> :\n    T extends \"set\" ? MichelsonTypeSet<MichelsonType> :\n    T extends \"map\" ? MichelsonTypeMap<MichelsonType, MichelsonType> :\n    T extends \"big_map\" ? MichelsonTypeBigMap<MichelsonType, MichelsonType> :\n    T extends \"never\" ? MichelsonTypeNever :\n    T extends \"bls12_381_g1\" ? MichelsonTypeBLS12_381_G1 :\n    T extends \"bls12_381_g2\" ? MichelsonTypeBLS12_381_G2 :\n    T extends \"bls12_381_fr\" ? MichelsonTypeBLS12_381_FR :\n    T extends \"sapling_transaction\" ? MichelsonTypeSaplingTransaction :\n    MichelsonTypeSaplingState;\n\n// Data\n\nexport type MichelsonDataID = \"Unit\" | \"True\" | \"False\" | \"None\" | \"Pair\" | \"Left\" | \"Right\" | \"Some\";\n\ntype Data0<PT extends MichelsonDataID> = Prim0<PT>;\ntype DataX<PT extends MichelsonDataID, AT extends MichelsonData[]> = PrimX<PT, AT>;\n\nexport type MichelsonDataOption = DataX<\"Some\", [MichelsonData]> | Data0<\"None\">;\nexport type MichelsonDataOr = DataX<\"Left\" | \"Right\", [MichelsonData]>;\ntype DataList<T extends MichelsonData[]> = T & Node;\nexport type MichelsonDataPair<T extends MichelsonData[]> = DataX<\"Pair\", T> | DataList<T>;\nexport type MichelsonMapElt = PrimX<\"Elt\", [MichelsonData, MichelsonData]>;\nexport type MichelsonMapEltList = List<MichelsonMapElt>;\n\nexport type MichelsonData =\n    IntLiteral |\n    StringLiteral |\n    BytesLiteral |\n    Data0<\"Unit\" | \"True\" | \"False\"> |\n    MichelsonDataOption |\n    MichelsonDataOr |\n    DataList<MichelsonData[]> |\n    MichelsonDataPair<MichelsonData[]> |\n    InstructionList |\n    MichelsonMapEltList;\n\n// Top level script sections\n\nexport type MichelsonSectionID = \"parameter\" | \"storage\" | \"code\";\ntype SectionPrim<PT extends MichelsonSectionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonContractParameter = SectionPrim<\"parameter\", [MichelsonType]>;\nexport type MichelsonContractStorage = SectionPrim<\"storage\", [MichelsonType]>;\nexport type MichelsonContractCode = SectionPrim<\"code\", [InstructionList]>;\n\nexport type MichelsonContract =\n    [MichelsonContractParameter, MichelsonContractStorage, MichelsonContractCode] |\n    [MichelsonContractParameter, MichelsonContractCode, MichelsonContractStorage] |\n    [MichelsonContractStorage, MichelsonContractParameter, MichelsonContractCode] |\n    [MichelsonContractStorage, MichelsonContractCode, MichelsonContractParameter] |\n    [MichelsonContractCode, MichelsonContractStorage, MichelsonContractParameter] |\n    [MichelsonContractCode, MichelsonContractParameter, MichelsonContractStorage];\n\nexport type MichelsonContractSection<T extends MichelsonSectionID> =\n    T extends \"parameter\" ? MichelsonContractParameter :\n    T extends \"storage\" ? MichelsonContractStorage : MichelsonContractCode;\n\n// Code analysis types \nexport interface MichelsonTypeFailed {\n    failed: MichelsonType;\n}\n\nexport type MichelsonReturnType = MichelsonType[] | MichelsonTypeFailed;\n\nexport enum Protocol {\n    Pt24m4xi = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\",\n    PsBABY5H = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\",\n    PsBabyM1 = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\",\n    PsCARTHA = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\",\n    PsDELPH1 = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\",\n    PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n    PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n    PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV'\n}\n\nexport const DefaultProtocol = Protocol.PsDELPH1;\n\nexport type ProtocolID = `${Protocol}`;\n\nexport interface ProtocolOptions {\n    protocol?: ProtocolID;\n}","import { Prim, Expr, IntLiteral } from \"./micheline\";\nimport { DefaultProtocol, Protocol, ProtocolOptions } from \"./michelson-types\";\nimport { Tuple, NoArgs, ReqArgs, NoAnnots } from \"./utils\";\n\nexport class MacroError extends Error {\n    constructor(public prim: Prim, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MacroError.prototype);\n    }\n}\n\nfunction assertArgs<N extends number>(ex: Prim, n: N):\n    ex is N extends 0 ?\n    NoArgs<Prim<string>> :\n    ReqArgs<Prim<string, Tuple<N, Expr>>> {\n    if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${ex.args?.length}`);\n}\n\nfunction assertNoAnnots(ex: Prim): ex is NoAnnots<Prim> {\n    if (ex.annots === undefined) {\n        return true;\n    }\n    throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex: Prim, arg: Expr): arg is IntLiteral {\n    if (\"int\" in arg) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\ntype PT = [number, [string | null, string | null]];\n\nfunction parsePairUnpairExpr(p: Prim, expr: string, annotations: string[], agg: (l: PT[] | undefined, r: PT[] | undefined, top: PT) => PT[]): { r: PT[], n: number, an: number } {\n    let i = 0;\n    let ai = 0;\n    const ann: [string | null, string | null] = [null, null];\n\n    // Left expression\n    let lexpr: PT[] | undefined;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    let c = expr[i++];\n    switch (c) {\n        case \"P\":\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            lexpr = r;\n            i += n;\n            ai += an;\n            break;\n        case \"A\":\n            if (ai !== annotations.length) {\n                ann[0] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n\n    // Right expression\n    let rexpr: PT[] | undefined;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    c = expr[i++];\n    switch (c) {\n        case \"P\":\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            rexpr = r.map<PT>(([v, a]) => [v + 1, a]);\n            i += n;\n            ai += an;\n            break;\n        case \"I\":\n            if (ai !== annotations.length) {\n                ann[1] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n\n    return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\n\nfunction parseSetMapCadr(p: Prim, expr: string, vann: string[], term: { a: Expr, d: Expr }): Expr {\n    const c = expr[0];\n    switch (c) {\n        case \"A\":\n            return expr.length > 1 ?\n                [\n                    { prim: \"DUP\" },\n                    {\n                        prim: \"DIP\",\n                        args: [[\n                            { prim: \"CAR\", annots: [\"@%%\"] },\n                            parseSetMapCadr(p, expr.slice(1), [], term),\n                        ]],\n                    },\n                    { prim: \"CDR\", annots: [\"@%%\"] },\n                    { prim: \"SWAP\" },\n                    { prim: \"PAIR\", annots: [\"%@\", \"%@\", ...vann] },\n                ] : term.a;\n\n        case \"D\":\n            return expr.length > 1 ?\n                [\n                    { prim: \"DUP\" },\n                    {\n                        prim: \"DIP\",\n                        args: [[\n                            { prim: \"CDR\", annots: [\"@%%\"] },\n                            parseSetMapCadr(p, expr.slice(1), [], term),\n                        ]],\n                    },\n                    { prim: \"CAR\", annots: [\"@%%\"] },\n                    { prim: \"PAIR\", annots: [\"%@\", \"%@\", ...vann] },\n                ] : term.d;\n\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n}\n\nfunction trimLast<T>(a: T[], v: T): T[] {\n    let l = a.length;\n    while (l > 0 && a[l - 1] === v) {\n        l--;\n    }\n    return a.slice(0, l);\n}\n\nfunction filterAnnotations(a?: string[]): {\n    fields: string[];\n    rest: string[];\n} {\n    const fields: string[] = [];\n    const rest: string[] = [];\n    if (a !== undefined) {\n        for (const v of a) {\n            (v.length !== 0 && v[0] === \"%\" ? fields : rest).push(v);\n        }\n    }\n    return { fields, rest };\n}\n\nfunction mkPrim({ prim, annots, args }: Prim): Prim {\n    return {\n        prim,\n        ...(annots && { annots }),\n        ...(args && { args }),\n    };\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nexport function expandMacros(ex: Prim, opt?: ProtocolOptions): Expr {\n    const proto = opt?.protocol || DefaultProtocol;\n\n    function mayRename(annots?: string[]): Prim[] {\n        return annots !== undefined ? [{ prim: \"RENAME\", annots }] : [];\n    }\n\n    switch (ex.prim) {\n        // Compare\n        case \"CMPEQ\":\n        case \"CMPNEQ\":\n        case \"CMPLT\":\n        case \"CMPGT\":\n        case \"CMPLE\":\n        case \"CMPGE\":\n            if (assertArgs(ex, 0)) {\n                return [\n                    { prim: \"COMPARE\" },\n                    mkPrim({ prim: ex.prim.slice(3), annots: ex.annots }),\n                ];\n            }\n            break;\n\n        case \"IFEQ\":\n        case \"IFNEQ\":\n        case \"IFLT\":\n        case \"IFGT\":\n        case \"IFLE\":\n        case \"IFGE\":\n            if (assertArgs(ex, 2)) {\n                return [\n                    { prim: ex.prim.slice(2) },\n                    mkPrim({ prim: \"IF\", annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n\n        case \"IFCMPEQ\":\n        case \"IFCMPNEQ\":\n        case \"IFCMPLT\":\n        case \"IFCMPGT\":\n        case \"IFCMPLE\":\n        case \"IFCMPGE\":\n            if (assertArgs(ex, 2)) {\n                return [\n                    { prim: \"COMPARE\" },\n                    { prim: ex.prim.slice(5) },\n                    mkPrim({ prim: \"IF\", annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n\n        // Fail\n        case \"FAIL\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    { prim: \"UNIT\" },\n                    { prim: \"FAILWITH\" },\n                ];\n            }\n            break;\n\n        // Assertion macros\n        case \"ASSERT\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [{\n                    prim: \"IF\", args: [\n                        [],\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_EQ\":\n        case \"ASSERT_NEQ\":\n        case \"ASSERT_LT\":\n        case \"ASSERT_GT\":\n        case \"ASSERT_LE\":\n        case \"ASSERT_GE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    { prim: ex.prim.slice(7) },\n                    {\n                        prim: \"IF\", args: [\n                            [],\n                            [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        ]\n                    },\n                ];\n            }\n            break;\n\n        case \"ASSERT_CMPEQ\":\n        case \"ASSERT_CMPNEQ\":\n        case \"ASSERT_CMPLT\":\n        case \"ASSERT_CMPGT\":\n        case \"ASSERT_CMPLE\":\n        case \"ASSERT_CMPGE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    [\n                        { prim: \"COMPARE\" },\n                        { prim: ex.prim.slice(10) },\n                    ],\n                    {\n                        prim: \"IF\", args: [\n                            [],\n                            [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        ]\n                    },\n                ];\n            }\n            break;\n\n        case \"ASSERT_NONE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [{\n                    prim: \"IF_NONE\", args: [\n                        [],\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_SOME\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_NONE\", args: [\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        mayRename(ex.annots),\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_LEFT\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_LEFT\", args: [\n                        mayRename(ex.annots),\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_RIGHT\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_LEFT\", args: [\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        mayRename(ex.annots),\n                    ]\n                }];\n            }\n            break;\n\n        // Syntactic conveniences\n\n        case \"IF_SOME\":\n            if (assertArgs(ex, 2)) {\n                return [mkPrim({ prim: \"IF_NONE\", annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n            break;\n\n        case \"IF_RIGHT\":\n            if (assertArgs(ex, 2)) {\n                return [mkPrim({ prim: \"IF_LEFT\", annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n            break;\n\n        // CAR/CDR n\n        case \"CAR\":\n        case \"CDR\":\n            if (ex.args !== undefined) {\n                if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n                    const n = parseInt(ex.args[0].int, 10);\n                    return mkPrim({\n                        prim: \"GET\",\n                        args: [{ int: ex.prim === \"CAR\" ? String(n * 2 + 1) : String(n * 2) }],\n                        annots: ex.annots,\n                    });\n                }\n            } else {\n                return ex;\n            }\n    }\n\n    // More syntactic conveniences\n\n    // PAPPAIIR macro\n    if (pairRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [...(l || []), ...(r || []), top]);\n\n            return r.map(([v, a], i) => {\n                const ann = [\n                    ...trimLast(a, null).map(v => v === null ? \"%\" : v),\n                    ...((v === 0 && i === r.length - 1) ? rest : [])];\n\n                const leaf = mkPrim({ prim: \"PAIR\", annots: ann.length !== 0 ? ann : undefined, });\n\n                return v === 0 ? leaf : {\n                    prim: \"DIP\",\n                    args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                };\n            });\n        }\n    }\n\n    // UNPAPPAIIR macro\n    if (unpairRe.test(ex.prim)) {\n        if (proto === Protocol.PtEdo2Zk || proto === Protocol.PsFLorena || proto === Protocol.PtGRANADs) {\n            if (ex.prim === \"UNPAIR\") {\n                return ex;\n            }\n            if (assertArgs(ex, 0)) {\n                // 008_edo: annotations are deprecated\n                const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [top, ...(r || []), ...(l || [])]);\n                return r.map(([v]) => {\n                    const leaf = mkPrim({\n                        prim: \"UNPAIR\",\n                    });\n\n                    return v === 0 ? leaf : {\n                        prim: \"DIP\",\n                        args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                    };\n                });\n            }\n        } else if (assertArgs(ex, 0)) {\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [top, ...(r || []), ...(l || [])]);\n            return r.map(([v, a]) => {\n                const leaf: Prim[] = [\n                    { prim: \"DUP\" },\n                    mkPrim({ prim: \"CAR\", annots: a[0] !== null ? [a[0]] : undefined }),\n                    {\n                        prim: \"DIP\",\n                        args: [[mkPrim({ prim: \"CDR\", annots: a[1] !== null ? [a[1]] : undefined })]],\n                    }\n                ];\n\n                return v === 0 ? leaf : {\n                    prim: \"DIP\",\n                    args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                };\n            });\n        }\n    }\n\n    // C[AD]+R macro\n    if (cadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n\n            return ch.map<Prim>((c, i) => {\n                const ann = i === ch.length - 1 ? ex.annots : undefined;\n                switch (c) {\n                    case \"A\":\n                        return mkPrim({ prim: \"CAR\", annots: ann });\n                    case \"D\":\n                        return mkPrim({ prim: \"CDR\", annots: ann });\n                    default:\n                        throw new MacroError(ex, `unexpected character: ${c}`);\n                }\n            });\n        }\n    }\n\n    // SET_C[AD]+R macro\n    if (setCadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n\n            const term = fields.length !== 0 ?\n                {\n                    a: [\n                        { prim: \"DUP\" },\n                        { prim: \"CAR\", annots: fields },\n                        { prim: \"DROP\" },\n                        { prim: \"CDR\", annots: [\"@%%\"] },\n                        { prim: \"SWAP\" },\n                        { prim: \"PAIR\", annots: [fields[0], \"%@\"] },\n                    ],\n                    d: [\n                        { prim: \"DUP\" },\n                        { prim: \"CDR\", annots: fields },\n                        { prim: \"DROP\" },\n                        { prim: \"CAR\", annots: [\"@%%\"] },\n                        { prim: \"PAIR\", annots: [\"%@\", fields[0]] },\n                    ],\n                } :\n                {\n                    a: [\n                        { prim: \"CDR\", annots: [\"@%%\"] },\n                        { prim: \"SWAP\" },\n                        { prim: \"PAIR\", annots: [\"%\", \"%@\"] },\n                    ],\n                    d: [\n                        { prim: \"CAR\", annots: [\"@%%\"] },\n                        { prim: \"PAIR\", annots: [\"%@\", \"%\"] },\n                    ],\n                };\n\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n        }\n    }\n\n    // MAP_C[AD]+R macro\n    if (mapCadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 1)) {\n            const { fields } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n\n            const term = {\n                a: [\n                    { prim: \"DUP\" },\n                    { prim: \"CDR\", annots: [\"@%%\"] },\n                    {\n                        prim: \"DIP\", args: [[\n                            mkPrim({ prim: \"CAR\", annots: fields.length !== 0 ? [\"@\" + fields[0].slice(1)] : undefined }),\n                            ex.args[0],\n                        ]]\n                    },\n                    { prim: \"SWAP\" },\n                    { prim: \"PAIR\", annots: [fields.length !== 0 ? fields[0] : \"%\", \"%@\"] },\n                ],\n                d: [\n                    { prim: \"DUP\" },\n                    mkPrim({ prim: \"CDR\", annots: fields.length !== 0 ? [\"@\" + fields[0].slice(1)] : undefined }),\n                    ex.args[0],\n                    { prim: \"SWAP\" },\n                    { prim: \"CAR\", annots: [\"@%%\"] },\n                    { prim: \"PAIR\", annots: [\"%@\", fields.length !== 0 ? fields[0] : \"%\"] },\n                ],\n            };\n\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n        }\n    }\n\n    // Expand deprecated DI...IP to [DIP n]\n    if (diipRe.test(ex.prim)) {\n        if (assertArgs(ex, 1)) {\n            let n = 0;\n            while (ex.prim[1 + n] === \"I\") { n++; }\n            return mkPrim({ prim: \"DIP\", args: [{ int: String(n) }, ex.args[0]] });\n        }\n    }\n\n    // Expand DU...UP and DUP n\n    if (duupRe.test(ex.prim)) {\n        let n = 0;\n        while (ex.prim[1 + n] === \"U\") { n++; }\n        if (proto === Protocol.PtEdo2Zk || proto === Protocol.PsFLorena || proto === Protocol.PtGRANADs) {\n            if (n === 1) {\n                return ex;\n            }\n            if (assertArgs(ex, 0)) {\n                return mkPrim({ prim: \"DUP\", args: [{ int: String(n) }], annots: ex.annots });\n            }\n        } else {\n            if (n === 1) {\n                if (ex.args === undefined) {\n                    return ex; // skip\n                }\n                if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n                    n = parseInt(ex.args[0].int, 10);\n                }\n            } else {\n                assertArgs(ex, 0);\n            }\n\n            if (n === 1) {\n                return [mkPrim({ prim: \"DUP\", annots: ex.annots })];\n\n            } else if (n === 2) {\n                return [\n                    {\n                        prim: \"DIP\",\n                        args: [[mkPrim({ prim: \"DUP\", annots: ex.annots })]],\n                    },\n                    { prim: \"SWAP\" },\n                ];\n\n            } else {\n                return [\n                    {\n                        prim: \"DIP\",\n                        args: [\n                            { int: String(n - 1) },\n                            [mkPrim({ prim: \"DUP\", annots: ex.annots })],\n                        ],\n                    },\n                    {\n                        prim: \"DIG\",\n                        args: [{ int: String(n) }],\n                    },\n                ];\n            }\n        }\n    }\n\n    return ex;\n}","import { scan, Token, Literal } from './scan';\nimport { Expr, Prim, StringLiteral, IntLiteral, BytesLiteral, sourceReference, List, SourceReference } from './micheline';\nimport { expandMacros } from './macros';\nimport { ProtocolOptions } from './michelson-types';\n\nexport class MichelineParseError extends Error {\n    /**\n     * @param token A token caused the error\n     * @param message An error message\n     */\n    constructor(public token: Token | null, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MichelineParseError.prototype);\n    }\n}\n\nexport class JSONParseError extends Error {\n    /**\n     * @param node A node caused the error\n     * @param message An error message\n     */\n    constructor(public node: any, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, JSONParseError.prototype);\n    }\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok: Token): boolean {\n    return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n\nexport interface ParserOptions extends ProtocolOptions {\n    /**\n     * Expand [Michelson macros](https://tezos.gitlab.io/whitedoc/michelson.html#macros) during parsing.\n     */\n    expandMacros?: boolean;\n}\n\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for inital storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nexport class Parser {\n    constructor(private opt?: ParserOptions) {\n    }\n\n    private expand(ex: Prim): Expr {\n        if (this.opt?.expandMacros !== undefined ? this.opt?.expandMacros : true) {\n            const ret = expandMacros(ex, this.opt);\n            if (ret !== ex) {\n                ret[sourceReference] = { ...(ex[sourceReference] || { first: 0, last: 0 }), macro: ex };\n            }\n            return ret;\n        } else {\n            return ex;\n        }\n    }\n\n    private parseListExpr(scanner: Iterator<Token>, start: Token): Expr {\n        const ref: SourceReference = {\n            first: start.first,\n            last: start.last,\n        };\n\n        const expectBracket = start.t === \"(\";\n        let tok: IteratorResult<Token>;\n        if (expectBracket) {\n            tok = scanner.next();\n            if (tok.done) {\n                throw errEOF;\n            }\n            ref.last = tok.value.last;\n        } else {\n            tok = { value: start };\n        }\n\n        if (tok.value.t !== Literal.Ident) {\n            throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n        }\n\n        const ret: Prim = {\n            prim: tok.value.v,\n            [sourceReference]: ref,\n        };\n\n        for (; ;) {\n            const tok = scanner.next();\n            if (tok.done) {\n                if (expectBracket) {\n                    throw errEOF;\n                }\n                break;\n            } else if (tok.value.t === ')') {\n                if (!expectBracket) {\n                    throw new MichelineParseError(tok.value, `unexpected closing bracket`);\n                }\n                ref.last = tok.value.last;\n                break;\n            } else if (isAnnotation(tok.value)) {\n                ret.annots = ret.annots || [];\n                ret.annots.push(tok.value.v);\n                ref.last = tok.value.last;\n            } else {\n                ret.args = ret.args || [];\n                const arg = this.parseExpr(scanner, tok.value);\n                ref.last = arg[sourceReference]?.last || ref.last;\n                ret.args.push(arg);\n            }\n        }\n        return this.expand(ret);\n    }\n\n    private parseArgs(scanner: Iterator<Token>, start: Token): [Prim, IteratorResult<Token>] {\n        // Identifier with arguments\n        const ref: SourceReference = {\n            first: start.first,\n            last: start.last,\n        };\n        const p: Prim = {\n            prim: start.v,\n            [sourceReference]: ref,\n        };\n\n        for (; ;) {\n            const t = scanner.next();\n            if (t.done || t.value.t === '}' || t.value.t === ';') {\n                return [p, t];\n            }\n\n            if (isAnnotation(t.value)) {\n                ref.last = t.value.last;\n                p.annots = p.annots || [];\n                p.annots.push(t.value.v);\n            } else {\n                const arg = this.parseExpr(scanner, t.value);\n                ref.last = arg[sourceReference]?.last || ref.last;\n                p.args = p.args || [];\n                p.args.push(arg);\n            }\n        }\n    }\n\n    private parseSequenceExpr(scanner: Iterator<Token>, start: Token): List<Expr> {\n        const ref: SourceReference = {\n            first: start.first,\n            last: start.last,\n        };\n        const seq: List<Expr> = [];\n        seq[sourceReference] = ref;\n\n        const expectBracket = start.t === \"{\";\n        let tok: IteratorResult<Token> | null = start.t === \"{\" ? null : { value: start };\n\n        for (; ;) {\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (tok.done) {\n                if (expectBracket) {\n                    throw errEOF;\n                } else {\n                    return seq;\n                }\n            }\n\n            if (tok.value.t === \"}\") {\n                if (!expectBracket) {\n                    throw new MichelineParseError(tok.value, `unexpected closing bracket`);\n                } else {\n                    return seq;\n                }\n            } else if (tok.value.t === Literal.Ident) {\n                // Identifier with arguments\n                const [itm, n] = this.parseArgs(scanner, tok.value);\n                ref.last = itm[sourceReference]?.last || ref.last;\n                seq.push(this.expand(itm));\n                tok = n;\n            } else {\n                // Other\n                const ex = this.parseExpr(scanner, tok.value);\n                ref.last = ex[sourceReference]?.last || ref.last;\n                seq.push(ex);\n                tok = null;\n            }\n\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (!tok.done && tok.value.t === \";\") {\n                tok = null;\n            }\n        }\n    }\n\n    private parseExpr(scanner: Iterator<Token>, tok: Token): Expr {\n        switch (tok.t) {\n            case Literal.Ident:\n                return this.expand({ prim: tok.v, [sourceReference]: { first: tok.first, last: tok.last } });\n\n            case Literal.Number:\n                return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case Literal.String:\n                return { string: JSON.parse(tok.v) as string, [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case Literal.Bytes:\n                return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case '{':\n                return this.parseSequenceExpr(scanner, tok);\n\n            default:\n                return this.parseListExpr(scanner, tok);\n        }\n    }\n\n    /**\n     * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n     * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n     */\n    parseSequence(src: string): Expr[] | null {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"string\") {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseSequenceExpr(scanner, tok.value);\n    }\n\n    /**\n     * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n     * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n     * @returns An AST node or null for empty document.\n     */\n    parseList(src: string): Expr | null {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"string\") {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseListExpr(scanner, tok.value);\n    }\n\n    /**\n     * Parse any Michelson expression\n     * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n     * @returns An AST node or null for empty document.\n     */\n    parseMichelineExpression(src: string): Expr | null {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"string\") {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseExpr(scanner, tok.value);\n    }\n\n    /**\n     * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n     * An alias for `parseSequence`\n     * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n     */\n    parseScript(src: string): Expr[] | null {\n        return this.parseSequence(src);\n    }\n\n    /**\n     * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n     * An alias for `parseList`\n     * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n     * @returns An AST node or null for empty document.\n     */\n    parseData(src: string): Expr | null {\n        return this.parseList(src);\n    }\n\n    /**\n     * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n     * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n     */\n    parseJSON(src: object): Expr {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"object\") {\n            throw new TypeError(`object type was expected, got ${typeof src} instead`);\n        }\n\n        if (Array.isArray(src)) {\n            const ret: Expr[] = [];\n            for (const n of src) {\n                if (n === null || typeof n !== 'object') {\n                    throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n                }\n                ret.push(this.parseJSON(n));\n            }\n            return ret;\n\n        } else if ('prim' in src) {\n            const p = src as { prim: any, annots?: any[], args?: any[] };\n            if (\n                typeof p.prim === 'string' &&\n                (p.annots === undefined || Array.isArray(p.annots)) &&\n                (p.args === undefined || Array.isArray(p.args))\n            ) {\n                const ret: Prim = {\n                    prim: p.prim,\n                };\n\n                if (p.annots !== undefined) {\n                    for (const a of p.annots) {\n                        if (typeof a !== 'string') {\n                            throw new JSONParseError(a, `string expected: ${a}`);\n                        }\n                    }\n                    ret.annots = p.annots;\n                }\n\n                if (p.args !== undefined) {\n                    ret.args = [];\n                    for (const a of p.args) {\n                        if (a === null || typeof a !== 'object') {\n                            throw new JSONParseError(a, `unexpected argument: ${a}`);\n                        }\n                        ret.args.push(this.parseJSON(a));\n                    }\n                }\n\n                return this.expand(ret);\n            }\n\n            throw new JSONParseError(src, `malformed prim expression: ${src}`);\n        } else if ('string' in src) {\n            if (typeof (src as any).string === 'string') {\n                return { string: (src as StringLiteral).string };\n            }\n\n            throw new JSONParseError(src, `malformed string literal: ${src}`);\n        } else if ('int' in src) {\n            if (typeof (src as any).int === 'string' && intRe.test((src as IntLiteral).int)) {\n                return { int: (src as IntLiteral).int };\n            }\n\n            throw new JSONParseError(src, `malformed int literal: ${src}`);\n        } else if ('bytes' in src) {\n            if (\n                typeof (src as any).bytes === 'string' &&\n                bytesRe.test((src as BytesLiteral).bytes)\n            ) {\n                return { bytes: (src as BytesLiteral).bytes };\n            }\n\n            throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n        } else {\n            throw new JSONParseError(src, `unexpected object: ${src}`);\n        }\n    }\n}\n","import { Expr, Prim, sourceReference } from \"./micheline\";\n\nexport interface FormatOptions {\n    /**\n     * A string used for code indentation if desired. Usually a tab character or a number of spaces.\n     */\n    indent?: string;\n    /**\n     * A string used for line separation. Usually a newline character (\"\\n\");\n     */\n    newline?: string;\n}\n\nclass Formatter {\n    constructor(private opt?: FormatOptions, private lev: number = 0) {\n    }\n\n    indent(n = 0): string {\n        let ret = \"\";\n        if (this.opt?.indent !== undefined) {\n            for (let i = this.lev + n; i > 0; i--) {\n                ret += this.opt.indent;\n            }\n        }\n        return ret;\n    }\n\n    get lf(): string {\n        return this.opt?.newline || \"\";\n    }\n\n    get lfsp(): string {\n        return this.opt?.newline || \" \";\n    }\n\n    down(n: number): Formatter {\n        return new Formatter(this.opt, this.lev + n);\n    }\n}\n\nfunction hasArgs(node: Expr): node is Prim {\n    return (\"prim\" in node) &&\n        ((node.annots !== undefined && node.annots.length !== 0) ||\n            (node.args !== undefined && node.args.length !== 0));\n}\n\nfunction isMultiline(node: Prim): boolean {\n    if (node.args !== undefined) {\n        for (const a of node.args) {\n            if (Array.isArray(a) || hasArgs(a)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction emitExpr(node: Expr, f: Formatter, foldMacros: boolean): string {\n    const macro = node[sourceReference]?.macro;\n    if (foldMacros && macro) {\n        return emitExpr(macro, f, foldMacros);\n    }\n\n    if (Array.isArray(node)) {\n        return emitSeq(node, f, foldMacros);\n\n    } else if (\"string\" in node) {\n        return JSON.stringify(node.string);\n\n    } else if (\"int\" in node) {\n        return node.int;\n\n    } else if (\"bytes\" in node) {\n        return \"0x\" + node.bytes;\n\n    } else {\n        if ((node.annots === undefined || node.annots.length === 0) &&\n            (node.args === undefined || node.args.length === 0)) {\n            return node.prim;\n        }\n\n        let ret = \"(\" + node.prim;\n        if (node.annots !== undefined) {\n            for (const a of node.annots) {\n                ret += \" \" + a;\n            }\n        }\n        if (node.args !== undefined) {\n            const multiline = isMultiline(node);\n            for (const a of node.args) {\n                if (multiline) {\n                    ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n                } else {\n                    ret += \" \" + emitExpr(a, f, foldMacros);\n                }\n            }\n        }\n        return ret + \")\";\n    }\n}\n\nfunction emitSeq(node: Expr[], f: Formatter, foldMacros: boolean): string {\n    let ret = \"{\" + f.lf;\n    let i = node.length;\n    for (const el of node) {\n        ret += f.indent(1);\n\n        if (\"prim\" in el) {\n            ret += el.prim;\n\n            if (el.annots !== undefined) {\n                for (const a of el.annots) {\n                    ret += \" \" + a;\n                }\n            }\n            if (el.args !== undefined) {\n                const multiline = isMultiline(el);\n                for (const a of el.args) {\n                    if (multiline) {\n                        ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n                    } else {\n                        ret += \" \" + emitExpr(a, f, foldMacros);\n                    }\n                }\n            }\n        } else {\n            ret += emitExpr(el, f.down(1), foldMacros);\n        }\n\n        ret += (i > 1 ? \";\" + f.lfsp : f.lf);\n        i--;\n    }\n    return ret + f.indent() + \"}\";\n}\n\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nexport function emitMicheline(expr: Expr, opt?: FormatOptions, foldMacros = false): string {\n    // tslint:disable-next-line: strict-type-predicates\n    if (typeof expr !== \"object\") {\n        throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n    }\n\n    return emitExpr(expr, new Formatter(opt), foldMacros);\n}","const H = [\n    0x6a09e667 | 0,\n    0xbb67ae85 | 0,\n    0x3c6ef372 | 0,\n    0xa54ff53a | 0,\n    0x510e527f | 0,\n    0x9b05688c | 0,\n    0x1f83d9ab | 0,\n    0x5be0cd19 | 0\n];\n\nconst K = [\n    0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0, 0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0,\n    0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0, 0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0,\n    0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0, 0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0,\n    0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0, 0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0,\n    0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0, 0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0,\n    0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0, 0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0,\n    0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0, 0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0,\n    0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0, 0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0\n];\n\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg: number[] | Uint8Array): number[] {\n    // pad the message\n    const r = (msg.length + 9) % 64;\n    const pad = r === 0 ? 0 : 64 - r;\n\n    if (msg.length > 268435455) {\n        throw new Error(`sha256: message length is too big: ${msg.length}`);\n    }\n\n    const l = msg.length << 3;\n    const buffer = [\n        ...msg,\n        0x80,\n        ...(new Array<number>(pad).fill(0)),\n        0, 0, 0, 0, (l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff,\n    ];\n\n    function ror(x: number, n: number): number {\n        return (x >>> n) | (x << (32 - n));\n    }\n\n    const h = [...H];\n    const w = new Array<number>(64);\n    const v = new Array<number>(8);\n\n    for (let offset = 0; offset < buffer.length; offset += 64) {\n        let q = offset;\n        let i = 0;\n        while (i < 16) {\n            w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n            q += 4;\n            i++;\n        }\n        while (i < 64) {\n            const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n            const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n            w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n            i++;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            v[i] = h[i];\n        }\n\n        for (let i = 0; i < 64; i++) {\n            const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n            const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n            const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ ((~v[4]) & v[6])) + K[i] + w[i]) | 0;\n            const t2 = (b0 + (((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2])))) | 0;\n\n            v[7] = v[6];\n            v[6] = v[5];\n            v[5] = v[4];\n            v[4] = (v[3] + t1) | 0;\n            v[3] = v[2];\n            v[2] = v[1];\n            v[1] = v[0];\n            v[0] = (t1 + t2) | 0;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            h[i] = (h[i] + v[i]) | 0;\n        }\n    }\n\n    const digest: number[] = [];\n    for (const v of h) {\n        digest.push((v >> 24) & 0xff);\n        digest.push((v >> 16) & 0xff);\n        digest.push((v >> 8) & 0xff);\n        digest.push(v & 0xff);\n    }\n\n    return digest;\n}\n\nconst base58alphabetFwd: number[] = [\n    0, 1, 2, 3, 4, 5, 6,\n    7, 8, -1, -1, -1, -1, -1, -1,\n    -1, 9, 10, 11, 12, 13, 14, 15,\n    16, -1, 17, 18, 19, 20, 21, -1,\n    22, 23, 24, 25, 26, 27, 28, 29,\n    30, 31, 32, -1, -1, -1, -1, -1,\n    -1, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, -1, 44, 45, 46,\n    47, 48, 49, 50, 51, 52, 53, 54,\n    55, 56, 57\n];\n\nconst base58alphabetBwd: number[] = [\n    0, 1, 2, 3, 4, 5, 6, 7,\n    8, 16, 17, 18, 19, 20, 21, 22,\n    23, 25, 26, 27, 28, 29, 31, 32,\n    33, 34, 35, 36, 37, 38, 39, 40,\n    41, 48, 49, 50, 51, 52, 53, 54,\n    55, 56, 57, 58, 60, 61, 62, 63,\n    64, 65, 66, 67, 68, 69, 70, 71,\n    72, 73\n];\n\nfunction byteAt(src: string, i: number): number {\n    const c = src.charCodeAt(i) - 49;\n    if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n        throw new Error(`Base58 decoding error: unexpected character at position ${i}: ${src[i]}`);\n    }\n    return base58alphabetFwd[c];\n}\n\nexport function decodeBase58(src: string): number[] {\n    const acc: number[] = [];\n    let i = 0;\n    // count and skip leading zeros\n    while (i < src.length && byteAt(src, i) === 0) { i++; }\n    let zeros = i;\n    while (i < src.length) {\n        let carry = byteAt(src, i++);\n        /*\n        for every symbol x\n        acc = acc * 58 + x\n        where acc is a little endian arbitrary length integer\n        */\n        let ii = 0;\n        while (carry !== 0 || ii < acc.length) {\n            const m = (acc[ii] || 0) * 58 + carry;\n            acc[ii++] = m % 256;\n            carry = Math.floor(m / 256);\n        }\n    }\n    while (zeros-- > 0) {\n        acc.push(0);\n    }\n    return acc.reverse();\n}\n\nexport function encodeBase58(src: number[] | Uint8Array): string {\n    const acc: number[] = [];\n    let i = 0;\n    // count and skip leading zeros\n    while (i < src.length && src[i] === 0) { i++; }\n    let zeros = i;\n    while (i < src.length) {\n        let carry = src[i++];\n        let ii = 0;\n        while (carry !== 0 || ii < acc.length) {\n            const m = (acc[ii] || 0) * 256 + carry;\n            acc[ii++] = m % 58;\n            carry = Math.floor(m / 58);\n        }\n    }\n    while (zeros-- > 0) {\n        acc.push(0);\n    }\n    acc.reverse();\n    return String.fromCharCode(...acc.map(v => base58alphabetBwd[v] + 49));\n}\n\nexport function decodeBase58Check(src: string): number[] {\n    const buffer = decodeBase58(src);\n    if (buffer.length < 4) {\n        throw new Error(`Base58Check decoding error: data is too short ${buffer.length}`);\n    }\n\n    const data = buffer.slice(0, buffer.length - 4);\n    const sum = buffer.slice(buffer.length - 4);\n    const computed = sha256(sha256(data));\n    if (sum[0] !== computed[0] ||\n        sum[1] !== computed[1] ||\n        sum[2] !== computed[2] ||\n        sum[3] !== computed[3]) {\n        throw new Error(\"Base58Check decoding error: invalid checksum\");\n    }\n\n    return data;\n}\n\nexport function encodeBase58Check(src: number[] | Uint8Array): string {\n    const sum = sha256(sha256(src));\n    return encodeBase58([...src, ...sum.slice(0, 4)]);\n}","import { Prim, Expr, StringLiteral, IntLiteral } from \"./micheline\";\nimport { decodeBase58Check, encodeBase58Check } from \"./base58\";\nimport { MichelsonData, MichelsonDataPair, MichelsonType, MichelsonTypePair } from \"./michelson-types\";\n\nexport type Tuple<N extends number, T> =\n    N extends 1 ? [T] :\n    N extends 2 ? [T, T] :\n    N extends 3 ? [T, T, T] :\n    N extends 4 ? [T, T, T, T] :\n    N extends 5 ? [T, T, T, T, T] :\n    N extends 6 ? [T, T, T, T, T, T] :\n    N extends 7 ? [T, T, T, T, T, T, T] :\n    N extends 8 ? [T, T, T, T, T, T, T, T] :\n    T[];\n\ntype RequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\ntype OmitProp<T, K extends keyof T> = Omit<T, K> & { [P in K]?: undefined };\n\nexport type ReqArgs<T extends Prim> = RequiredProp<T, \"args\">;\nexport type NoArgs<T extends Prim> = OmitProp<T, \"args\">;\nexport type NoAnnots<T extends Prim> = OmitProp<T, \"annots\">;\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport class MichelsonError<T extends Expr = Expr> extends Error {\n    /**\n     * @param val Value of a AST node caused the error\n     * @param path Path to a node caused the error\n     * @param message An error message\n     */\n    constructor(public val: T, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MichelsonError.prototype);\n    }\n}\n\nexport function isMichelsonError<T extends Expr = Expr>(err: any): err is MichelsonError<T> {\n    return err instanceof MichelsonError;\n}\n\nexport class MichelsonTypeError extends MichelsonError<MichelsonType | MichelsonType[]> {\n    public data?: Expr;\n\n    /**\n     * @param val Value of a type node caused the error\n     * @param data Value of a data node caused the error\n     * @param message An error message\n     */\n    constructor(val: MichelsonType | MichelsonType[], data?: Expr, message?: string) {\n        super(val, message);\n        if (data !== undefined) {\n            this.data = data;\n        }\n        Object.setPrototypeOf(this, MichelsonTypeError.prototype);\n    }\n}\n\n// Ad hoc big integer parser\nexport class LongInteger {\n    private neg = false;\n    private buf: number[] = [];\n\n    private append(c: number) {\n        let i = 0;\n        while (c !== 0 || i < this.buf.length) {\n            const m = (this.buf[i] || 0) * 10 + c;\n            this.buf[i++] = m % 256;\n            c = Math.floor(m / 256);\n        }\n    }\n\n    constructor(arg?: string | number) {\n        if (arg === undefined) {\n            return;\n        }\n        if (typeof arg === \"string\") {\n            for (let i = 0; i < arg.length; i++) {\n                let c = arg.charCodeAt(i);\n                if (i === 0 && c === 0x2d) {\n                    this.neg = true;\n                } else {\n                    if (c < 0x30 || c > 0x39) {\n                        throw new Error(`unexpected character in integer constant: ${arg[i]}`);\n                    }\n                    this.append(c - 0x30);\n                }\n            }\n        } else if (arg < 0) {\n            this.neg = true;\n            this.append(-arg);\n        } else {\n            this.append(arg);\n        }\n    }\n\n    cmp(arg: LongInteger): number {\n        if (this.neg !== arg.neg) {\n            return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n        } else {\n            let ret = 0;\n            if (this.buf.length !== arg.buf.length) {\n                ret = this.buf.length < arg.buf.length ? -1 : 1;\n            } else if (this.buf.length !== 0) {\n                let i = arg.buf.length - 1;\n                while (i >= 0 && this.buf[i] === arg.buf[i]) {\n                    i--;\n                }\n                ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n            }\n            return !this.neg ? ret : ret === 0 ? 0 : -ret;\n        }\n    }\n\n    get sign(): number {\n        return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n    }\n}\n\nexport function parseBytes(s: string): number[] | null {\n    const ret: number[] = [];\n    for (let i = 0; i < s.length; i += 2) {\n        const x = parseInt(s.slice(i, i + 2), 16);\n        if (Number.isNaN(x)) {\n            return null;\n        }\n        ret.push(x);\n    }\n    return ret;\n}\n\nexport function compareBytes(a: number[] | Uint8Array, b: number[] | Uint8Array): number {\n    if (a.length !== b.length) {\n        return a.length < b.length ? -1 : 1;\n    } else if (a.length !== 0) {\n        let i = 0;\n        while (i < a.length && a[i] === b[i]) {\n            i++;\n        }\n        return i === a.length ? 0 : a[i] < b[i] ? -1 : 1;\n    } else {\n        return 0;\n    }\n}\n\nexport function isDecimal(x: string): boolean {\n    try {\n        // tslint:disable-next-line: no-unused-expression\n        new LongInteger(x);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function isNatural(x: string): boolean {\n    try {\n        return new LongInteger(x).sign >= 0;\n    } catch {\n        return false;\n    }\n}\n\nexport interface UnpackedAnnotations {\n    f?: string[];\n    t?: string[];\n    v?: string[];\n}\n\nexport interface UnpackAnnotationsOptions {\n    specialVar?: boolean; // CAR, CDR\n    emptyVar?: boolean;\n    specialFields?: boolean; // PAIR, LEFT, RIGHT\n    emptyFields?: boolean;\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z\\.%@]*)?)$/;\n\nexport function unpackAnnotations(p: Prim | Expr[], opt?: UnpackAnnotationsOptions): UnpackedAnnotations {\n    if (Array.isArray(p)) {\n        return {};\n    }\n\n    let field: string[] | undefined;\n    let type: string[] | undefined;\n    let vars: string[] | undefined;\n\n    if (p.annots !== undefined) {\n        for (const v of p.annots) {\n            if (v.length !== 0) {\n                if (!annRe.test(v) ||\n                    (!opt?.specialVar && (v === \"@%\" || v === \"@%%\")) ||\n                    (!opt?.specialFields && v === \"%@\")) {\n                    throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n                }\n\n                switch (v[0]) {\n                    case \"%\":\n                        if (opt?.emptyFields || v.length > 1) {\n                            field = field || [];\n                            field.push(v);\n                        }\n                        break;\n                    case \":\":\n                        if (v.length > 1) {\n                            type = type || [];\n                            type.push(v);\n                        }\n                        break;\n                    case \"@\":\n                        if (opt?.emptyVar || v.length > 1) {\n                            vars = vars || [];\n                            vars.push(v);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    return { f: field, t: type, v: vars };\n}\n\nexport type TezosIDType = \"BlockHash\" | \"OperationHash\" | \"OperationListHash\" | \"OperationListListHash\" |\n    \"ProtocolHash\" | \"ContextHash\" | \"ED25519PublicKeyHash\" | \"SECP256K1PublicKeyHash\" |\n    \"P256PublicKeyHash\" | \"ContractHash\" | \"CryptoboxPublicKeyHash\" | \"ED25519Seed\" |\n    \"ED25519PublicKey\" | \"SECP256K1SecretKey\" | \"P256SecretKey\" | \"ED25519EncryptedSeed\" |\n    \"SECP256K1EncryptedSecretKey\" | \"P256EncryptedSecretKey\" | \"SECP256K1PublicKey\" |\n    \"P256PublicKey\" | \"SECP256K1Scalar\" | \"SECP256K1Element\" | \"ED25519SecretKey\" |\n    \"ED25519Signature\" | \"SECP256K1Signature\" | \"P256Signature\" | \"GenericSignature\" | \"ChainID\";\n\nexport type TezosIDPrefix = [number, number[]]; // payload length, prefix\n\nexport const tezosPrefix: Record<TezosIDType, TezosIDPrefix> = {\n    BlockHash: [32, [1, 52]], // B(51)\n    OperationHash: [32, [5, 116]], // o(51)\n    OperationListHash: [32, [133, 233]], // Lo(52)\n    OperationListListHash: [32, [29, 159, 109]], // LLo(53)\n    ProtocolHash: [32, [2, 170]], // P(51)\n    ContextHash: [32, [79, 199]], // Co(52)\n    ED25519PublicKeyHash: [20, [6, 161, 159]], // tz1(36)\n    SECP256K1PublicKeyHash: [20, [6, 161, 161]], // tz2(36)\n    P256PublicKeyHash: [20, [6, 161, 164]], // tz3(36)\n    ContractHash: [20, [2, 90, 121]], // KT1(36)\n    CryptoboxPublicKeyHash: [16, [153, 103]], // id(30)\n    ED25519Seed: [32, [13, 15, 58, 7]], // edsk(54)\n    ED25519PublicKey: [32, [13, 15, 37, 217]], // edpk(54)\n    SECP256K1SecretKey: [32, [17, 162, 224, 201]], // spsk(54)\n    P256SecretKey: [32, [16, 81, 238, 189]], // p2sk(54)\n    ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]], // edesk(88)\n    SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]], // spesk(88)\n    P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]], // p2esk(88)\n    SECP256K1PublicKey: [33, [3, 254, 226, 86]], // sppk(55)\n    P256PublicKey: [33, [3, 178, 139, 127]], // p2pk(55)\n    SECP256K1Scalar: [33, [38, 248, 136]], // SSp(53)\n    SECP256K1Element: [33, [5, 92, 0]], // GSp(54)\n    ED25519SecretKey: [64, [43, 246, 78, 7]], // edsk(98)\n    ED25519Signature: [64, [9, 245, 205, 134, 18]], // edsig(99)\n    SECP256K1Signature: [64, [13, 115, 101, 19, 63]], // spsig1(99)\n    P256Signature: [64, [54, 240, 44, 52]], // p2sig(98)\n    GenericSignature: [64, [4, 130, 43]], // sig(96)\n    ChainID: [4, [87, 82, 0]],\n};\n\nexport function checkDecodeTezosID<T extends TezosIDType[]>(id: string, ...types: T): [T[number], number[]] | null {\n    const buf = decodeBase58Check(id);\n    for (const t of types) {\n        const [plen, p] = tezosPrefix[t];\n        if (buf.length === plen + p.length) {\n            let i = 0;\n            while (i < p.length && buf[i] === p[i]) {\n                i++;\n            }\n            if (i === p.length) {\n                return [t, buf.slice(p.length)];\n            }\n        }\n    }\n    return null;\n}\n\nexport function encodeTezosID(id: TezosIDType, data: number[] | Uint8Array): string {\n    const [plen, p] = tezosPrefix[id];\n    if (data.length !== plen) {\n        throw new Error(`incorrect data length for ${id}: ${data.length}`);\n    }\n    return encodeBase58Check([...p, ...data]);\n}\n\n// reassemble comb pair for transparent comparison etc. non-recursive!\ntype PairTypeOrDataPrim<I extends \"pair\" | \"Pair\"> = I extends \"pair\" ? Extract<MichelsonTypePair<MichelsonType[]>, Prim> : Extract<MichelsonDataPair<MichelsonData[]>, Prim>;\nexport function unpackComb<I extends \"pair\" | \"Pair\">(id: I, v: I extends \"pair\" ? MichelsonTypePair<MichelsonType[]> : MichelsonDataPair<MichelsonData[]>): PairTypeOrDataPrim<I> {\n    const vv: MichelsonTypePair<MichelsonType[]> | MichelsonDataPair<MichelsonData[]> = v;\n    const args = Array.isArray(vv) ? vv : vv.args;\n    if (args.length === 2) {\n        // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n        const ret = id === \"pair\" ? {\n            prim: \"pair\",\n            args,\n        } : {\n            prim: \"Pair\",\n            args,\n        };\n        return ret as PairTypeOrDataPrim<I>;\n    }\n\n    return {\n        ...(Array.isArray(vv) ? { prim: id } : vv),\n        args: [\n            args[0],\n            {\n                prim: id,\n                args: args.slice(1),\n            },\n        ],\n    } as PairTypeOrDataPrim<I>;\n}\n\nexport function isPairType(t: MichelsonType): t is MichelsonTypePair<MichelsonType[]> {\n    return Array.isArray(t) || t.prim === \"pair\";\n}\n\nexport function isPairData(d: Expr): d is MichelsonDataPair<MichelsonData[]> {\n    return Array.isArray(d) || \"prim\" in d && d.prim === \"Pair\";\n}\n\nconst rfc3339Re = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nexport function parseDate(a: StringLiteral | IntLiteral): Date | null {\n    if (\"string\" in a) {\n        if (isNatural(a.string)) {\n            return new Date(parseInt(a.string, 10));\n        } else if (rfc3339Re.test(a.string)) {\n            const x = new Date(a.string);\n            if (!Number.isNaN(x.valueOf)) {\n                return x;\n            }\n        }\n    } else if (isNatural(a.int)) {\n        return new Date(parseInt(a.int, 10));\n    }\n    return null;\n}\n\nexport function parseHex(s: string): number[] {\n    const res: number[] = [];\n    for (let i = 0; i < s.length; i += 2) {\n        const ss = s.slice(i, i + 2);\n        const x = parseInt(ss, 16);\n        if (Number.isNaN(x)) {\n            throw new Error(`can't parse hex byte: ${ss}`);\n        }\n        res.push(x);\n    }\n    return res;\n}\n\nexport function hexBytes(bytes: number[]): string {\n    return bytes.map(x => ((x >> 4) & 0xf).toString(16) + (x & 0xf).toString(16)).join(\"\");\n}\n","import { Prim, Expr, IntLiteral } from \"./micheline\";\nimport { Tuple, NoArgs, ReqArgs, MichelsonError } from \"./utils\";\nimport {\n   MichelsonCode, MichelsonType, MichelsonData, MichelsonContract, MichelsonNoArgInstruction,\n   MichelsonInstruction, InstructionList, MichelsonTypeID, MichelsonSimpleComparableTypeID\n} from \"./michelson-types\";\n\n// Michelson validator\n\nconst noArgInstructionIDs: Record<MichelsonNoArgInstruction[\"prim\"], true> = {\n   \"ABS\": true, \"ADD\": true, \"ADDRESS\": true, \"AMOUNT\": true, \"AND\": true, \"APPLY\": true, \"BALANCE\": true,\n   \"BLAKE2B\": true, \"CAR\": true, \"CDR\": true, \"CHAIN_ID\": true, \"CHECK_SIGNATURE\": true, \"COMPARE\": true, \"CONCAT\": true, \"CONS\": true, \"EDIV\": true,\n   \"EQ\": true, \"EXEC\": true, \"FAILWITH\": true, \"GE\": true, \"GET_AND_UPDATE\": true, \"GT\": true, \"HASH_KEY\": true, \"IMPLICIT_ACCOUNT\": true,\n   \"INT\": true, \"ISNAT\": true, \"JOIN_TICKETS\": true, \"KECCAK\": true, \"LE\": true, \"LEVEL\": true, \"LSL\": true, \"LSR\": true, \"LT\": true, \"MEM\": true, \"MUL\": true,\n   \"NEG\": true, \"NEQ\": true, \"NEVER\": true, \"NOT\": true, \"NOW\": true, \"OR\": true, \"PACK\": true, \"PAIRING_CHECK\": true, \"READ_TICKET\": true,\n   \"SAPLING_VERIFY_UPDATE\": true, \"SELF\": true, \"SELF_ADDRESS\": true, \"SENDER\": true, \"SET_DELEGATE\": true, \"SHA256\": true, \"SHA3\": true,\n   \"SHA512\": true, \"SIZE\": true, \"SLICE\": true, \"SOME\": true, \"SOURCE\": true, \"SPLIT_TICKET\": true, \"SUB\": true, \"SWAP\": true, \"TICKET\": true,\n   \"TOTAL_VOTING_POWER\": true, \"TRANSFER_TOKENS\": true, \"UNIT\": true, \"VOTING_POWER\": true, \"XOR\": true, \"RENAME\": true,\n};\n\nexport const instructionIDs: Record<MichelsonInstruction[\"prim\"], true> = Object.assign({}, noArgInstructionIDs, {\n   \"CONTRACT\": true, \"CREATE_CONTRACT\": true, \"DIG\": true, \"DIP\": true, \"DROP\": true,\n   \"DUG\": true, \"DUP\": true, \"EMPTY_BIG_MAP\": true, \"EMPTY_MAP\": true, \"EMPTY_SET\": true, \"GET\": true, \"IF\": true, \"IF_CONS\": true, \"IF_LEFT\": true,\n   \"IF_NONE\": true, \"ITER\": true, \"LAMBDA\": true, \"LEFT\": true, \"LOOP\": true, \"LOOP_LEFT\": true, \"MAP\": true, \"NIL\": true, \"NONE\": true, \"PAIR\": true,\n   \"PUSH\": true, \"RIGHT\": true, \"SAPLING_EMPTY_STATE\": true, \"UNPACK\": true, \"UNPAIR\": true, \"UPDATE\": true, \"CAST\": true,\n} as const);\n\nconst simpleComparableTypeIDs: Record<MichelsonSimpleComparableTypeID, true> = {\n   \"unit\": true, \"never\": true, \"bool\": true, \"int\": true, \"nat\": true, \"string\": true,\n   \"chain_id\": true, \"bytes\": true, \"mutez\": true, \"key_hash\": true, \"key\": true,\n   \"signature\": true, \"timestamp\": true, \"address\": true,\n};\n\nconst typeIDs: Record<MichelsonTypeID, true> = Object.assign({}, simpleComparableTypeIDs, {\n   \"or\": true, \"pair\": true, \"set\": true, \"big_map\": true, \"contract\": true, \"lambda\": true,\n   \"list\": true, \"map\": true, \"operation\": true, \"option\": true, \"bls12_381_g1\": true,\n   \"bls12_381_g2\": true, \"bls12_381_fr\": true, \"sapling_transaction\": true, \"sapling_state\": true, \"ticket\": true,\n} as const);\n\nexport class MichelsonValidationError extends MichelsonError {\n   /**\n    * @param val Value of a node caused the error\n    * @param message An error message\n    */\n   constructor(public val: Expr, message?: string) {\n      super(val, message);\n      Object.setPrototypeOf(this, MichelsonValidationError.prototype);\n   }\n}\n\nfunction isPrim(ex: Expr): ex is Prim {\n   return \"prim\" in ex;\n}\n\nfunction isPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n   return Array.isArray(ex) || \"prim\" in ex;\n}\n\nfunction assertPrim(ex: Expr): ex is Prim {\n   if (isPrim(ex)) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"prim expression expected\");\n}\n\nfunction assertSeq(ex: Expr): ex is Expr[] {\n   if (Array.isArray(ex)) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"sequence expression expected\");\n}\n\nfunction assertPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n   if (isPrimOrSeq(ex)) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"prim or sequence expression expected\");\n}\n\nfunction assertNatural(i: IntLiteral) {\n   if (i.int[0] === \"-\") {\n      throw new MichelsonValidationError(i, \"natural number expected\");\n   }\n}\n\nfunction assertIntLiteral(ex: Expr): ex is IntLiteral {\n   if (\"int\" in ex) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"int literal expected\");\n}\n\nfunction assertArgs<N extends number>(ex: Prim, n: N):\n   ex is N extends 0 ?\n   NoArgs<Prim<string>> :\n   ReqArgs<Prim<string, Tuple<N, Expr>>> {\n   if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonInstruction(ex: Expr): ex is MichelsonCode {\n   if (Array.isArray(ex)) {\n      for (const n of ex) {\n         if (!Array.isArray(n) && !isPrim(n)) {\n            throw new MichelsonValidationError(ex, \"sequence or prim expected\");\n         }\n         assertMichelsonInstruction(n);\n      }\n      return true;\n   }\n\n   if (assertPrim(ex)) {\n      if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n         assertArgs(ex, 0);\n         return true;\n      }\n\n      switch (ex.prim) {\n         case \"DROP\":\n         case \"PAIR\":\n         case \"UNPAIR\":\n         case \"DUP\":\n         case \"UPDATE\":\n         case \"GET\":\n            if (ex.args !== undefined && assertArgs(ex, 1)) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n            }\n            break;\n\n         case \"DIG\":\n         case \"DUG\":\n         case \"SAPLING_EMPTY_STATE\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n            }\n            break;\n\n         case \"NONE\":\n         case \"LEFT\":\n         case \"RIGHT\":\n         case \"NIL\":\n         case \"CAST\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonType(ex.args[0]);\n            }\n            break;\n\n         case \"UNPACK\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonPackableType(ex.args[0]);\n            }\n            break;\n\n         case \"CONTRACT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonPassableType(ex.args[0]);\n            }\n            break;\n\n         case \"IF_NONE\":\n         case \"IF_LEFT\":\n         case \"IF_CONS\":\n         case \"IF\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[0])) {\n                  assertMichelsonInstruction(ex.args[0]);\n               }\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[1])) {\n                  assertMichelsonInstruction(ex.args[1]);\n               }\n            }\n            break;\n\n         case \"MAP\":\n         case \"ITER\":\n         case \"LOOP\":\n         case \"LOOP_LEFT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonInstruction(ex.args[0]);\n            }\n            break;\n\n         case \"CREATE_CONTRACT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonContract(ex.args[0]);\n            }\n            break;\n\n         case \"DIP\":\n            if (ex.args?.length === 2) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[1])) {\n                  assertMichelsonInstruction(ex.args[1]);\n               }\n            } else if (ex.args?.length === 1) {\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[0])) {\n                  assertMichelsonInstruction(ex.args[0]);\n               }\n            } else {\n               throw new MichelsonValidationError(ex, \"1 or 2 arguments expected\");\n            }\n            break;\n\n         case \"PUSH\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonPushableType(ex.args[0]);\n               assertMichelsonData(ex.args[1]);\n            }\n            break;\n\n         case \"EMPTY_SET\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonComparableType(ex.args[0]);\n            }\n            break;\n\n         case \"EMPTY_MAP\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonComparableType(ex.args[0]);\n               assertMichelsonType(ex.args[1]);\n            }\n            break;\n\n         case \"EMPTY_BIG_MAP\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonComparableType(ex.args[0]);\n               assertMichelsonBigMapStorableType(ex.args[1]);\n            }\n            break;\n\n         case \"LAMBDA\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 3)) {\n               assertMichelsonType(ex.args[0]);\n               assertMichelsonType(ex.args[1]);\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[2])) {\n                  assertMichelsonInstruction(ex.args[2]);\n               }\n            }\n            break;\n\n         default:\n            throw new MichelsonValidationError(ex, \"instruction expected\");\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonComparableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (Array.isArray(ex) || ex.prim === \"pair\" || ex.prim === \"or\" || ex.prim === \"option\") {\n         traverseType(ex, (ex) => assertMichelsonComparableType(ex));\n      } else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonPackableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n            ex.prim === \"big_map\" ||\n            ex.prim === \"operation\" ||\n            ex.prim === \"sapling_state\" ||\n            ex.prim === \"ticket\") {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside PACK/UNPACK instructions`);\n         }\n         traverseType(ex, (ex) => assertMichelsonPackableType(ex));\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonPushableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n            ex.prim === \"big_map\" ||\n            ex.prim === \"operation\" ||\n            ex.prim === \"sapling_state\" ||\n            ex.prim === \"ticket\" ||\n            ex.prim === \"contract\") {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n         }\n         traverseType(ex, (ex) => assertMichelsonPushableType(ex));\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonStorableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n            ex.prim === \"operation\" ||\n            ex.prim === \"contract\") {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a storage`);\n         }\n         traverseType(ex, (ex) => assertMichelsonStorableType(ex));\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonPassableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n            ex.prim === \"operation\") {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a parameter`);\n         }\n         traverseType(ex, (ex) => assertMichelsonPassableType(ex));\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonBigMapStorableType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n            ex.prim === \"big_map\" ||\n            ex.prim === \"operation\" ||\n            ex.prim === \"sapling_state\") {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n         }\n         traverseType(ex, (ex) => assertMichelsonBigMapStorableType(ex));\n      }\n   }\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrimOrSeq(ex)) {\n      if (isPrim(ex)) {\n         if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n            throw new MichelsonValidationError(ex, \"type expected\");\n         }\n         traverseType(ex, (ex) => assertMichelsonType(ex));\n      }\n   }\n   return true;\n}\n\nfunction traverseType(ex: Prim | Expr[], cb: (ex: Prim | Expr[]) => void): ex is MichelsonType {\n   if (Array.isArray(ex) || ex.prim === \"pair\") {\n      const args = Array.isArray(ex) ? ex : ex.args;\n      if (args === undefined || args.length < 2) {\n         throw new MichelsonValidationError(ex, \"at least 2 arguments expected\");\n      }\n      args.forEach(a => {\n         if (assertPrimOrSeq(a)) {\n            cb(a);\n         }\n      });\n      return true;\n   }\n\n   switch (ex.prim) {\n      case \"option\":\n      case \"list\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n            cb(ex.args[0]);\n         }\n         break;\n\n      case \"contract\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1)) {\n            assertMichelsonPassableType(ex.args[0]);\n         }\n         break;\n\n      case \"or\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n            cb(ex.args[0]);\n            cb(ex.args[1]);\n         }\n         break;\n\n      case \"lambda\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2)) {\n            assertMichelsonType(ex.args[0]);\n            assertMichelsonType(ex.args[1]);\n         }\n         break;\n\n      case \"set\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1)) {\n            assertMichelsonComparableType(ex.args[0]);\n         }\n         break;\n\n      case \"map\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n            assertMichelsonComparableType(ex.args[0]);\n            cb(ex.args[1]);\n         }\n         break;\n\n      case \"big_map\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n            assertMichelsonComparableType(ex.args[0]);\n            assertMichelsonBigMapStorableType(ex.args[1]);\n            cb(ex.args[1]);\n         }\n         break;\n\n      case \"ticket\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n            assertMichelsonComparableType(ex.args[0]);\n         }\n         break;\n\n      case \"sapling_state\":\n      case \"sapling_transaction\":\n         if (assertArgs(ex, 1)) {\n            assertIntLiteral(ex.args[0]);\n         }\n         break;\n\n      default:\n         assertArgs(ex, 0);\n   }\n\n   return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonData(ex: Expr): ex is MichelsonData {\n   if ((\"int\" in ex) || (\"string\" in ex) || (\"bytes\" in ex)) {\n      return true;\n   }\n\n   if (Array.isArray(ex)) {\n      let mapElts = 0;\n      for (const n of ex) {\n         if (isPrim(n) && n.prim === \"Elt\") {\n            /* istanbul ignore else */\n            if (assertArgs(n, 2)) {\n               assertMichelsonData(n.args[0]);\n               assertMichelsonData(n.args[1]);\n            }\n            mapElts++;\n         } else {\n            assertMichelsonData(n);\n         }\n      }\n\n      if (mapElts !== 0 && mapElts !== ex.length) {\n         throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n      }\n      return true;\n   }\n\n   if (isPrim(ex)) {\n      switch (ex.prim) {\n         case \"Unit\":\n         case \"True\":\n         case \"False\":\n         case \"None\":\n            assertArgs(ex, 0);\n            break;\n\n         case \"Pair\":\n            /* istanbul ignore else */\n            if (ex.args === undefined || ex.args.length < 2) {\n               throw new MichelsonValidationError(ex, \"at least 2 arguments expected\");\n            }\n            for (const a of ex.args) {\n               assertMichelsonData(a);\n            }\n            break;\n\n         case \"Left\":\n         case \"Right\":\n         case \"Some\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonData(ex.args[0]);\n            }\n            break;\n\n         default:\n            if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n               assertMichelsonInstruction(ex);\n            } else {\n               throw new MichelsonValidationError(ex, \"data entry or instruction expected\");\n            }\n      }\n   } else {\n      throw new MichelsonValidationError(ex, \"data entry expected\");\n   }\n\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonContract(ex: Expr): ex is MichelsonContract {\n   /* istanbul ignore else */\n   if (assertSeq(ex)) {\n      const ent: { [sec: string]: boolean } = {};\n      for (const sec of ex) {\n         if (assertPrim(sec)) {\n            if (sec.prim !== \"code\" && sec.prim !== \"parameter\" && sec.prim !== \"storage\") {\n               throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n            }\n            if (sec.prim in ent) {\n               throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n            }\n            ent[sec.prim] = true;\n\n            /* istanbul ignore else */\n            if (assertArgs(sec, 1)) {\n               switch (sec.prim) {\n                  case \"code\":\n                     /* istanbul ignore else */\n                     if (assertSeq(sec.args[0])) {\n                        assertMichelsonInstruction(sec.args[0]);\n                     }\n                     break;\n\n                  case \"parameter\":\n                     assertMichelsonPassableType(sec.args[0]);\n                     break;\n\n                  case \"storage\":\n                     assertMichelsonStorableType(sec.args[0]);\n               }\n            }\n         }\n      }\n   }\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nexport function isMichelsonScript(ex: Expr): ex is MichelsonContract {\n   try {\n      assertMichelsonContract(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nexport function isMichelsonData(ex: Expr): ex is MichelsonData {\n   try {\n      assertMichelsonData(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nexport function isMichelsonCode(ex: Expr): ex is InstructionList {\n   try {\n      assertMichelsonInstruction(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nexport function isMichelsonType(ex: Expr): ex is MichelsonType {\n   try {\n      assertMichelsonType(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\nexport function isInstruction(p: Prim): p is MichelsonInstruction {\n   return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\n\nexport function assertDataListIfAny(d: MichelsonData): d is MichelsonData[] {\n   if (!Array.isArray(d)) {\n      return false;\n   }\n   for (const v of d) {\n      if (\"prim\" in v) {\n         if (isInstruction(v)) {\n            throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n         } else if (v.prim === \"Elt\") {\n            throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n         }\n      }\n   }\n   return true;\n}","import { BytesLiteral, Expr, IntLiteral, Prim } from \"./micheline\";\nimport {\n    MichelsonTypeID, MichelsonDataID,\n    MichelsonSectionID, MichelsonInstructionID,\n    MichelsonData, MichelsonType, MichelsonDataOr,\n    MichelsonDataOption, MichelsonInstruction\n} from \"./michelson-types\";\nimport { assertDataListIfAny, assertMichelsonData, assertMichelsonInstruction } from \"./michelson-validator\";\nimport {\n    checkDecodeTezosID, encodeTezosID, hexBytes,\n    isPairData, isPairType, MichelsonTypeError,\n    parseBytes, parseDate, parseHex, unpackComb\n} from \"./utils\";\n\ntype PrimID = MichelsonTypeID |\n    MichelsonDataID |\n    MichelsonSectionID |\n    MichelsonInstructionID |\n    \"Elt\";\n\nconst primitives: PrimID[] = [\"parameter\", \"storage\", \"code\", \"False\", \"Elt\", \"Left\", \"None\", \"Pair\",\n    \"Right\", \"Some\", \"True\", \"Unit\", \"PACK\", \"UNPACK\", \"BLAKE2B\", \"SHA256\", \"SHA512\", \"ABS\", \"ADD\",\n    \"AMOUNT\", \"AND\", \"BALANCE\", \"CAR\", \"CDR\", \"CHECK_SIGNATURE\", \"COMPARE\", \"CONCAT\", \"CONS\",\n    \"CREATE_ACCOUNT\", \"CREATE_CONTRACT\", \"IMPLICIT_ACCOUNT\", \"DIP\", \"DROP\", \"DUP\", \"EDIV\", \"EMPTY_MAP\",\n    \"EMPTY_SET\", \"EQ\", \"EXEC\", \"FAILWITH\", \"GE\", \"GET\", \"GT\", \"HASH_KEY\", \"IF\", \"IF_CONS\", \"IF_LEFT\",\n    \"IF_NONE\", \"INT\", \"LAMBDA\", \"LE\", \"LEFT\", \"LOOP\", \"LSL\", \"LSR\", \"LT\", \"MAP\", \"MEM\", \"MUL\", \"NEG\",\n    \"NEQ\", \"NIL\", \"NONE\", \"NOT\", \"NOW\", \"OR\", \"PAIR\", \"PUSH\", \"RIGHT\", \"SIZE\", \"SOME\", \"SOURCE\",\n    \"SENDER\", \"SELF\", \"STEPS_TO_QUOTA\", \"SUB\", \"SWAP\", \"TRANSFER_TOKENS\", \"SET_DELEGATE\", \"UNIT\",\n    \"UPDATE\", \"XOR\", \"ITER\", \"LOOP_LEFT\", \"ADDRESS\", \"CONTRACT\", \"ISNAT\", \"CAST\", \"RENAME\", \"bool\",\n    \"contract\", \"int\", \"key\", \"key_hash\", \"lambda\", \"list\", \"map\", \"big_map\", \"nat\", \"option\", \"or\",\n    \"pair\", \"set\", \"signature\", \"string\", \"bytes\", \"mutez\", \"timestamp\", \"unit\", \"operation\",\n    \"address\", \"SLICE\", \"DIG\", \"DUG\", \"EMPTY_BIG_MAP\", \"APPLY\", \"chain_id\", \"CHAIN_ID\", \"LEVEL\",\n    \"SELF_ADDRESS\", \"never\", \"NEVER\", \"UNPAIR\", \"VOTING_POWER\", \"TOTAL_VOTING_POWER\", \"KECCAK\",\n    \"SHA3\", \"PAIRING_CHECK\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\", \"sapling_state\",\n    \"sapling_transaction\", \"SAPLING_EMPTY_STATE\", \"SAPLING_VERIFY_UPDATE\", \"ticket\", \"TICKET\",\n    \"READ_TICKET\", \"SPLIT_TICKET\", \"JOIN_TICKETS\", \"GET_AND_UPDATE\"];\n\nconst primTags: { [key in PrimID]?: number } & { [key: string]: number | undefined; } = Object.assign({}, ...primitives.map((v, i) => ({ [v]: i })));\n\nenum Tag {\n    Int = 0,\n    String = 1,\n    Sequence = 2,\n    Prim0 = 3,\n    Prim0Annot = 4,\n    Prim1 = 5,\n    Prim1Annot = 6,\n    Prim2 = 7,\n    Prim2Annot = 8,\n    Prim = 9,\n    Bytes = 10,\n}\nclass Writer {\n    public buffer: number[] = [];\n\n    get length(): number {\n        return this.buffer.length;\n    }\n\n    writeBytes(val: number[]) {\n        this.buffer.push(...val.map(v => v & 0xff));\n    }\n\n    writeUint8(val: number) {\n        const v = val | 0;\n        this.buffer.push(v & 0xff);\n    }\n\n    writeUint16(val: number) {\n        const v = val | 0;\n        this.buffer.push((v >> 8) & 0xff);\n        this.buffer.push(v & 0xff);\n    }\n\n    writeUint32(val: number) {\n        const v = val | 0;\n        this.buffer.push((v >> 24) & 0xff);\n        this.buffer.push((v >> 16) & 0xff);\n        this.buffer.push((v >> 8) & 0xff);\n        this.buffer.push(v & 0xff);\n    }\n\n    writeInt8(val: number) {\n        this.writeUint8(val);\n    }\n\n    writeInt16(val: number) {\n        this.writeUint16(val);\n    }\n\n    writeInt32(val: number) {\n        this.writeUint32(val);\n    }\n}\n\nconst boundsErr = new Error(\"bounds out of range\");\nclass Reader {\n    constructor(private buffer: number[] | Uint8Array, private idx: number = 0, private cap: number = buffer.length) {\n    }\n\n    /** Remaining length */\n    get length(): number {\n        return this.cap - this.idx;\n    }\n\n    readBytes(len: number): number[] | Uint8Array {\n        if (this.cap - this.idx < len) {\n            throw boundsErr;\n        }\n        const ret = this.buffer.slice(this.idx, this.idx + len);\n        this.idx += len;\n        return ret;\n    }\n\n    reader(len: number): Reader {\n        if (this.cap - this.idx < len) {\n            throw boundsErr;\n        }\n        const ret = new Reader(this.buffer, this.idx, this.idx + len);\n        this.idx += len;\n        return ret;\n    }\n\n    copy(): Reader {\n        return new Reader(this.buffer, this.idx, this.cap);\n    }\n\n    readUint8(): number {\n        if (this.cap - this.idx < 1) {\n            throw boundsErr;\n        }\n        return this.buffer[this.idx++] >>> 0;\n    }\n\n    readUint16(): number {\n        if (this.cap - this.idx < 2) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        return ((x0 << 8) | x1) >>> 0;\n    }\n\n    readUint32(): number {\n        if (this.cap - this.idx < 4) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        const x2 = this.buffer[this.idx++];\n        const x3 = this.buffer[this.idx++];\n        return ((x0 << 24) | (x1 << 16) | (x2 << 8) | x3) >>> 0;\n    }\n\n    readInt8(): number {\n        if (this.cap - this.idx < 1) {\n            throw boundsErr;\n        }\n        const x = this.buffer[this.idx++];\n        return (x << 24) >> 24;\n    }\n\n    readInt16(): number {\n        if (this.cap - this.idx < 2) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        return (((x0 << 8) | x1) << 16) >> 16;\n    }\n\n    readInt32(): number {\n        if (this.cap - this.idx < 4) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        const x2 = this.buffer[this.idx++];\n        const x3 = this.buffer[this.idx++];\n        return (x0 << 24) | (x1 << 16) | (x2 << 8) | x3;\n    }\n}\n\nenum ContractID {\n    Implicit = 0,\n    Originated = 1,\n}\n\nenum PublicKeyHashID {\n    ED25519 = 0,\n    SECP256K1 = 1,\n    P256 = 2,\n}\n\ntype AddressType = \"ED25519PublicKeyHash\" | \"SECP256K1PublicKeyHash\" | \"P256PublicKeyHash\" | \"ContractHash\";\n\nexport interface Address {\n    type: AddressType;\n    hash: number[] | Uint8Array;\n    entryPoint?: string;\n}\n\nfunction readPublicKeyHash(rd: Reader): Address {\n    let type: AddressType;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case PublicKeyHashID.ED25519:\n            type = \"ED25519PublicKeyHash\";\n            break;\n        case PublicKeyHashID.SECP256K1:\n            type = \"SECP256K1PublicKeyHash\";\n            break;\n        case PublicKeyHashID.P256:\n            type = \"P256PublicKeyHash\";\n            break;\n        default:\n            throw new Error(`unknown public key hash tag: ${tag}`);\n    }\n    return { type, hash: rd.readBytes(20) };\n}\n\nfunction readAddress(rd: Reader): Address {\n    let address: Address;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case ContractID.Implicit:\n            address = readPublicKeyHash(rd);\n            break;\n\n        case ContractID.Originated:\n            address = {\n                type: \"ContractHash\",\n                hash: rd.readBytes(20),\n            };\n            rd.readBytes(1);\n            break;\n\n        default:\n            throw new Error(`unknown address tag: ${tag}`);\n    }\n\n    if (rd.length !== 0) {\n        // entry point\n        const dec = new TextDecoder();\n        address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n    }\n    return address;\n}\n\nfunction writePublicKeyHash(a: Address, w: Writer): void {\n    let tag: PublicKeyHashID;\n    switch (a.type) {\n        case \"ED25519PublicKeyHash\":\n            tag = PublicKeyHashID.ED25519;\n            break;\n        case \"SECP256K1PublicKeyHash\":\n            tag = PublicKeyHashID.SECP256K1;\n            break;\n        case \"P256PublicKeyHash\":\n            tag = PublicKeyHashID.P256;\n            break;\n        default:\n            throw new Error(`unexpected address type: ${a.type}`);\n    }\n    w.writeUint8(tag);\n    w.writeBytes(Array.from(a.hash));\n}\n\nfunction writeAddress(a: Address, w: Writer): void {\n    if (a.type === \"ContractHash\") {\n        w.writeUint8(ContractID.Originated);\n        w.writeBytes(Array.from(a.hash));\n        w.writeUint8(0);\n    } else {\n        w.writeUint8(ContractID.Implicit);\n        writePublicKeyHash(a, w);\n    }\n\n    if (a.entryPoint !== undefined && a.entryPoint !== \"\" && a.entryPoint !== \"default\") {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(a.entryPoint);\n        w.writeBytes(Array.from(bytes));\n    }\n}\n\nenum PublicKeyID {\n    ED25519 = 0,\n    SECP256K1 = 1,\n    P256 = 2,\n}\n\nexport type PublicKeyType = \"ED25519PublicKey\" | \"SECP256K1PublicKey\" | \"P256PublicKey\";\nexport interface PublicKey {\n    type: PublicKeyType;\n    publicKey: number[] | Uint8Array;\n}\n\nfunction readPublicKey(rd: Reader): PublicKey {\n    let ln: number;\n    let type: PublicKeyType;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case PublicKeyID.ED25519:\n            type = \"ED25519PublicKey\";\n            ln = 32;\n            break;\n        case PublicKeyID.SECP256K1:\n            type = \"SECP256K1PublicKey\";\n            ln = 33;\n            break;\n        case PublicKeyID.P256:\n            type = \"P256PublicKey\";\n            ln = 33;\n            break;\n        default:\n            throw new Error(`unknown public key tag: ${tag}`);\n    }\n    return { type, publicKey: rd.readBytes(ln) };\n}\n\nfunction writePublicKey(pk: PublicKey, w: Writer): void {\n    let tag: PublicKeyID;\n    switch (pk.type) {\n        case \"ED25519PublicKey\":\n            tag = PublicKeyID.ED25519;\n            break;\n        case \"SECP256K1PublicKey\":\n            tag = PublicKeyID.SECP256K1;\n            break;\n        case \"P256PublicKey\":\n            tag = PublicKeyID.P256;\n            break;\n        default:\n            throw new Error(`unexpected public key type: ${pk.type}`);\n    }\n    w.writeUint8(tag);\n    w.writeBytes(Array.from(pk.publicKey));\n}\n\ntype WriteTransformFunc = (e: Expr) => [Expr, IterableIterator<WriteTransformFunc>];\n\nfunction writeExpr(expr: Expr, wr: Writer, tf: WriteTransformFunc): void {\n    const [e, args] = tf(expr);\n\n    if (Array.isArray(e)) {\n        const w = new Writer();\n        for (const v of e) {\n            const a = args.next();\n            if (a.done) {\n                throw new Error(\"REPORT ME: iterator is done\");\n            }\n            writeExpr(v, w, a.value);\n        }\n        wr.writeUint8(Tag.Sequence);\n        wr.writeUint32(w.length);\n        wr.writeBytes(w.buffer);\n        return;\n    }\n\n    if (\"string\" in e) {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(e.string);\n        wr.writeUint8(Tag.String);\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(Array.from(bytes));\n        return;\n    }\n\n    if (\"int\" in e) {\n        wr.writeUint8(Tag.Int);\n        let val = BigInt(e.int);\n        const sign = val < 0;\n        if (sign) {\n            val = -val;\n        }\n        let i = 0;\n        do {\n            const bits = (i === 0) ? BigInt(6) : BigInt(7);\n            let byte = val & ((BigInt(1) << bits) - BigInt(1));\n            val >>= bits;\n            if (val) {\n                byte |= BigInt(0x80);\n            }\n            if (i === 0 && sign) {\n                byte |= BigInt(0x40);\n            }\n            wr.writeUint8(Number(byte));\n            i++;\n        } while (val);\n        return;\n    }\n\n    if (\"bytes\" in e) {\n        const bytes = parseHex(e.bytes);\n        wr.writeUint8(Tag.Bytes);\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(bytes);\n        return;\n    }\n\n    const prim = primTags[e.prim];\n    if (prim === undefined) {\n        throw new TypeError(`Can't encode primary: ${e.prim}`);\n    }\n\n    const tag = (e.args?.length || 0) < 3 ?\n        Tag.Prim0 + (e.args?.length || 0) * 2 + (e.annots === undefined || e.annots.length === 0 ? 0 : 1) :\n        Tag.Prim;\n\n    wr.writeUint8(tag);\n    wr.writeUint8(prim);\n\n    if (e.args !== undefined) {\n        if (e.args.length < 3) {\n            for (const v of e.args) {\n                const a = args.next();\n                if (a.done) {\n                    throw new Error(\"REPORT ME: iterator is done\");\n                }\n                writeExpr(v, wr, a.value);\n            }\n        } else {\n            const w = new Writer();\n            for (const v of e.args) {\n                const a = args.next();\n                if (a.done) {\n                    throw new Error(\"REPORT ME: iterator is done\");\n                }\n                writeExpr(v, w, a.value);\n            }\n            wr.writeUint32(w.length);\n            wr.writeBytes(w.buffer);\n        }\n    }\n\n    if (e.annots !== undefined && e.annots.length !== 0) {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(e.annots.join(\" \"));\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(Array.from(bytes));\n    } else if (e.args !== undefined && e.args.length >= 3) {\n        wr.writeUint32(0);\n    }\n}\n\ntype ReadTransformFuncs = [(e: Expr) => IterableIterator<ReadTransformFuncs>, (e: Expr) => Expr];\n\nfunction readExpr(rd: Reader, tf: ReadTransformFuncs): Expr {\n    function* passThrough() {\n        while (true) {\n            yield readPassThrough;\n        }\n    }\n    const [args, tr] = tf;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case Tag.Int:\n            {\n                const buf: number[] = [];\n                let byte: number;\n                do {\n                    byte = rd.readInt8();\n                    buf.push(byte);\n                } while ((byte & 0x80) !== 0);\n                let val = BigInt(0);\n                let sign = false;\n                for (let i = buf.length - 1; i >= 0; i--) {\n                    const bits = (i === 0) ? BigInt(6) : BigInt(7);\n                    const byte = BigInt(buf[i]);\n                    val <<= bits;\n                    val |= byte & ((BigInt(1) << bits) - BigInt(1));\n                    if (i === 0) {\n                        sign = !!(byte & BigInt(0x40));\n                    }\n                }\n                if (sign) {\n                    val = -val;\n                }\n                return tr({ int: String(val) });\n            }\n\n        case Tag.String:\n            {\n                const length = rd.readUint32();\n                const bytes = rd.readBytes(length);\n                const dec = new TextDecoder();\n                return tr({ string: dec.decode(new Uint8Array(bytes)) });\n            }\n\n        case Tag.Bytes:\n            {\n                const length = rd.readUint32();\n                const bytes = rd.readBytes(length);\n                const hex = hexBytes(Array.from(bytes));\n                return tr({ bytes: hex });\n            }\n\n        case Tag.Sequence:\n            {\n                const length = rd.readUint32();\n                let res: Expr[] = [];\n                let savedrd = rd.copy();\n                // make two passes\n                let it: IterableIterator<ReadTransformFuncs> = passThrough();\n                for (let n = 0; n < 2; n++) {\n                    const r = savedrd.reader(length);\n                    res = [];\n                    while (r.length > 0) {\n                        const a = it.next();\n                        if (a.done) {\n                            throw new Error(\"REPORT ME: iterator is done\");\n                        }\n                        res.push(readExpr(r, a.value));\n                    }\n                    // make a second pass with injected side effects\n                    it = args(res);\n                    savedrd = rd;\n                }\n                return tr(res);\n            }\n\n        default:\n            {\n                if (tag > 9) {\n                    throw new Error(`Unknown tag: ${tag}`);\n                }\n                const p = rd.readUint8();\n                if (p >= primitives.length) {\n                    throw new Error(`Unknown primitive tag: ${p}`);\n                }\n                const prim = primitives[p];\n                const argn = (tag - 3) >> 1;\n                let res: Prim = { prim };\n                // make two passes\n                let it: IterableIterator<ReadTransformFuncs> = passThrough();\n                let savedrd = rd.copy();\n                for (let n = 0; n < 2; n++) {\n                    res = { prim };\n                    if (argn < 3) {\n                        for (let i = 0; i < argn; i++) {\n                            const a = it.next();\n                            if (a.done) {\n                                throw new Error(\"REPORT ME: iterator is done\");\n                            }\n                            res.args = res.args || [];\n                            res.args.push(readExpr(savedrd, a.value));\n                        }\n                    } else {\n                        res.args = res.args || [];\n                        const length = savedrd.readUint32();\n                        const r = savedrd.reader(length);\n                        while (r.length > 0) {\n                            const a = it.next();\n                            if (a.done) {\n                                throw new Error(\"REPORT ME: iterator is done\");\n                            }\n                            res.args.push(readExpr(r, a.value));\n                        }\n                    }\n                    // make a second pass with injected side effects\n                    it = args(res);\n                    savedrd = rd;\n                }\n\n                if (((tag - 3) & 1) === 1 || argn === 3) {\n                    // read annotations\n                    const length = rd.readUint32();\n                    if (length !== 0) {\n                        const bytes = rd.readBytes(length);\n                        const dec = new TextDecoder();\n                        res.annots = dec.decode(new Uint8Array(bytes)).split(\" \");\n                    }\n                }\n                return tr(res);\n            }\n    }\n}\n\nconst isOrData = (e: Expr): e is MichelsonDataOr => \"prim\" in e && (e.prim === \"Left\" || e.prim === \"Right\");\nconst isOptionData = (e: Expr): e is MichelsonDataOption => \"prim\" in e && (e.prim === \"Some\" || e.prim === \"None\");\n\nconst getWriteTransformFunc = (t: MichelsonType): WriteTransformFunc => {\n    if (isPairType(t)) {\n        return (d: Expr) => {\n            if (!isPairData(d)) {\n                throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n            }\n            assertDataListIfAny(d);\n            // combs aren't used in pack format\n            const tc = unpackComb(\"pair\", t);\n            const dc = unpackComb(\"Pair\", d);\n            return [dc, (function* () {\n                for (const a of tc.args) {\n                    yield getWriteTransformFunc(a);\n                }\n            })()];\n        };\n    }\n\n    switch (t.prim) {\n        case \"or\":\n            return (d: Expr) => {\n                if (!isOrData(d)) {\n                    throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n                }\n                return [d, (function* () {\n                    yield getWriteTransformFunc(t.args[d.prim === \"Left\" ? 0 : 1]);\n                })()];\n            };\n\n        case \"option\":\n            return (d: Expr) => {\n                if (!isOptionData(d)) {\n                    throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n                }\n                return [d, (function* () {\n                    const dd = d;\n                    if (dd.prim === \"Some\") {\n                        yield getWriteTransformFunc(t.args[0]);\n                    }\n                })()];\n            };\n\n        case \"list\":\n        case \"set\":\n            return (d: Expr) => {\n                if (!Array.isArray(d)) {\n                    throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n                }\n                return [d, (function* () {\n                    for (const _v of d) {\n                        yield getWriteTransformFunc(t.args[0]);\n                    }\n                })()];\n            };\n\n        case \"map\":\n            return (d: Expr) => {\n                if (!Array.isArray(d)) {\n                    throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n                }\n                return [d, (function* (): Generator<WriteTransformFunc> {\n                    for (const _elt of d) {\n                        yield (elt: Expr) => {\n                            if (!(\"prim\" in elt) || elt.prim !== \"Elt\") {\n                                throw new MichelsonTypeError(t, elt, `map element expected: ${JSON.stringify(elt)}`);\n                            }\n                            return [elt, (function* () {\n                                for (const a of t.args) {\n                                    yield getWriteTransformFunc(a);\n                                }\n                            })()];\n                        };\n                    }\n                })()];\n            };\n\n        case \"chain_id\":\n            return (d: Expr) => {\n                if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                    throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n                }\n                let bytes: BytesLiteral;\n                if (\"string\" in d) {\n                    const id = checkDecodeTezosID(d.string, \"ChainID\");\n                    if (id === null) {\n                        throw new MichelsonTypeError(t, d, `chain id base58 expected: ${d.string}`);\n                    }\n                    bytes = { bytes: hexBytes(id[1]) };\n                } else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n\n        case \"signature\":\n            return (d: Expr) => {\n                if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                    throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n                }\n                let bytes: BytesLiteral;\n                if (\"string\" in d) {\n                    const sig = checkDecodeTezosID(d.string, \"ED25519Signature\", \"SECP256K1Signature\", \"P256Signature\", \"GenericSignature\");\n                    if (sig === null) {\n                        throw new MichelsonTypeError(t, d, `signature base58 expected: ${d.string}`);\n                    }\n                    bytes = { bytes: hexBytes(sig[1]) };\n                } else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n\n        case \"key_hash\":\n            return (d: Expr) => {\n                if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                    throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n                }\n                let bytes: BytesLiteral;\n                if (\"string\" in d) {\n                    const pkh = checkDecodeTezosID(d.string, \"ED25519PublicKeyHash\", \"SECP256K1PublicKeyHash\", \"P256PublicKeyHash\");\n                    if (pkh === null) {\n                        throw new MichelsonTypeError(t, d, `key hash base58 expected: ${d.string}`);\n                    }\n                    const w = new Writer();\n                    writePublicKeyHash({ type: pkh[0], hash: pkh[1] }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                } else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n\n        case \"key\":\n            return (d: Expr) => {\n                if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                    throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n                }\n                let bytes: BytesLiteral;\n                if (\"string\" in d) {\n                    const key = checkDecodeTezosID(d.string, \"ED25519PublicKey\", \"SECP256K1PublicKey\", \"P256PublicKey\");\n                    if (key === null) {\n                        throw new MichelsonTypeError(t, d, `public key base58 expected: ${d.string}`);\n                    }\n                    const w = new Writer();\n                    writePublicKey({ type: key[0], publicKey: key[1] }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                } else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n\n        case \"address\":\n            return (d: Expr) => {\n                if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                    throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n                }\n                let bytes: BytesLiteral;\n                if (\"string\" in d) {\n                    const s = d.string.split(\"%\");\n                    const address = checkDecodeTezosID(s[0], \"ED25519PublicKeyHash\", \"SECP256K1PublicKeyHash\", \"P256PublicKeyHash\", \"ContractHash\");\n                    if (address === null) {\n                        throw new MichelsonTypeError(t, d, `address base58 expected: ${d.string}`);\n                    }\n                    const w = new Writer();\n                    writeAddress({ type: address[0], hash: address[1], entryPoint: s.length > 1 ? s[1] : undefined }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                } else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n\n        case \"timestamp\":\n            return (d: Expr) => {\n                if (!(\"string\" in d) && !(\"int\" in d)) {\n                    throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n                }\n                let int: IntLiteral;\n                if (\"string\" in d) {\n                    const p = parseDate(d);\n                    if (p === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse date: ${d.string}`);\n                    }\n                    int = { int: String(Math.floor(p.getTime() / 1000)) };\n                } else {\n                    int = d;\n                }\n                return [int, [][Symbol.iterator]()];\n            };\n\n        default:\n            return writePassThrough;\n    }\n};\n\ntype PushInstruction = MichelsonInstruction & Prim<\"PUSH\">;\nconst isPushInstruction = (e: Expr): e is PushInstruction => \"prim\" in e && e.prim === \"PUSH\";\n\nconst writePassThrough: WriteTransformFunc = (e: Expr) => {\n    if (isPushInstruction(e)) {\n        assertMichelsonInstruction(e);\n        // capture inlined type definition\n        return [e, (function* () {\n            yield writePassThrough;\n            yield getWriteTransformFunc(e.args[0]);\n        })()];\n    }\n\n    return [e, (function* () {\n        while (true) {\n            yield writePassThrough;\n        }\n    })()];\n};\n\n/**\n * Serializes any value of packable type to its optimized binary representation \n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\n * corresponding optimized binary forms borrowed from the Tezos protocol\n * \n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n * \n * const typ: MichelsonType = {\n *     prim: \"address\"\n * };\n * \n * const packed = packData(data, typ);\n * \n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\n * ```\n * \n * Without a type definition the base58 encoded address will be treated as a string\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n * \n * const packed = packData(data);\n * \n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as numeric array\n */\nexport function packData(d: MichelsonData, t?: MichelsonType): number[] {\n    const w = new Writer();\n    w.writeUint8(5);\n    writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n    return w.buffer;\n}\n\n/**\n * Serializes any value of packable type to its optimized binary representation \n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\n * \n * ```typescript\n * const data: MichelsonData = {\n *     string: \"2019-09-26T10:59:51Z\"\n * };\n * \n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n * \n * const packed = packDataBytes(data, typ);\n * \n * // { bytes: \"0500a7e8e4d80b\" }\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as a bytes literal\n */\nexport function packDataBytes(d: MichelsonData, t?: MichelsonType): BytesLiteral {\n    return { bytes: hexBytes(packData(d, t)) };\n}\n\nconst getReadTransformFuncs = (t: MichelsonType): ReadTransformFuncs => {\n    if (isPairType(t)) {\n        const args = Array.isArray(t) ? t : t.args;\n        return [\n            (d: Expr) => {\n                if (!isPairData(d)) {\n                    throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n                }\n                return (function* () {\n                    for (const a of args) {\n                        yield getReadTransformFuncs(a);\n                    }\n                })();\n            },\n            (d: Expr) => d\n        ];\n    }\n\n    switch (t.prim) {\n        case \"or\":\n            return [\n                (d: Expr) => {\n                    if (!isOrData(d)) {\n                        throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n                    }\n                    return (function* () {\n                        yield getReadTransformFuncs(t.args[d.prim === \"Left\" ? 0 : 1]);\n                    })();\n                },\n                (d: Expr) => d\n            ];\n\n        case \"option\":\n            return [\n                (d: Expr) => {\n                    if (!isOptionData(d)) {\n                        throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n                    }\n                    return (function* () {\n                        if (d.prim === \"Some\") {\n                            yield getReadTransformFuncs(t.args[0]);\n                        }\n                    })();\n                },\n                (d: Expr) => d\n            ];\n\n        case \"list\":\n        case \"set\":\n            return [\n                (d: Expr) => {\n                    if (!Array.isArray(d)) {\n                        throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n                    }\n                    return (function* () {\n                        while (true) {\n                            yield getReadTransformFuncs(t.args[0]);\n                        }\n                    })();\n                },\n                (d: Expr) => d\n            ];\n\n        case \"map\":\n            return [\n                (d: Expr): IterableIterator<ReadTransformFuncs> => {\n                    if (!Array.isArray(d)) {\n                        throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n                    }\n                    return (function* (): Generator<ReadTransformFuncs> {\n                        while (true) {\n                            yield [\n                                (elt: Expr) => {\n                                    if (!(\"prim\" in elt) || elt.prim !== \"Elt\") {\n                                        throw new MichelsonTypeError(t, elt, `map element expected: ${JSON.stringify(elt)}`);\n                                    }\n                                    return (function* () {\n                                        for (const a of t.args) {\n                                            yield getReadTransformFuncs(a);\n                                        }\n                                    })();\n                                },\n                                (elt: Expr) => elt\n                            ];\n                        }\n                    })();\n                },\n                (d: Expr) => d\n            ];\n\n        case \"chain_id\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n                    }\n                    return { string: encodeTezosID(\"ChainID\", bytes) };\n                }\n            ];\n\n        case \"signature\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n                    }\n                    return { string: encodeTezosID(\"GenericSignature\", bytes) };\n                }\n            ];\n\n        case \"key_hash\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const addr = readPublicKeyHash(rd);\n                    return { string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? \"%\" + addr.entryPoint : \"\") };\n                }\n            ];\n\n        case \"key\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const pk = readPublicKey(rd);\n                    return { string: encodeTezosID(pk.type, pk.publicKey) };\n                }\n            ];\n\n        case \"address\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"bytes\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const addr = readAddress(rd);\n                    return { string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? \"%\" + addr.entryPoint : \"\") };\n                }\n            ];\n\n        case \"timestamp\":\n            return [\n                () => [][Symbol.iterator](),\n                (d: Expr) => {\n                    if (!(\"int\" in d) && !(\"string\" in d)) {\n                        throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n                    }\n                    if (\"string\" in d) {\n                        return d;\n                    }\n                    const date = new Date(parseInt(d.int, 10) * 1000);\n                    return { string: date.toISOString().slice(0, 19) + \"Z\" };\n                }\n            ];\n\n        default:\n            return readPassThrough;\n    }\n};\n\nconst readPassThrough: ReadTransformFuncs = [\n    (e: Expr) => {\n        if (isPushInstruction(e)) {\n            assertMichelsonInstruction(e);\n            // capture inlined type definition\n            return (function* () {\n                yield readPassThrough;\n                yield getReadTransformFuncs(e.args[0]);\n            })();\n        }\n\n        return (function* () {\n            while (true) {\n                yield readPassThrough;\n            }\n        })();\n    },\n    (e: Expr) => e\n];\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed \n * back to their string representations like base58 and ISO timestamps.\n * \n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n * \n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n * \n * const data = unpackData(src, typ);\n * \n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * \n * Same binary data without a type definition\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n * \n * const data = unpackData(src);\n * \n * // { int: \"1569495591\" }\n * ```\n * @param src Byte array\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackData(src: number[] | Uint8Array, t?: MichelsonType): MichelsonData {\n    const r = new Reader(src);\n    if (r.readUint8() !== 5) {\n        throw new Error(\"incorrect packed data magic number\");\n    }\n    const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n    if (assertMichelsonData(ex)) {\n        return ex;\n    }\n    throw new Error(); // never\n}\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\n * \n * ```typescript\n * const src = { bytes: \"0500a7e8e4d80b\" };\n * \n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n * \n * const data = unpackDataBytes(src, typ);\n * \n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * @param src Bytes object\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackDataBytes(src: BytesLiteral, t?: MichelsonType): MichelsonData {\n    const bytes = parseBytes(src.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n    }\n    return unpackData(bytes, t);\n}\n\n// helper functions also used by validator\n\nexport function decodeAddressBytes(b: BytesLiteral): Address {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readAddress(rd);\n}\n\nexport function decodePublicKeyHashBytes(b: BytesLiteral): Address {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readPublicKeyHash(rd);\n}\n\nexport function decodePublicKeyBytes(b: BytesLiteral): PublicKey {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readPublicKey(rd);\n}","import { Prim, Expr } from \"./micheline\";\nimport {\n    MichelsonType, MichelsonData, MichelsonMapElt, MichelsonCode, MichelsonTypeOption,\n    MichelsonContract, MichelsonContractSection, MichelsonReturnType, MichelsonTypePair,\n    MichelsonInstruction, InstructionList, MichelsonTypeID, MichelsonTypeOr,\n    DefaultProtocol,\n    Protocol,\n    refContract,\n    MichelsonTypeAddress\n} from \"./michelson-types\";\nimport {\n    unpackAnnotations, MichelsonError, isNatural,\n    LongInteger, parseBytes, compareBytes, isDecimal,\n    checkDecodeTezosID, UnpackedAnnotations, Nullable,\n    UnpackAnnotationsOptions, unpackComb, MichelsonTypeError, isPairType, isPairData, parseDate,\n} from \"./utils\";\nimport { decodeBase58Check } from \"./base58\";\nimport { decodeAddressBytes, decodePublicKeyBytes, decodePublicKeyHashBytes } from \"./binary\";\nimport {\n    assertMichelsonComparableType,\n    assertMichelsonPackableType, assertMichelsonStorableType,\n    assertMichelsonBigMapStorableType, assertMichelsonPushableType, isInstruction, assertDataListIfAny\n} from \"./michelson-validator\";\nimport { ParserOptions } from \"./micheline-parser\";\n\nexport interface Context extends ParserOptions {\n    contract?: MichelsonContract;\n    traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class MichelsonInstructionError extends MichelsonError<MichelsonCode> {\n    /**\n     * @param val Value of a type node caused the error\n     * @param stackState Current stack state\n     * @param message An error message\n     */\n    constructor(val: MichelsonCode, public stackState: MichelsonReturnType, message?: string) {\n        super(val, message);\n        Object.setPrototypeOf(this, MichelsonInstructionError.prototype);\n    }\n}\n\n// 'sequence as a pair' edo syntax helpers\nfunction typeID(t: MichelsonType): MichelsonTypeID {\n    return Array.isArray(t) ? \"pair\" : t.prim;\n}\n\ntype TypeArgs<T extends MichelsonType> = T extends Prim ? T[\"args\"] : T;\nfunction typeArgs<T extends MichelsonType>(t: T): TypeArgs<T> {\n    return (\"prim\" in t ? (t as Extract<MichelsonType, Prim>).args : t) as TypeArgs<T>;\n}\n\nfunction assertScalarTypesEqual(a: MichelsonType, b: MichelsonType, field: boolean = false): void {\n    if (typeID(a) !== typeID(b)) {\n        throw new MichelsonTypeError(a, undefined, `types mismatch: ${typeID(a)} != ${typeID(b)}`);\n    }\n\n    const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n    if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n        throw new MichelsonTypeError(a, undefined, `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`);\n    }\n    if (field &&\n        (ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0])) {\n        throw new MichelsonTypeError(a, undefined, `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`);\n    }\n\n    if (isPairType(a)) {\n        const aArgs = unpackComb(\"pair\", a);\n        const bArgs = unpackComb(\"pair\", b as typeof a);\n        assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n        assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n        return;\n    }\n\n    switch (a.prim) {\n        case \"option\":\n        case \"list\":\n        case \"contract\":\n        case \"set\":\n        case \"ticket\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n            break;\n\n        case \"or\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0], true);\n            assertScalarTypesEqual(a.args[1], (b as typeof a).args[1], true);\n            break;\n\n        case \"lambda\":\n        case \"map\":\n        case \"big_map\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n            assertScalarTypesEqual(a.args[1], (b as typeof a).args[1]);\n            break;\n\n        case \"sapling_state\":\n        case \"sapling_transaction\":\n            if (parseInt(a.args[0].int, 10) !== parseInt((b as typeof a).args[0].int, 10)) {\n                throw new MichelsonTypeError(a, undefined, `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${(b as typeof a).args[0].int}`);\n            }\n    }\n}\n\nfunction assertStacksEqual<T1 extends MichelsonType[], T2 extends T1>(a: T1, b: T2): void {\n    if (a.length !== b.length) {\n        throw new MichelsonTypeError(a, undefined, `stack length mismatch: ${a.length} != ${b.length}`);\n    }\n    for (let i = 0; i < a.length; i++) {\n        assertScalarTypesEqual(a[i], b[i]);\n    }\n}\n\nexport function assertTypeAnnotationsValid(t: MichelsonType, field: boolean = false): void {\n    if (!Array.isArray(t)) {\n        const ann = unpackAnnotations(t);\n        if ((ann.t?.length || 0) > 1) {\n            throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one type annotation allowed: ${t.annots}`);\n        }\n\n        if (field) {\n            if ((ann.f?.length || 0) > 1) {\n                throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one field annotation allowed: ${t.annots}`);\n            }\n        } else {\n            if ((ann.f?.length || 0) > 0) {\n                throw new MichelsonTypeError(t, undefined, `${t.prim}: field annotations aren't allowed: ${t.annots}`);\n            }\n        }\n    }\n\n    if (isPairType(t)) {\n        const args = typeArgs(t);\n        for (const a of args) {\n            assertTypeAnnotationsValid(a, true);\n        }\n        return;\n    }\n\n    switch (t.prim) {\n        case \"option\":\n        case \"list\":\n        case \"contract\":\n        case \"set\":\n            assertTypeAnnotationsValid(t.args[0]);\n            break;\n\n        case \"or\":\n            for (const a of t.args) {\n                assertTypeAnnotationsValid(a, true);\n            }\n            break;\n\n        case \"lambda\":\n        case \"map\":\n        case \"big_map\":\n            assertTypeAnnotationsValid(t.args[0]);\n            assertTypeAnnotationsValid(t.args[1]);\n    }\n}\n\n// Data integrity check\n\nfunction compareMichelsonData(t: MichelsonType, a: MichelsonData, b: MichelsonData): number {\n    if (isPairType(t)) {\n        if (isPairData(a) && isPairData(b)) {\n            assertDataListIfAny(a);\n            assertDataListIfAny(b);\n            const tComb = unpackComb(\"pair\", t);\n            const aComb = unpackComb(\"Pair\", a);\n            const bComb = unpackComb(\"Pair\", b);\n            const x = compareMichelsonData(tComb.args[0], aComb.args[0], bComb.args[0]);\n            if (x !== 0) {\n                return x;\n            }\n            return compareMichelsonData(tComb.args[0], aComb.args[1], bComb.args[1]);\n        }\n    } else {\n        switch (t.prim) {\n            case \"int\":\n            case \"nat\":\n            case \"mutez\":\n                if ((\"int\" in a) && (\"int\" in b)) {\n                    return new LongInteger(a.int).cmp(new LongInteger(b.int));\n                }\n                break;\n\n            case \"string\":\n                if ((\"string\" in a) && (\"string\" in b)) {\n                    const x = a.string.localeCompare(b.string);\n                    return x < 0 ? -1 : x > 0 ? 1 : 0;\n                }\n                break;\n\n            case \"bytes\":\n                if ((\"bytes\" in a) && (\"bytes\" in b)) {\n                    const aa = parseBytes(a.bytes);\n                    const bb = parseBytes(b.bytes);\n                    if (aa !== null && bb !== null) {\n                        return compareBytes(aa, bb);\n                    }\n                }\n                break;\n\n            case \"bool\":\n                if ((\"prim\" in a) && (\"prim\" in b) && (a.prim === \"True\" || a.prim === \"False\") && (b.prim === \"True\" || b.prim === \"False\")) {\n                    return a.prim === b.prim ? 0 : a.prim === \"False\" ? -1 : 1;\n                }\n                break;\n\n            case \"key\":\n            case \"key_hash\":\n            case \"address\":\n            case \"signature\":\n            case \"chain_id\":\n                if ((\"string\" in a || \"bytes\" in a) && (\"string\" in b || \"bytes\" in b)) {\n                    return compareBytes(\"string\" in a ? decodeBase58Check(a.string) : parseBytes(a.bytes) || [], \"string\" in b ? decodeBase58Check(b.string) : parseBytes(b.bytes) || []);\n                }\n                break;\n\n            case \"timestamp\":\n                if (((\"string\" in a) || (\"int\" in a)) && ((\"string\" in b) || (\"int\" in b))) {\n                    const aa = parseDate(a);\n                    const bb = parseDate(b);\n                    if (aa !== null && bb !== null) {\n                        const x = aa.valueOf() - bb.valueOf();\n                        return x < 0 ? -1 : x > 0 ? 1 : 0;\n                    }\n                }\n                break;\n\n            case \"unit\":\n                if ((\"prim\" in a) && (\"prim\" in b) && a.prim === \"Unit\" && b.prim === \"Unit\") {\n                    return 0;\n                }\n        }\n    }\n\n    // Unlikely, types are expected to be verified before the function call\n    throw new MichelsonTypeError(t, undefined, `${typeID(t)}: not comparable values: ${JSON.stringify(a)}, ${JSON.stringify(b)}`);\n}\n\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d: MichelsonData): d is InstructionList {\n    if (!Array.isArray(d)) {\n        return false;\n    }\n    for (const v of d) {\n        if (!(Array.isArray(v) && isFunction(v) ||\n            (\"prim\" in v) && isInstruction(v))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction assertDataValidInternal(d: MichelsonData, t: MichelsonType, ctx: Context | null): void {\n    if (isPairType(t)) {\n        if (isPairData(d)) {\n            assertDataListIfAny(d);\n            const dc = unpackComb(\"Pair\", d);\n            const tc = unpackComb(\"pair\", t);\n            assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n            assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n            return;\n        }\n        throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n    }\n\n    switch (t.prim) {\n        // Atomic literals\n        case \"int\":\n            if ((\"int\" in d) && isDecimal(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `integer value expected: ${JSON.stringify(d)}`);\n\n        case \"nat\":\n        case \"mutez\":\n            if ((\"int\" in d) && isNatural(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `natural value expected: ${JSON.stringify(d)}`);\n\n        case \"string\":\n            if (\"string\" in d) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `string value expected: ${JSON.stringify(d)}`);\n\n        case \"bytes\":\n        case \"bls12_381_g1\":\n        case \"bls12_381_g2\":\n            if (\"bytes\" in d && parseBytes(d.bytes) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `bytes value expected: ${JSON.stringify(d)}`);\n\n        case \"bool\":\n            if ((\"prim\" in d) && (d.prim === \"True\" || d.prim === \"False\")) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `boolean value expected: ${JSON.stringify(d)}`);\n\n        case \"key_hash\":\n            if ((\"string\" in d) &&\n                checkDecodeTezosID(d.string,\n                    \"ED25519PublicKeyHash\",\n                    \"SECP256K1PublicKeyHash\",\n                    \"P256PublicKeyHash\") !== null) {\n                return;\n            } else if (\"bytes\" in d) {\n                try {\n                    decodePublicKeyHashBytes(d);\n                    return;\n                } catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n\n        case \"timestamp\":\n            if (((\"string\" in d) || (\"int\" in d)) && parseDate(d) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n\n        case \"address\":\n            if (\"string\" in d) {\n                let address = d.string;\n                const ep = d.string.indexOf(\"%\");\n                if (ep >= 0) {\n                    // trim entry point\n                    address = d.string.slice(0, ep);\n                }\n                if (checkDecodeTezosID(address,\n                    \"ED25519PublicKeyHash\",\n                    \"SECP256K1PublicKeyHash\",\n                    \"P256PublicKeyHash\",\n                    \"ContractHash\") !== null) {\n                    return;\n                }\n            } else if (\"bytes\" in d) {\n                try {\n                    decodeAddressBytes(d);\n                    return;\n                } catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n\n        case \"key\":\n            if ((\"string\" in d) &&\n                checkDecodeTezosID(d.string,\n                    \"ED25519PublicKey\",\n                    \"SECP256K1PublicKey\",\n                    \"P256PublicKey\") !== null) {\n                return;\n            } else if (\"bytes\" in d) {\n                try {\n                    decodePublicKeyBytes(d);\n                    return;\n                } catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n\n        case \"unit\":\n            if ((\"prim\" in d) && d.prim === \"Unit\") {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `unit value expected: ${JSON.stringify(d)}`);\n\n        case \"signature\":\n            if ((\"bytes\" in d) || (\"string\" in d) &&\n                checkDecodeTezosID(d.string,\n                    \"ED25519Signature\",\n                    \"SECP256K1Signature\",\n                    \"P256Signature\",\n                    \"GenericSignature\") !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n\n        case \"chain_id\":\n            if (\"bytes\" in d || \"string\" in d) {\n                const x = \"string\" in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n                if (x !== null) {\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n\n        case \"operation\":\n            throw new MichelsonTypeError(t, d, \"operation type can't be represented as a literal value\");\n\n        case \"contract\":\n            throw new MichelsonTypeError(t, d, \"contract type can't be represented as a literal value\");\n\n        // Complex types\n        case \"option\":\n            if (\"prim\" in d) {\n                if (d.prim === \"None\") {\n                    return;\n                } else if (d.prim === \"Some\") {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n\n        case \"list\":\n        case \"set\":\n            if (assertDataListIfAny(d)) {\n                let prev: MichelsonData | undefined;\n                for (const v of d) {\n                    assertDataValidInternal(v, t.args[0], ctx);\n                    if (t.prim === \"set\") {\n                        if (prev === undefined) {\n                            prev = v;\n                        } else if (compareMichelsonData(t.args[0], prev, v) > 0) {\n                            throw new MichelsonTypeError(t, d, `set elements must be ordered: ${JSON.stringify(d)}`);\n                        }\n                    }\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n        case \"or\":\n            if (\"prim\" in d) {\n                if (d.prim === \"Left\") {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                } else if (d.prim === \"Right\") {\n                    assertDataValidInternal(d.args[0], t.args[1], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `union (or) expected: ${JSON.stringify(d)}`);\n\n        case \"lambda\":\n            if (isFunction(d)) {\n                const ret = functionTypeInternal(d, [t.args[0]], ctx);\n                if (\"failed\" in ret) {\n                    throw new MichelsonTypeError(t, d, `function is failed with error type: ${ret.failed}`);\n                }\n                if (ret.length !== 1) {\n                    throw new MichelsonTypeError(t, d, `function must return a value`);\n                }\n                assertScalarTypesEqual(t.args[1], ret[0]);\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `function expected: ${JSON.stringify(d)}`);\n\n        case \"map\":\n        case \"big_map\":\n            if (Array.isArray(d)) {\n                let prev: MichelsonMapElt | undefined;\n                for (const v of d) {\n                    if (!(\"prim\" in v) || v.prim !== \"Elt\") {\n                        throw new MichelsonTypeError(t, d, `map elements expected: ${JSON.stringify(d)}`);\n                    }\n                    assertDataValidInternal(v.args[0], t.args[0], ctx);\n                    assertDataValidInternal(v.args[1], t.args[1], ctx);\n                    if (prev === undefined) {\n                        prev = v;\n                    } else if (compareMichelsonData(t.args[0], prev.args[0], v.args[0]) > 0) {\n                        throw new MichelsonTypeError(t, d, `map elements must be ordered: ${JSON.stringify(d)}`);\n                    }\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n        case \"bls12_381_fr\":\n            if (\"int\" in d && isDecimal(d.int) || \"bytes\" in d && parseBytes(d.bytes) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `BLS12-381 element expected: ${JSON.stringify(d)}`);\n\n        case \"sapling_state\":\n            if (Array.isArray(d)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `sapling state expected: ${JSON.stringify(d)}`);\n\n        case \"ticket\":\n            assertDataValidInternal(d, {\n                prim: \"pair\", args: [\n                    { prim: \"address\" },\n                    t.args[0],\n                    { prim: \"nat\" },\n                ]\n            }, ctx);\n            return;\n\n        default:\n            throw new MichelsonTypeError(t, d, `unexpected type: ${typeID(t)}`);\n    }\n}\n\n// Code validation\n\ntype StackType<T extends (MichelsonTypeID[] | null)[]> = {\n    [N in keyof T]: T[N] extends MichelsonTypeID[] ? MichelsonType<T[N][number]> : MichelsonType;\n};\n\nexport interface InstructionTrace {\n    op: MichelsonCode;\n    in: MichelsonType[];\n    out: MichelsonReturnType;\n}\n\nfunction instructionListType(inst: InstructionList, stack: MichelsonType[], ctx: Context | null): MichelsonReturnType {\n    let ret: MichelsonReturnType = stack;\n    let s = stack;\n    let i = 0;\n    for (const op of inst) {\n        const ft = functionTypeInternal(op, s, ctx);\n        ret = ft;\n        if (\"failed\" in ft) {\n            break;\n        }\n        s = ft;\n        i++;\n    }\n\n    if ((\"failed\" in ret) && i !== inst.length - 1) {\n        throw new MichelsonInstructionError(inst, ret, \"FAIL must appear in a tail position\");\n    }\n\n    if (ctx?.traceCallback !== undefined) {\n        const trace: InstructionTrace = {\n            op: inst,\n            in: stack,\n            out: ret,\n        };\n        ctx.traceCallback(trace);\n    }\n    return ret;\n}\n\nfunction functionTypeInternal(inst: MichelsonCode, stack: MichelsonType[], ctx: Context | null): MichelsonReturnType {\n    const proto = ctx?.protocol || DefaultProtocol;\n\n    if (Array.isArray(inst)) {\n        return instructionListType(inst, stack, ctx);\n    }\n    const instruction = inst; // Make it const for type guarding\n\n    // make sure the stack has enough number of arguments of specific types\n    function args<T extends (MichelsonTypeID[] | null)[]>(n: number, ...typeIds: T): StackType<T> {\n        if (stack.length < typeIds.length + n) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`);\n        }\n\n        let i = n;\n        for (const ids of typeIds) {\n            if (ids !== null && ids.length !== 0) {\n                let ii = 0;\n                while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n                    ii++;\n                }\n                if (ii === ids.length) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(stack[i])} instead`);\n                }\n            }\n            i++;\n        }\n        return stack.slice(n, typeIds.length + n) as StackType<T>;\n    }\n\n    function rethrow<T extends unknown[], U>(fn: (...args: T) => U) {\n        return (...args: T): U => {\n            try {\n                return fn(...args);\n            } catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                } else {\n                    throw err;\n                }\n            }\n        };\n    }\n\n    function rethrowTypeGuard<T extends Expr, U extends MichelsonType & T>(fn: (arg: T) => arg is U) {\n        return (arg: T): arg is U => {\n            try {\n                return fn(arg);\n            } catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                } else {\n                    throw err;\n                }\n            }\n        };\n    }\n\n    const argAnn = rethrow(unpackAnnotations);\n    const ensureStacksEqual = rethrow(assertStacksEqual);\n    const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n    const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n    const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n    const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n    const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n    const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType);\n\n    // unpack instruction annotations and assert their maximum number\n    function instructionAnn(num: { f?: number; t?: number; v?: number }, opt?: UnpackAnnotationsOptions) {\n        const a = argAnn(instruction, {\n            ...opt,\n            emptyFields: num.f !== undefined && num.f > 1,\n            emptyVar: num.v !== undefined && num.v > 1,\n        });\n        const assertNum = (a: string[] | undefined, n: number | undefined, type: string) => {\n            if (a && a.length > (n || 0)) {\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`);\n            }\n        };\n        assertNum(a.f, num.f, \"field\");\n        assertNum(a.t, num.t, \"type\");\n        assertNum(a.v, num.v, \"variable\");\n        return a;\n    }\n\n    // also keeps annotation class if null is provided\n    function annotate<T extends MichelsonType>(tt: T, a: Nullable<UnpackedAnnotations>): T {\n        const tx: MichelsonType = tt;\n        const t: Extract<MichelsonType, Prim> = Array.isArray(tx) ? { prim: \"pair\", args: tx } : tx;\n        const src = argAnn(t);\n        const ann = (a.v !== undefined || a.t !== undefined || a.f !== undefined) ?\n            [\n                ...((a.v === null ? src.v : a.v) || []),\n                ...((a.t === null ? src.t : a.t) || []),\n                ...((a.f === null ? src.f : a.f) || [])\n            ] : undefined;\n\n        const { annots, ...rest } = t;\n        return { ...(rest as T), ...(ann && ann.length !== 0 && { annots: ann }) };\n    }\n\n    // shortcut to copy at most one variable annotation from the instruction to the type\n    function annotateVar<T extends MichelsonType>(t: T, def?: string) {\n        const ia = instructionAnn({ v: 1 });\n        return annotate(t, { v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null, t: null });\n    }\n\n    // annotate CAR/CDR/UNPAIR/GET\n    function annotateField(arg: MichelsonTypePair<MichelsonType[]>, field: MichelsonType, insAnn: UnpackedAnnotations, n: number, defField: string): MichelsonType {\n        const fieldAnn = argAnn(field).f?.[0]; // field's field annotation\n        const insFieldAnn = insAnn.f?.[n];\n        if (insFieldAnn !== undefined && insFieldAnn !== \"%\" && fieldAnn !== undefined && insFieldAnn !== fieldAnn) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`);\n        }\n        const insVarAnn = insAnn.v?.[n]; // nth instruction's variable annotation\n        const varAnn = argAnn(arg).v?.[0]; // instruction argument's variable annotation\n        return annotate(field, {\n            t: null,\n            v: insVarAnn ?\n                insVarAnn === \"@%\" ?\n                    fieldAnn ? [\"@\" + fieldAnn.slice(1)] : undefined :\n                    insVarAnn === \"@%%\" ?\n                        varAnn ?\n                            [\"@\" + varAnn.slice(1) + \".\" + (fieldAnn ? fieldAnn.slice(1) : defField)] :\n                            fieldAnn ? [\"@\" + fieldAnn.slice(1)] : undefined :\n                        [insVarAnn] :\n                null,\n        });\n    }\n\n    // comb helper functions\n    function getN(src: MichelsonTypePair<MichelsonType[]>, n: number, i: number = n): MichelsonType[] {\n        const p = unpackComb(\"pair\", src);\n        if (i === 1) {\n            return [p.args[0]];\n        } else if (i === 2) {\n            return p.args;\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return [p.args[0], ...getN(right, n, i - 1)];\n        } else {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n} fields are expected`);\n        }\n    }\n\n    function getNth(src: MichelsonTypePair<MichelsonType[]>, n: number, i: number = n): MichelsonType {\n        if (i === 0) {\n            return src;\n        }\n        const p = unpackComb(\"pair\", src);\n        if (i === 1) {\n            return p.args[0];\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return getNth(right, n, i - 2);\n        } else if (i === 2) {\n            return right;\n        }\n        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n    }\n\n    function updateNth(src: MichelsonTypePair<MichelsonType[]>, x: MichelsonType, n: number, i: number = n): MichelsonType {\n        if (i === 0) {\n            return x;\n        }\n        const p = unpackComb(\"pair\", src);\n        if (i === 1) {\n            return {\n                ...p,\n                args: [x, p.args[1]],\n            };\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return {\n                ...p,\n                args: [p.args[0], updateNth(right, x, n, i - 2)],\n            };\n        } else if (i === 2) {\n            return {\n                ...p,\n                args: [p.args[0], x],\n            };\n        }\n        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n    }\n\n    const varSuffix = (a: UnpackedAnnotations, suffix: string) => [\"@\" + (a.v ? a.v[0].slice(1) + \".\" : \"\") + suffix];\n\n    function branchType(br0: MichelsonReturnType, br1: MichelsonReturnType): MichelsonReturnType {\n        if ((\"failed\" in br0) || (\"failed\" in br1)) {\n            // Might be useful for debugging\n            if ((\"failed\" in br0) && (\"failed\" in br1)) {\n                try {\n                    assertScalarTypesEqual(br0.failed, br1.failed);\n                    return br0;\n                } catch {\n                    return { failed: { prim: \"or\", args: [br0.failed, br1.failed] } };\n                }\n            } else {\n                return (\"failed\" in br0) ? br1 : br0;\n            }\n        } else {\n            ensureStacksEqual(br0, br1);\n            return br0;\n        }\n    }\n\n    const retStack = ((instruction: MichelsonInstruction): MichelsonReturnType => {\n        switch (instruction.prim) {\n            case \"DUP\":\n                {\n                    const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n                    if (n === 0) {\n                        throw new MichelsonInstructionError(instruction, stack, \"DUP 0 is forbidden\");\n                    }\n                    const s = args(n - 1, null)[0];\n                    if (typeID(s) === \"ticket\") {\n                        throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n                    }\n                    return [s, ...stack];\n                }\n\n            case \"SWAP\":\n                {\n                    const s = args(0, null, null);\n                    instructionAnn({});\n                    return [s[1], s[0], ...stack.slice(2)];\n                }\n\n            case \"SOME\":\n                return [annotate({ prim: \"option\", args: [args(0, null)[0]] }, instructionAnn({ t: 1, v: 1 })), ...stack.slice(1)];\n\n            case \"UNIT\":\n                return [annotate({ prim: \"unit\" }, instructionAnn({ v: 1, t: 1 })), ...stack];\n\n            case \"PAIR\":\n                {\n                    const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n                    if (n < 2) {\n                        throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n                    }\n                    const s = args(0, ...new Array<null>(n).fill(null));\n                    const ia = instructionAnn({ f: n, t: 1, v: 1 }, { specialFields: true });\n                    const trim = (s: string) => {\n                        const i = s.lastIndexOf(\".\");\n                        return s.slice(i > 0 ? i + 1 : 1);\n                    };\n                    const retArgs = s.map((v, i) => {\n                        const va = argAnn(v);\n                        const f = ia.f && ia.f.length > i && ia.f[i] !== \"%\" ?\n                            ia.f[i] === \"%@\" ?\n                                va.v ? [\"%\" + trim(va.v?.[0] || \"\")] : undefined :\n                                [ia.f[i]] :\n                            undefined;\n                        return annotate(v, { v: null, t: null, f });\n                    });\n                    return [\n                        annotate({\n                            prim: \"pair\",\n                            args: retArgs,\n                        }, { t: ia.t, v: ia.v }),\n                        ...stack.slice(n)\n                    ];\n                }\n\n            case \"UNPAIR\":\n                {\n                    const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n                    if (n < 2) {\n                        throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n                    }\n                    const s = args(0, [\"pair\"])[0];\n                    const ia = instructionAnn({ f: 2, v: 2 }, { specialVar: true });\n                    const fields = getN(s, n);\n                    return [...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? \"car\" : \"cdr\")), ...stack.slice(1)];\n                }\n\n            case \"CAR\":\n            case \"CDR\":\n                {\n                    const s = unpackComb(\"pair\", args(0, [\"pair\"])[0]);\n                    const field = s.args[instruction.prim === \"CAR\" ? 0 : 1];\n                    const ia = instructionAnn({ f: 1, v: 1 }, { specialVar: true });\n                    return [annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()), ...stack.slice(1)];\n                }\n\n            case \"CONS\":\n                {\n                    const s = args(0, null, [\"list\"]);\n                    ensureTypesEqual(s[0], s[1].args[0]);\n                    return [annotateVar({ prim: \"list\", args: [s[1].args[0]] }), ...stack.slice(2)];\n                }\n\n            case \"SIZE\":\n                args(0, [\"string\", \"list\", \"set\", \"map\", \"bytes\"]);\n                return [annotateVar({ prim: \"nat\" }), ...stack.slice(1)];\n\n            case \"MEM\":\n                {\n                    const s = args(0, null, [\"set\", \"map\", \"big_map\"]);\n                    ensureComparableType(s[0]);\n                    ensureTypesEqual(s[0], s[1].args[0]);\n                    return [annotateVar({ prim: \"bool\" }), ...stack.slice(2)];\n                }\n\n            case \"GET\":\n                if (instruction.args) {\n                    // comb operation\n                    const n = parseInt(instruction.args[0].int, 10);\n                    const s = args(0, [\"pair\"])[0];\n                    return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n                } else {\n                    // map operation\n                    const s = args(0, null, [\"map\", \"big_map\"]);\n                    ensureComparableType(s[0]);\n                    ensureTypesEqual(s[0], s[1].args[0]);\n                    return [annotateVar({ prim: \"option\", args: [s[1].args[1]] }), ...stack.slice(2)];\n                }\n\n            case \"UPDATE\":\n                if (instruction.args) {\n                    // comb operation\n                    const n = parseInt(instruction.args[0].int, 10);\n                    const s = args(0, null, [\"pair\"]);\n                    return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n\n                } else {\n                    // map operation\n                    const s0 = args(0, null, [\"bool\", \"option\"]);\n                    ensureComparableType(s0[0]);\n                    if (s0[1].prim === \"bool\") {\n                        const s1 = args(2, [\"set\"]);\n                        ensureTypesEqual(s0[0], s1[0].args[0]);\n                        return [annotateVar({\n                            prim: \"set\",\n                            args: [annotate(s0[0], { t: null })],\n                        }), ...stack.slice(3)];\n                    }\n\n                    const s1 = args(2, [\"map\", \"big_map\"]);\n                    ensureTypesEqual(s0[0], s1[0].args[0]);\n                    if (s1[0].prim === \"map\") {\n                        return [annotateVar({\n                            prim: \"map\",\n                            args: [\n                                annotate(s0[0], { t: null }),\n                                annotate(s0[1].args[0], { t: null }),\n                            ],\n                        }), ...stack.slice(3)];\n                    }\n                    ensureBigMapStorableType(s0[1].args[0]);\n                    return [annotateVar({\n                        prim: \"big_map\",\n                        args: [\n                            annotate(s0[0], { t: null }),\n                            annotate(s0[1].args[0], { t: null }),\n                        ],\n                    }), ...stack.slice(3)];\n                }\n\n            case \"GET_AND_UPDATE\":\n                {\n                    const ia = instructionAnn({ v: 2 });\n                    const s = args(0, null, [\"option\"], [\"map\", \"big_map\"]);\n                    ensureComparableType(s[0]);\n                    ensureTypesEqual(s[0], s[2].args[0]);\n                    ensureTypesEqual(s[1].args[0], s[2].args[1]);\n                    const va = ia.v?.map(v => v !== \"@\" ? [v] : undefined);\n                    if (s[2].prim === \"map\") {\n                        return [\n                            annotate({ prim: \"option\", args: [s[2].args[1]] }, { v: va?.[0] }),\n                            annotate({\n                                prim: \"map\",\n                                args: [\n                                    annotate(s[0], { t: null }),\n                                    annotate(s[1].args[0], { t: null }),\n                                ],\n                            }, { v: va?.[1] }),\n                            ...stack.slice(3),\n                        ];\n                    }\n                    ensureBigMapStorableType(s[1].args[0]);\n                    return [\n                        annotate({ prim: \"option\", args: [s[2].args[1]] }, { v: va?.[0] }),\n                        annotate({\n                            prim: \"big_map\",\n                            args: [\n                                annotate(s[0], { t: null }),\n                                annotate(s[1].args[0], { t: null }),\n                            ],\n                        }, { v: va?.[1] }),\n                        ...stack.slice(3),\n                    ];\n                }\n\n            case \"EXEC\":\n                {\n                    const s = args(0, null, [\"lambda\"]);\n                    ensureTypesEqual(s[0], s[1].args[0]);\n                    return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n                }\n\n            case \"APPLY\":\n                {\n                    const s = args(0, null, [\"lambda\"]);\n                    ensureStorableType(s[0]);\n                    ensurePushableType(s[0]);\n                    if (!isPairType(s[1].args[0])) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`);\n                    }\n                    const pt = s[1].args[0];\n                    ensureTypesEqual(s[0], typeArgs(pt)[0]);\n                    return [annotateVar({ prim: \"lambda\", args: [typeArgs(pt)[1], s[1].args[1]] }), ...stack.slice(2)];\n                }\n\n            case \"FAILWITH\":\n                {\n                    const s = args(0, null)[0];\n                    if (proto === Protocol.PtEdo2Zk || proto === Protocol.PsFLorena || proto === Protocol.PtGRANADs) {\n                        ensurePackableType(s);\n                    }\n                    return { failed: s };\n                }\n\n            case \"NEVER\":\n                args(0, [\"never\"]);\n                return { failed: { prim: \"never\" } };\n\n\n            case \"RENAME\":\n                return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n\n            case \"CONCAT\":\n                {\n                    const s0 = args(0, [\"string\", \"list\", \"bytes\"]);\n                    if (s0[0].prim === \"list\") {\n                        if (typeID(s0[0].args[0]) !== \"string\" && typeID(s0[0].args[0]) !== \"bytes\") {\n                            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`);\n                        }\n                        return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n                    }\n                    const s1 = args(1, [\"string\", \"bytes\"]);\n                    if (s0[0].prim !== s1[0].prim) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`);\n                    }\n                    return [annotateVar(s1[0]), ...stack.slice(2)];\n                }\n\n            case \"SLICE\":\n                return [annotateVar({ prim: \"option\", args: [args(0, [\"nat\"], [\"nat\"], [\"string\", \"bytes\"])[2]] }, \"@slice\"), ...stack.slice(3)];\n\n            case \"PACK\":\n                {\n                    const s = args(0, null)[0];\n                    ensurePackableType(s);\n                    return [annotateVar({ prim: \"bytes\" }, \"@packed\"), ...stack.slice(1)];\n                }\n\n            case \"ADD\":\n                {\n                    const s = args(0,\n                        [\"nat\", \"int\", \"timestamp\", \"mutez\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\"],\n                        [\"nat\", \"int\", \"timestamp\", \"mutez\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\"]\n                    );\n                    if (s[0].prim === \"nat\" && s[1].prim === \"int\" || s[0].prim === \"int\" && s[1].prim === \"nat\") {\n                        return [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                    } else if (s[0].prim === \"int\" && s[1].prim === \"timestamp\" || s[0].prim === \"timestamp\" && s[1].prim === \"int\") {\n                        return [annotateVar({ prim: \"timestamp\" }), ...stack.slice(2)];\n                    } else if ((s[0].prim === \"int\" || s[0].prim === \"nat\" || s[0].prim === \"mutez\" || s[0].prim === \"bls12_381_g1\" || s[0].prim === \"bls12_381_g2\" || s[0].prim === \"bls12_381_fr\") && s[0].prim === s[1].prim) {\n                        return [annotateVar(s[0]), ...stack.slice(2)];\n                    }\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`);\n                }\n\n            case \"SUB\":\n                {\n                    const s = args(0, [\"nat\", \"int\", \"timestamp\", \"mutez\"], [\"nat\", \"int\", \"timestamp\", \"mutez\"]);\n                    if (((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) ||\n                        s[0].prim === \"timestamp\" && s[1].prim === \"timestamp\") {\n                        return [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                    } else if (s[0].prim === \"timestamp\" && s[1].prim === \"int\") {\n                        return [annotateVar({ prim: \"timestamp\" }), ...stack.slice(2)];\n                    } else if (s[0].prim === \"mutez\" && s[1].prim === \"mutez\") {\n                        return [annotateVar({ prim: \"mutez\" }), ...stack.slice(2)];\n                    }\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`);\n                }\n\n            case \"MUL\":\n                {\n                    const s = args(0,\n                        [\"nat\", \"int\", \"mutez\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\"],\n                        [\"nat\", \"int\", \"mutez\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\"]\n                    );\n                    if (s[0].prim === \"nat\" && s[1].prim === \"int\" || s[0].prim === \"int\" && s[1].prim === \"nat\") {\n                        return [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                    } else if (s[0].prim === \"nat\" && s[1].prim === \"mutez\" || s[0].prim === \"mutez\" && s[1].prim === \"nat\") {\n                        return [annotateVar({ prim: \"mutez\" }), ...stack.slice(2)];\n                    } else if ((s[0].prim === \"bls12_381_g1\" || s[0].prim === \"bls12_381_g2\" || s[0].prim === \"bls12_381_fr\") && s[1].prim === \"bls12_381_fr\" ||\n                        (s[0].prim === \"nat\" || s[0].prim === \"int\") && s[0].prim === s[1].prim) {\n                        return [annotateVar(s[0]), ...stack.slice(2)];\n                    } else if ((s[0].prim === \"nat\" || s[0].prim === \"int\") && s[1].prim === \"bls12_381_fr\" ||\n                        (s[1].prim === \"nat\" || s[1].prim === \"int\") && s[0].prim === \"bls12_381_fr\") {\n                        return [annotateVar({ prim: \"bls12_381_fr\" }), ...stack.slice(2)];\n                    }\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`);\n                }\n\n            case \"EDIV\":\n                {\n                    const res = (a: \"nat\" | \"int\" | \"mutez\", b: \"nat\" | \"int\" | \"mutez\"): MichelsonTypeOption<MichelsonType> => ({ prim: \"option\", args: [{ prim: \"pair\", args: [{ prim: a }, { prim: b }] }] });\n                    const s = args(0, [\"nat\", \"int\", \"mutez\"], [\"nat\", \"int\", \"mutez\"]);\n                    if (s[0].prim === \"nat\" && s[1].prim === \"nat\") {\n                        return [annotateVar(res(\"nat\", \"nat\")), ...stack.slice(2)];\n                    } else if ((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) {\n                        return [annotateVar(res(\"int\", \"nat\")), ...stack.slice(2)];\n                    } else if (s[0].prim === \"mutez\" && s[1].prim === \"nat\") {\n                        return [annotateVar(res(\"mutez\", \"mutez\")), ...stack.slice(2)];\n                    } else if (s[0].prim === \"mutez\" && s[1].prim === \"mutez\") {\n                        return [annotateVar(res(\"nat\", \"mutez\")), ...stack.slice(2)];\n                    }\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`);\n                }\n\n            case \"ABS\":\n                args(0, [\"int\"]);\n                return [annotateVar({ prim: \"nat\" }), ...stack.slice(1)];\n\n            case \"ISNAT\":\n                args(0, [\"int\"]);\n                return [annotateVar({ prim: \"option\", args: [{ prim: \"nat\" }] }), ...stack.slice(1)];\n\n            case \"INT\":\n                args(0, [\"nat\", \"bls12_381_fr\"]);\n                return [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n\n            case \"NEG\":\n                {\n                    const s = args(0, [\"nat\", \"int\", \"bls12_381_g1\", \"bls12_381_g2\", \"bls12_381_fr\"])[0];\n                    if (s.prim === \"nat\" || s.prim === \"int\") {\n                        return [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n                    }\n                    return [annotateVar(s), ...stack.slice(1)];\n                }\n\n            case \"LSL\":\n            case \"LSR\":\n                args(0, [\"nat\"], [\"nat\"]);\n                return [annotateVar({ prim: \"nat\" }), ...stack.slice(2)];\n\n            case \"OR\":\n            case \"XOR\":\n                {\n                    const s = args(0, [\"nat\", \"bool\"], [\"nat\", \"bool\"]);\n                    if (s[0].prim !== s[1].prim) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                    }\n                    return [annotateVar(s[1]), ...stack.slice(2)];\n                }\n\n            case \"AND\":\n                {\n                    const s = args(0, [\"nat\", \"bool\", \"int\"], [\"nat\", \"bool\"]);\n                    if ((s[0].prim !== \"int\" || s[1].prim !== \"nat\") && s[0].prim !== s[1].prim) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                    }\n                    return [annotateVar(s[1]), ...stack.slice(2)];\n                }\n\n            case \"NOT\":\n                {\n                    const s = args(0, [\"nat\", \"bool\", \"int\"])[0];\n                    if (s.prim === \"bool\") {\n                        return [annotateVar({ prim: \"bool\" }), ...stack.slice(1)];\n                    }\n                    return [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n                }\n\n            case \"COMPARE\":\n                {\n                    const s = args(0, null, null);\n                    ensureComparableType(s[0]);\n                    ensureComparableType(s[1]);\n                    return [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                }\n\n            case \"EQ\":\n            case \"NEQ\":\n            case \"LT\":\n            case \"GT\":\n            case \"LE\":\n            case \"GE\":\n                args(0, [\"int\"]);\n                return [annotateVar({ prim: \"bool\" }), ...stack.slice(1)];\n\n            case \"SELF\":\n                {\n                    if (ctx?.contract === undefined) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract required`);\n                    }\n                    const ia = instructionAnn({ f: 1, v: 1 });\n                    const ep = contractEntryPoint(ctx.contract, ia.f?.[0]);\n                    if (ep === null) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n                    }\n                    return [annotate({ prim: \"contract\", args: [ep] }, { v: ia.v ? ia.v : [\"@self\"] }), ...stack];\n                }\n\n            case \"TRANSFER_TOKENS\":\n                {\n                    const s = args(0, null, [\"mutez\"], [\"contract\"]);\n                    ensureTypesEqual(s[0], s[2].args[0]);\n                    return [annotateVar({ prim: \"operation\" }), ...stack.slice(3)];\n                }\n\n            case \"SET_DELEGATE\":\n                {\n                    const s = args(0, [\"option\"])[0];\n                    if (typeID(s.args[0]) !== \"key_hash\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`);\n                    }\n                    return [annotateVar({ prim: \"operation\" }), ...stack.slice(1)];\n                }\n\n            case \"IMPLICIT_ACCOUNT\":\n                args(0, [\"key_hash\"]);\n                return [annotateVar({ prim: \"contract\", args: [{ prim: \"unit\" }] }), ...stack.slice(1)];\n\n            case \"NOW\":\n                return [annotateVar({ prim: \"timestamp\" }, \"@now\"), ...stack];\n\n            case \"AMOUNT\":\n                return [annotateVar({ prim: \"mutez\" }, \"@amount\"), ...stack];\n\n            case \"BALANCE\":\n                return [annotateVar({ prim: \"mutez\" }, \"@balance\"), ...stack];\n\n            case \"CHECK_SIGNATURE\":\n                args(0, [\"key\"], [\"signature\"], [\"bytes\"]);\n                return [annotateVar({ prim: \"bool\" }), ...stack.slice(3)];\n\n            case \"BLAKE2B\":\n            case \"SHA256\":\n            case \"SHA512\":\n            case \"KECCAK\":\n            case \"SHA3\":\n                args(0, [\"bytes\"]);\n                return [annotateVar({ prim: \"bytes\" }), ...stack.slice(1)];\n\n            case \"HASH_KEY\":\n                args(0, [\"key\"]);\n                return [annotateVar({ prim: \"key_hash\" }), ...stack.slice(1)];\n\n            case \"SOURCE\":\n                return [annotateVar({ prim: \"address\" }, \"@source\"), ...stack];\n\n            case \"SENDER\":\n                return [annotateVar({ prim: \"address\" }, \"@sender\"), ...stack];\n\n            case \"ADDRESS\":\n                {\n                    const s = args(0, [\"contract\"])[0];\n                    const ia = instructionAnn({ v: 1 });\n                    return [\n                        annotate({ prim: \"address\", [refContract]: s }, { v: ia.v ? ia.v : varSuffix(argAnn(s), \"address\") }),\n                        ...stack.slice(1)];\n                }\n\n            case \"SELF_ADDRESS\":\n                {\n                    const addr: MichelsonTypeAddress = { prim: \"address\" };\n                    if (ctx?.contract !== undefined) {\n                        addr[refContract] = { prim: \"contract\", args: [contractSection(ctx.contract, \"parameter\").args[0]] };\n                    }\n                    return [annotateVar(addr, \"@address\"), ...stack];\n                }\n\n            case \"CHAIN_ID\":\n                return [annotateVar({ prim: \"chain_id\" }), ...stack];\n\n            case \"DROP\":\n                {\n                    instructionAnn({});\n                    const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n                    args(n - 1, null);\n                    return stack.slice(n);\n                }\n\n            case \"DIG\":\n                {\n                    instructionAnn({});\n                    const n = parseInt(instruction.args[0].int, 10);\n                    return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n                }\n\n            case \"DUG\":\n                {\n                    instructionAnn({});\n                    const n = parseInt(instruction.args[0].int, 10);\n                    return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n                }\n\n            case \"NONE\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [annotate({ prim: \"option\", args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })), ...stack];\n\n            case \"LEFT\":\n            case \"RIGHT\":\n                {\n                    const s = args(0, null)[0];\n                    const ia = instructionAnn({ f: 2, t: 1, v: 1 }, { specialFields: true });\n                    const va = argAnn(s);\n\n                    const children: [MichelsonType, MichelsonType] = [\n                        annotate(s, {\n                            t: null,\n                            v: null,\n                            f: ia.f && ia.f.length > 0 && ia.f[0] !== \"%\" ?\n                                ia.f[0] === \"%@\" ?\n                                    va.v ? [\"%\" + va.v[0].slice(1)] : undefined :\n                                    ia.f :\n                                undefined,\n                        }),\n                        annotate(instruction.args[0], {\n                            t: null,\n                            f: ia.f && ia.f.length > 1 && ia.f[1] !== \"%\" ? ia.f : undefined,\n                        }),\n                    ];\n\n                    return [annotate({\n                        prim: \"or\", args: instruction.prim === \"LEFT\" ? children : [children[1], children[0]]\n                    }, { t: ia.t, v: ia.v }), ...stack.slice(1)];\n                }\n\n            case \"NIL\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [annotate({ prim: \"list\", args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })), ...stack];\n\n            case \"UNPACK\":\n                args(0, [\"bytes\"]);\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [annotateVar({ prim: \"option\", args: [instruction.args[0]] }, \"@unpacked\"), ...stack.slice(1)];\n\n            case \"CONTRACT\":\n                {\n                    const s = args(0, [\"address\"])[0];\n                    assertTypeAnnotationsValid(instruction.args[0]);\n                    const ia = instructionAnn({ v: 1, f: 1 });\n                    const contract = s[refContract];\n                    if (contract !== undefined) {\n                        const ep = contractEntryPoint(contract, ia.f?.[0]);\n                        if (ep === null) {\n                            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n                        }\n                        ensureTypesEqual(ep, instruction.args[0]);\n                    }\n                    return [\n                        annotate({ prim: \"option\", args: [{ prim: \"contract\", args: [instruction.args[0]] }] }, { v: ia.v ? ia.v : varSuffix(argAnn(s), \"contract\") }),\n                        ...stack.slice(1)];\n                }\n\n            case \"CAST\":\n                instructionAnn({});\n                const s = args(0, null)[0];\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureTypesEqual(instruction.args[0], s);\n                return [instruction.args[0], ...stack.slice(1)];\n\n            case \"IF_NONE\":\n                {\n                    instructionAnn({});\n                    const s = args(0, [\"option\"])[0];\n                    const tail = stack.slice(1);\n                    const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                    const br1 = functionTypeInternal(instruction.args[1], [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), \"some\") }), ...tail], ctx);\n                    return branchType(br0, br1);\n                }\n\n            case \"IF_LEFT\":\n                {\n                    instructionAnn({});\n                    const s = args(0, [\"or\"])[0];\n                    const va = argAnn(s);\n                    const lefta = argAnn(s.args[0]);\n                    const righta = argAnn(s.args[1]);\n                    const tail = stack.slice(1);\n                    const br0 = functionTypeInternal(instruction.args[0],\n                        [\n                            annotate(s.args[0], { t: null, v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : \"left\") }),\n                            ...tail\n                        ],\n                        ctx);\n                    const br1 = functionTypeInternal(instruction.args[1],\n                        [\n                            annotate(s.args[1], { t: null, v: varSuffix(va, righta.f ? righta.f[0].slice(1) : \"right\") }),\n                            ...tail\n                        ],\n                        ctx);\n                    return branchType(br0, br1);\n                }\n\n            case \"IF_CONS\":\n                {\n                    instructionAnn({});\n                    const s = args(0, [\"list\"])[0];\n                    const va = argAnn(s);\n                    const tail = stack.slice(1);\n                    const br0 = functionTypeInternal(instruction.args[0],\n                        [\n                            annotate(s.args[0], { t: null, v: varSuffix(va, \"hd\") }),\n                            annotate(s, { t: null, v: varSuffix(va, \"tl\") }),\n                            ...tail\n                        ],\n                        ctx);\n                    const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                    return branchType(br0, br1);\n                }\n\n            case \"IF\":\n                {\n                    instructionAnn({});\n                    args(0, [\"bool\"]);\n                    const tail = stack.slice(1);\n                    const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                    const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                    return branchType(br0, br1);\n                }\n\n            case \"MAP\":\n                {\n                    const s = args(0, [\"list\", \"map\"])[0];\n                    const tail = stack.slice(1);\n                    const elt = s.prim === \"map\" ? { prim: \"pair\" as const, args: s.args } : s.args[0];\n                    const body = functionTypeInternal(instruction.args[0],\n                        [annotate(elt, { t: null, v: varSuffix(argAnn(s), \"elt\") }), ...tail],\n                        ctx);\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    if (body.length < 1) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                    }\n                    ensureStacksEqual(body.slice(1), tail);\n                    if (s.prim === \"list\") {\n                        return [annotateVar({ prim: \"list\", args: [body[0]] }), ...tail];\n                    }\n                    return [annotateVar({ prim: \"map\", args: [s.args[0], body[0]] }), ...tail];\n                }\n\n            case \"ITER\":\n                {\n                    instructionAnn({});\n                    const s = args(0, [\"set\", \"list\", \"map\"])[0];\n                    const tail = stack.slice(1);\n                    const elt = s.prim === \"map\" ? { prim: \"pair\" as const, args: s.args } : s.args[0];\n                    const body = functionTypeInternal(instruction.args[0],\n                        [annotate(elt, { t: null, v: varSuffix(argAnn(s), \"elt\") }), ...tail],\n                        ctx);\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    ensureStacksEqual(body, tail);\n                    return tail;\n                }\n\n            case \"LOOP\":\n                {\n                    instructionAnn({});\n                    args(0, [\"bool\"]);\n                    const tail = stack.slice(1);\n                    const body = functionTypeInternal(instruction.args[0], tail, ctx);\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    ensureStacksEqual(body, [{ prim: \"bool\" }, ...tail]);\n                    return tail;\n                }\n\n            case \"LOOP_LEFT\":\n                {\n                    instructionAnn({});\n                    const s = args(0, [\"or\"])[0];\n                    const tail = stack.slice(1);\n                    const body = functionTypeInternal(instruction.args[0],\n                        [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), \"left\") }), ...tail],\n                        ctx);\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    ensureStacksEqual(body, [s, ...tail]);\n                    return [annotate(s.args[1], { t: null, v: instructionAnn({ v: 1 }).v }), ...tail];\n                }\n\n            case \"DIP\":\n                {\n                    instructionAnn({});\n                    const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n                    args(n - 1, null);\n                    const head = stack.slice(0, n);\n                    const tail = stack.slice(n);\n                    // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n                    const body = instruction.args.length === 2 ?\n                        functionTypeInternal(instruction.args[1], tail, ctx) :\n                        functionTypeInternal(instruction.args[0], tail, ctx);\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    return [...head, ...body];\n                }\n\n            case \"CREATE_CONTRACT\":\n                {\n                    const ia = instructionAnn({ v: 2 });\n                    const s = args(0, [\"option\"], [\"mutez\"], null);\n                    if (typeID(s[0].args[0]) !== \"key_hash\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`);\n                    }\n                    if (ensureStorableType(s[2])) {\n                        assertContractValid(instruction.args[0]);\n                        assertScalarTypesEqual(contractSection(instruction.args[0], \"storage\").args[0], s[2]);\n                    }\n\n                    const va = ia.v?.map(v => v !== \"@\" ? [v] : undefined);\n                    return [\n                        annotate({ prim: \"operation\" }, { v: va?.[0] }),\n                        annotate({\n                            prim: \"address\",\n                            [refContract]: { prim: \"contract\", args: [contractSection(instruction.args[0], \"parameter\").args[0]] },\n                        }, { v: va?.[1] }),\n                        ...stack.slice(3)\n                    ];\n                }\n\n            case \"PUSH\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                assertDataValidInternal(instruction.args[1], instruction.args[0], { ...ctx, contract: undefined });\n                return [annotateVar(instruction.args[0]), ...stack];\n\n            case \"EMPTY_SET\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                return [annotate({ prim: \"set\", args: instruction.args }, instructionAnn({ t: 1, v: 1 })), ...stack];\n\n            case \"EMPTY_MAP\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                return [annotate({ prim: \"map\", args: instruction.args }, instructionAnn({ t: 1, v: 1 })), ...stack];\n\n            case \"EMPTY_BIG_MAP\":\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                ensureBigMapStorableType(instruction.args[0]);\n                return [annotate({ prim: \"big_map\", args: instruction.args }, instructionAnn({ t: 1, v: 1 })), ...stack];\n\n            case \"LAMBDA\":\n                {\n                    assertTypeAnnotationsValid(instruction.args[0]);\n                    assertTypeAnnotationsValid(instruction.args[1]);\n                    const body = functionTypeInternal(instruction.args[2], [instruction.args[0]], { ...ctx, contract: undefined });\n                    if (\"failed\" in body) {\n                        return body;\n                    }\n                    if (body.length !== 1) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                    }\n                    ensureTypesEqual(instruction.args[1], body[0]);\n                    return [annotateVar({ prim: \"lambda\", args: [instruction.args[0], instruction.args[1]] }), ...stack];\n                }\n\n            case \"LEVEL\":\n                return [annotateVar({ prim: \"nat\" }, \"@level\"), ...stack];\n\n            case \"TOTAL_VOTING_POWER\":\n                return [annotateVar({ prim: \"nat\" }), ...stack];\n\n            case \"VOTING_POWER\":\n                args(0, [\"key_hash\"]);\n                return [annotateVar({ prim: \"nat\" }), ...stack.slice(1)];\n\n            case \"TICKET\":\n                {\n                    const s = args(0, null, [\"nat\"])[0];\n                    ensureComparableType(s);\n                    return [annotate({ prim: \"ticket\", args: [s] }, instructionAnn({ t: 1, v: 1 })), ...stack.slice(2)];\n                }\n\n            case \"JOIN_TICKETS\":\n                {\n                    const s = unpackComb(\"pair\", args(0, [\"pair\"])[0]);\n                    if (typeID(s.args[0]) !== \"ticket\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`);\n                    }\n                    ensureTypesEqual(s.args[0], s.args[1]);\n                    return [annotateVar({\n                        prim: \"option\",\n                        args: [annotate(s.args[0], { t: null })],\n                    }), ...stack.slice(1)];\n                }\n\n            case \"SPLIT_TICKET\":\n                {\n                    const s = args(0, [\"ticket\"], [\"pair\"]);\n                    const p = unpackComb(\"pair\", s[1]);\n                    if (typeID(p.args[0]) !== \"nat\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: nat expected: ${typeID(p.args[0])}`);\n                    }\n                    ensureTypesEqual(p.args[0], p.args[1]);\n                    return [annotateVar({\n                        prim: \"option\",\n                        args: [{\n                            prim: \"pair\",\n                            args: [\n                                annotate(s[0], { t: null }),\n                                annotate(s[0], { t: null }),\n                            ],\n                        }],\n                    }), ...stack.slice(2)];\n                }\n\n            case \"READ_TICKET\":\n                {\n                    const ia = instructionAnn({ v: 2 });\n                    const s = args(0, [\"ticket\"])[0];\n                    const va = ia.v?.map(v => v !== \"@\" ? [v] : undefined);\n                    return [\n                        annotate({\n                            prim: \"pair\",\n                            args: [\n                                { prim: \"address\" },\n                                annotate(s.args[0], { t: null }),\n                                { prim: \"nat\" },\n                            ]\n                        }, { v: va?.[0] }),\n                        annotate(s, { v: va?.[1], t: null }),\n                        ...stack.slice(1),\n                    ];\n                }\n\n            case \"PAIRING_CHECK\":\n                {\n                    const p = args(0, [\"list\"])[0].args[0];\n                    if (!isPairType(p)) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: pair expected: ${typeID(p)}`);\n                    }\n                    const c = unpackComb(\"pair\", p);\n                    if (typeID(c.args[0]) !== \"bls12_381_g1\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`);\n                    }\n                    if (typeID(c.args[1]) !== \"bls12_381_g2\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`);\n                    }\n                    return [annotateVar({ prim: \"bool\" }), ...stack.slice(1)];\n                }\n\n            case \"SAPLING_EMPTY_STATE\":\n                return [annotate({ prim: \"sapling_state\", args: [instruction.args[0]] }, instructionAnn({ v: 1, t: 1 })), ...stack];\n\n            case \"SAPLING_VERIFY_UPDATE\":\n                {\n                    const s = args(0, [\"sapling_transaction\"], [\"sapling_state\"]);\n                    if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`);\n                    }\n                    return [annotateVar({\n                        prim: \"option\",\n                        args: [{\n                            prim: \"pair\",\n                            args: [\n                                { prim: \"int\" },\n                                annotate(s[1], { t: null }),\n                            ],\n                        }],\n                    }), ...stack.slice(2)];\n                }\n\n            default:\n                throw new MichelsonError((instruction as MichelsonCode), `unexpected instruction: ${(instruction as Prim).prim}`);\n        }\n    })(instruction);\n\n    if (ctx?.traceCallback !== undefined) {\n        const trace: InstructionTrace = {\n            op: instruction,\n            in: stack,\n            out: retStack,\n        };\n        ctx.traceCallback(trace);\n    }\n\n    return retStack;\n}\n\nexport function contractSection<T extends \"parameter\" | \"storage\" | \"code\">(contract: MichelsonContract, section: T): MichelsonContractSection<T> {\n    for (const s of contract) {\n        if (s.prim === section) {\n            return s as MichelsonContractSection<T>;\n        }\n    }\n    throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nfunction isContract(v: Expr): v is MichelsonContract {\n    if (Array.isArray(v)) {\n        for (const s of v) {\n            if (\"prim\" in s && (s.prim === \"parameter\" || s.prim === \"storage\" || s.prim === \"code\")) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nexport function contractEntryPoint(src: MichelsonContract | MichelsonType, ep?: string): MichelsonType | null {\n    ep = ep || \"%default\";\n    const entryPoint = contractEntryPoints(src).find(x => x[0] === ep);\n\n    if (entryPoint !== undefined) {\n        return entryPoint[1];\n    } else if (ep === \"%default\") {\n        return isContract(src) ? contractSection(src, \"parameter\").args[0] : src;\n    }\n    return null;\n}\n\nfunction isOrType(t: MichelsonType): t is MichelsonTypeOr<[MichelsonType, MichelsonType]> {\n    return Array.isArray(t) || t.prim === \"or\";\n}\n\nexport function contractEntryPoints(src: MichelsonContract | MichelsonType): [string, MichelsonType][] {\n    if (isContract(src)) {\n        const param = contractSection(src, \"parameter\");\n        const ch = contractEntryPoints(param.args[0]);\n        const a = unpackAnnotations(param);\n        return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n    }\n\n    if (isOrType(src)) {\n        const args = typeArgs(src);\n        const getArg = (n: 0 | 1): [string, MichelsonType][] => {\n            const a = unpackAnnotations(args[n]);\n            if (typeID(args[n]) === \"or\") {\n                const ch = contractEntryPoints(args[n]);\n                return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n            }\n            return a.f ? [[a.f[0], args[n]]] : [];\n        };\n        return [...getArg(0), ...getArg(1)];\n    }\n    return [];\n}\n\n// Contract validation\n\nexport function assertContractValid(contract: MichelsonContract, ctx?: Context): MichelsonReturnType {\n    const parameter = contractSection(contract, \"parameter\").args[0];\n    assertTypeAnnotationsValid(parameter, true);\n\n    const storage = contractSection(contract, \"storage\").args[0];\n    assertTypeAnnotationsValid(storage);\n\n    const arg: MichelsonType = {\n        \"prim\": \"pair\",\n        args: [\n            { ...parameter, ...{ annots: [\"@parameter\"] } },\n            { ...storage, ...{ annots: [\"@storage\"] } },\n        ]\n    };\n\n    const code = contractSection(contract, \"code\").args[0];\n    const ret = functionTypeInternal(code, [arg], { ...ctx, ...{ contract } });\n\n    if (\"failed\" in ret) {\n        return ret;\n    }\n\n    const expected: MichelsonType = {\n        \"prim\": \"pair\",\n        args: [\n            { \"prim\": \"list\", args: [{ \"prim\": \"operation\" }] },\n            storage,\n        ]\n    };\n\n    try {\n        assertStacksEqual(ret, [expected]);\n    } catch (err) {\n        if (err instanceof MichelsonError) {\n            throw new MichelsonInstructionError(code, ret, err.message);\n        } else {\n            throw err;\n        }\n    }\n\n    return ret;\n}\n\n// Exported wrapper functions\n\nexport function assertDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): void {\n    assertTypeAnnotationsValid(t);\n    assertDataValidInternal(d, t, ctx || null);\n}\n\nexport function functionType(inst: MichelsonCode, stack: MichelsonType[], ctx?: Context): MichelsonReturnType {\n    for (const t of stack) {\n        assertTypeAnnotationsValid(t);\n    }\n\n    if (ctx?.contract !== undefined) {\n        for (const typesec of [\"parameter\", \"storage\"] as const) {\n            const sec = contractSection(ctx.contract, typesec).args[0];\n            assertTypeAnnotationsValid(sec);\n        }\n    }\n\n    return functionTypeInternal(inst, stack, ctx || null);\n}\n\nexport function assertTypesEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(a: T1, b: T2, field: boolean = false): void {\n    if (Array.isArray(a)) {\n        // type guards don't work for parametrized generic types\n        for (const v of a as MichelsonType[]) {\n            assertTypeAnnotationsValid(v);\n        }\n        for (const v of b as MichelsonType[]) {\n            assertTypeAnnotationsValid(v);\n        }\n    } else {\n        assertTypeAnnotationsValid(a as MichelsonType);\n        assertTypeAnnotationsValid(b as MichelsonType);\n    }\n    assertScalarTypesEqual(a, b, field);\n}\n\nexport function isTypeAnnotationsValid(t: MichelsonType, field: boolean = false): boolean {\n    try {\n        assertTypeAnnotationsValid(t, field);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function isContractValid(contract: MichelsonContract, ctx?: Context): MichelsonReturnType | null {\n    try {\n        return assertContractValid(contract, ctx);\n    } catch {\n        return null;\n    }\n}\n\nexport function isDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): boolean {\n    try {\n        assertDataValid(d, t, ctx);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function isTypeEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(a: T1, b: T2, field: boolean = false): boolean {\n    try {\n        assertTypesEqual(a, b, field);\n        return true;\n    } catch {\n        return false;\n    }\n}","import {\n    MichelsonContract, MichelsonContractSection, MichelsonType,\n    MichelsonData, MichelsonCode, MichelsonReturnType\n} from \"./michelson-types\";\nimport {\n    assertContractValid, contractSection,\n    contractEntryPoint, assertDataValid,\n    assertTypeAnnotationsValid,\n    InstructionTrace, Context, functionType,\n    isDataValid, contractEntryPoints\n} from \"./michelson-typecheck\";\nimport { Parser, ParserOptions } from \"./micheline-parser\";\nimport { assertMichelsonContract, assertMichelsonType, assertMichelsonData } from \"./michelson-validator\";\n\nexport interface ContractOptions extends ParserOptions {\n    traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class Contract {\n    private ctx: Context;\n    public readonly output: MichelsonReturnType;\n\n    constructor(public readonly contract: MichelsonContract, opt?: ContractOptions) {\n        this.ctx = { contract, ...opt };\n        this.output = assertContractValid(contract, this.ctx);\n    }\n\n    static parse(src: string | object, opt?: ContractOptions): Contract {\n        const p = new Parser(opt);\n        const expr = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty contract\");\n        }\n        if (assertMichelsonContract(expr)) {\n            return new Contract(expr, opt);\n        }\n        throw undefined;\n    }\n\n    static parseTypeExpression(src: string | object, opt?: ParserOptions): MichelsonType {\n        const p = new Parser(opt);\n        const expr = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty type expression\");\n        }\n        if (assertMichelsonType(expr) && assertTypeAnnotationsValid(expr)) {\n            return expr;\n        }\n        throw undefined;\n    }\n\n    static parseDataExpression(src: string | object, opt?: ParserOptions): MichelsonData {\n        const p = new Parser(opt);\n        const expr: any = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty data expression\");\n        }\n        if (assertMichelsonData(expr)) {\n            return expr;\n        }\n        throw undefined;\n    }\n\n    section<T extends \"parameter\" | \"storage\" | \"code\">(section: T): MichelsonContractSection<T> {\n        return contractSection(this.contract, section);\n    }\n\n    entryPoints(): [string, MichelsonType][] {\n        return contractEntryPoints(this.contract);\n    }\n\n    entryPoint(ep?: string): MichelsonType | null {\n        return contractEntryPoint(this.contract, ep);\n    }\n\n    assertDataValid(d: MichelsonData, t: MichelsonType): void {\n        assertDataValid(d, t, this.ctx);\n    }\n\n    isDataValid(d: MichelsonData, t: MichelsonType): boolean {\n        return isDataValid(d, t, this.ctx);\n    }\n\n    assertParameterValid(ep: string | null, d: MichelsonData): void {\n        const t = this.entryPoint(ep || undefined);\n        if (t === null) {\n            throw new Error(`contract has no entrypoint named ${ep}`);\n        }\n        this.assertDataValid(d, t);\n    }\n\n    isParameterValid(ep: string | null, d: MichelsonData): boolean {\n        try {\n            this.assertParameterValid(ep, d);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    functionType(inst: MichelsonCode, stack: MichelsonType[]): MichelsonReturnType {\n        return functionType(inst, stack, this.ctx);\n    }\n}\n\nexport const dummyContract = new Contract([\n    { prim: \"parameter\", args: [{ prim: \"unit\" }] },\n    { prim: \"storage\", args: [{ prim: \"unit\" }] },\n    {\n        prim: \"code\", args: [\n            [\n                { prim: \"CAR\" },\n                { prim: \"NIL\", args: [{ prim: \"operation\" }] },\n                { prim: \"PAIR\" },\n            ]\n        ]\n    },\n]);","import { sourceReference, Expr } from \"./micheline\";\nimport { InstructionTrace, MichelsonInstructionError } from \"./michelson-typecheck\";\nimport { emitMicheline } from \"./micheline-emitter\";\nimport { unpackAnnotations, MichelsonError, MichelsonTypeError } from \"./utils\";\nimport { MichelsonReturnType } from \"./michelson-types\";\n\nexport function formatStack(s: MichelsonReturnType): string {\n    if (\"failed\" in s) {\n        return `[FAILED: ${emitMicheline(s.failed)}]`;\n    }\n\n    return s.map((v, i) => {\n        const ann = unpackAnnotations(v);\n        return `[${i}${ann.v ? \"/\" + ann.v[0] : \"\"}]: ${emitMicheline(v)}`;\n    }).join(\"\\n\");\n}\n\nexport function traceDumpFunc(blocks: boolean, cb: (s: string) => void): (v: InstructionTrace) => void {\n    return (v: InstructionTrace) => {\n        if (Array.isArray(v) && !blocks) {\n            return;\n        }\n        const macro = v.op[sourceReference]?.macro;\n\n        const msg = `${macro ? \"Macro\" : \"Op\"}: ${macro ? emitMicheline(macro, undefined, true) + \" / \" : \"\"}${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n        cb(msg);\n    };\n}\n\nexport function formatError(err: MichelsonError): string {\n    if (err instanceof MichelsonInstructionError) {\n        const macro = err.val[sourceReference]?.macro;\n        return `${macro ? \"Macro\" : \"Op\"}: ${macro ? emitMicheline(macro, undefined, true) + \" / \" : \"\"}${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n    } else if (err instanceof MichelsonTypeError) {\n        const type = Array.isArray(err.val) ?\n            \"[\" + (err.val as Expr[]).map((v, i) => `[${i}]: ${emitMicheline(v)}`).join(\"; \") + \"]\" :\n            emitMicheline(err.val);\n\n        return `Type: ${type}\n${err.data ? `Data: ${emitMicheline(err.data)}\n` : \"\"}\n`;\n    } else {\n        return `Value: ${emitMicheline(err.val)}`;\n    }\n}","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n"],"names":["Protocol","assertArgs"],"mappings":"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AAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC;QAC9H,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE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"}