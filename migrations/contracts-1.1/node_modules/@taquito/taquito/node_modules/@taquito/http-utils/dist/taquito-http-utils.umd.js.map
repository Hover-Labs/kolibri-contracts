{"version":3,"file":"taquito-http-utils.umd.js","sources":["../src/status_code.ts","../src/version.ts","../src/taquito-http-utils.ts"],"sourcesContent":["/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n */\nexport enum STATUS_CODE {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  I_AM_A_TEAPOT = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/http-utils\n */\n\nimport { STATUS_CODE } from './status_code';\n\n// tslint:disable: strict-type-predicates\nconst isNode =\n  typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n// tslint:enable: strict-type-predicates\n\nconst XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;\n\nexport * from './status_code';\nexport { VERSION } from './version';\n\nconst defaultTimeout = 30000;\n\nexport interface HttpRequestOptions {\n  url: string;\n  method?: 'GET' | 'POST';\n  timeout?: number;\n  json?: boolean;\n  query?: { [key: string]: any };\n  headers?: { [key: string]: string };\n  mimeType?: string;\n}\n\nexport class HttpResponseError implements Error {\n  public name = 'HttpResponse';\n\n  constructor(\n    public message: string,\n    public status: STATUS_CODE,\n    public statusText: string,\n    public body: string,\n    public url: string\n  ) {}\n}\n\nexport class HttpRequestFailed implements Error {\n  public name = 'HttpRequestFailed';\n  public message: string;\n\n  constructor(public url: string, public innerEvent: any) {\n    this.message = `Request to ${url} failed`;\n  }\n}\n\nexport class HttpBackend {\n  protected serialize(obj?: { [key: string]: any }) {\n    if (!obj) {\n      return '';\n    }\n\n    const str = [];\n    for (const p in obj) {\n      if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n        const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\n        // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          continue;\n        }\n        // another use case is multiple arguments with the same name\n        // they are passed as array\n        if (Array.isArray(prop)) {\n          prop.forEach((item) => {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          continue;\n        }\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    }\n    const serialized = str.join('&');\n    if (serialized) {\n      return `?${serialized}`;\n    } else {\n      return '';\n    }\n  }\n\n  protected createXHR(): XMLHttpRequest {\n    return new XMLHttpRequestCTOR();\n  }\n\n  /**\n   *\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\n   */\n  createRequest<T>(\n    {\n      url,\n      method,\n      timeout,\n      query,\n      headers = {},\n      json = true,\n      mimeType = undefined,\n    }: HttpRequestOptions,\n    data?: {}\n  ) {\n    return new Promise<T>((resolve, reject) => {\n      const request = this.createXHR();\n      request.open(method || 'GET', `${url}${this.serialize(query)}`);\n      if (!headers['Content-Type']) {\n        request.setRequestHeader('Content-Type', 'application/json');\n      }\n      if (mimeType) {\n        request.overrideMimeType(`${mimeType}`);\n      }\n      for (const k in headers) {\n        request.setRequestHeader(k, headers[k]);\n      }\n      request.timeout = timeout || defaultTimeout;\n      request.onload = function () {\n        if (this.status >= 200 && this.status < 300) {\n          if (json) {\n            try {\n              resolve(JSON.parse(request.response));\n            } catch (ex) {\n              reject(new Error(`Unable to parse response: ${request.response}`));\n            }\n          } else {\n            resolve(request.response);\n          }\n        } else {\n          reject(\n            new HttpResponseError(\n              `Http error response: (${this.status}) ${request.response}`,\n              this.status as STATUS_CODE,\n              request.statusText,\n              request.response,\n              url\n            )\n          );\n        }\n      };\n\n      request.ontimeout = function () {\n        reject(new Error(`Request timed out after: ${request.timeout}ms`));\n      };\n\n      request.onerror = function (err) {\n        reject(new HttpRequestFailed(url, err));\n      };\n\n      if (data) {\n        const dataStr = JSON.stringify(data);\n        request.send(dataStr);\n      } else {\n        request.send();\n      }\n    });\n  }\n}\n"],"names":["STATUS_CODE"],"mappings":"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"}