{"version":3,"file":"taquito.es5.js","sources":["../src/forger/rpc-forger.ts","../src/injector/rpc-injector.ts","../src/signer/noop.ts","../src/operations/types.ts","../src/operations/operation-errors.ts","../src/wallet/receipt.ts","../src/wallet/operation.ts","../src/wallet/delegation-operation.ts","../src/wallet/origination-operation.ts","../src/wallet/transaction-operation.ts","../src/wallet/operation-factory.ts","../src/constants.ts","../src/operations/operation-emitter.ts","../src/operations/operations.ts","../src/tz/rpc-tz-provider.ts","../src/contract/estimate.ts","../src/format.ts","../src/contract/errors.ts","../src/contract/prepare.ts","../src/contract/rpc-estimate-provider.ts","../src/operations/batch-operation.ts","../src/batch/rpc-batch-provider.ts","../src/operations/delegate-operation.ts","../src/operations/origination-operation.ts","../src/operations/reveal-operation.ts","../src/operations/transaction-operation.ts","../src/contract/manager-lambda.ts","../src/contract/view_lambda.ts","../src/contract/compose.ts","../src/wallet/wallet.ts","../src/wallet/legacy.ts","../src/contract/lambda-view.ts","../src/contract/contract.ts","../src/contract/big-map.ts","../src/contract/semantic.ts","../src/contract/rpc-contract-provider.ts","../src/parser/michel-codec-parser.ts","../src/packer/rpc-packer.ts","../src/context.ts","../src/subscribe/filters.ts","../src/subscribe/observable-subscription.ts","../src/subscribe/polling-provider.ts","../src/version.ts","../src/forger/composite-forger.ts","../src/parser/noop-parser.ts","../src/packer/michel-codec-packer.ts","../src/taquito.ts"],"sourcesContent":["import { Forger, ForgeParams, ForgeResponse } from './interface';\nimport { Context } from '../context';\n\nexport class RpcForger implements Forger {\n  constructor(private context: Context) {}\n\n  forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    return this.context.rpc.forgeOperations({ branch, contents });\n  }\n}\n","import { Injector } from './interface';\nimport { Context } from '../context';\n\nexport class RpcInjector implements Injector {\n  constructor(private context: Context) {}\n  inject(signedOperationBytes: string): Promise<string> {\n    return this.context.rpc.injectOperation(signedOperationBytes);\n  }\n}\n","import { Signer } from './interface';\n\nexport class UnconfiguredSignerError implements Error {\n  name = 'UnconfiguredSignerError';\n  message =\n    'No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.';\n}\n\n/**\n * @description Default signer implementation which does nothing and produce invalid signature\n */\nexport class NoopSigner implements Signer {\n  async publicKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async publicKeyHash(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async secretKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async sign(_bytes: string, _watermark?: Uint8Array): Promise<any> {\n    throw new UnconfiguredSignerError();\n  }\n}\n","import {\n  OperationObject,\n  InternalOperationResultKindEnum,\n  OpKind,\n  TransactionOperationParameter,\n} from '@taquito/rpc';\n\nexport { OpKind } from '@taquito/rpc';\n\nexport type withKind<T, K extends OpKind> = T & { kind: K };\n\nexport type ParamsWithKind =\n  | withKind<OriginateParams, OpKind.ORIGINATION>\n  | withKind<DelegateParams, OpKind.DELEGATION>\n  | withKind<TransferParams, OpKind.TRANSACTION>\n  | withKind<ActivationParams, OpKind.ACTIVATION>;\n\nexport type ParamsWithKindExtended =\n  | ParamsWithKind\n  | withKind<RevealParams, OpKind.REVEAL>\n\nexport const attachKind = <T, K extends OpKind>(op: T, kind: K) => {\n  return { ...op, kind } as withKind<T, K>;\n};\n\nexport const findWithKind = <T extends { kind: OpKind }, K extends OpKind>(\n  arr: T[],\n  kind: K\n): (T & { kind: K }) | undefined => {\n  if (Array.isArray(arr)) {\n    const found = arr.find(op => op.kind === kind);\n\n    if (found && isKind(found, kind)) {\n      return found;\n    }\n  }\n};\n\nexport const isKind = <T extends { kind: OpKind }, K extends OpKind>(\n  op: T,\n  kind: K\n): op is withKind<T, K> => {\n  return op.kind === kind;\n};\n\nexport type RPCOpWithFee =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation;\nexport type RPCOpWithSource =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation;\n\nexport const isOpWithFee = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, InternalOperationResultKindEnum> => {\n  return ['transaction', 'delegation', 'origination', 'reveal'].indexOf(op.kind) !== -1;\n};\n\nexport const isOpRequireReveal = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, Exclude<InternalOperationResultKindEnum, OpKind.REVEAL>> => {\n  return ['transaction', 'delegation', 'origination'].indexOf(op.kind) !== -1;\n};\n\nexport type SourceKinds = InternalOperationResultKindEnum;\n\nexport const isSourceOp = <T extends { kind: OpKind }>(op: T): op is withKind<T, SourceKinds> => {\n  return ['transaction', 'delegation', 'origination', 'reveal', 'ballot'].indexOf(op.kind) !== -1;\n};\n\nexport const hasMetadata = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: K;\n} => {\n  return 'metadata' in op;\n};\n\nexport const hasMetadataWithResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    operation_result: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'operation_result' in op.metadata;\n};\n\nexport const hasMetadataWithInternalOperationResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    internal_operation_results?: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'internal_operation_results' in op.metadata;\n};\n\nexport interface GasConsumingOperation {\n  consumedGas?: string;\n  gasLimit: number;\n}\n\nexport interface StorageConsumingOperation {\n  storageDiff?: string;\n  storageSize?: string;\n  storageLimit: number;\n}\n\nexport interface FeeConsumingOperation {\n  fee: number;\n}\n\nexport type OriginateParamsBase = {\n  balance?: string;\n  code: string | object[];\n  delegate?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n};\n\n/**\n * @description Parameters for originate method\n */\nexport type OriginateParams = OriginateParamsBase &\n  (\n    | {\n      init?: never;\n      /** JS representation of a storage object */\n      storage: any;\n    }\n    | {\n      /** Initial storage object value. Either Micheline or JSON encoded */\n      init: string | object;\n      storage?: never;\n    }\n  );\n\nexport interface ActivationParams {\n  pkh: string;\n  secret: string;\n}\n\n/**\n * @description RPC origination operation\n */\nexport interface RPCOriginationOperation {\n  kind: OpKind.ORIGINATION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  balance: string;\n  delegate?: string;\n  source?: string;\n  script: {\n    code: any;\n    storage: any;\n  };\n}\n\n/**\n * @description RPC reveal operation\n */\nexport interface RPCRevealOperation {\n  kind: OpKind.REVEAL;\n  fee: number;\n  public_key: string;\n  source?: string;\n  gas_limit: number;\n  storage_limit: number;\n}\n\nexport interface RevealParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n\n/**\n * @description Result of a forge operation contains the operation plus its encoded version\n */\nexport interface ForgedBytes {\n  opbytes: string;\n  opOb: OperationObject;\n  counter: number;\n}\n\n/**\n * @description Parameters for setDelegate method\n */\nexport interface DelegateParams {\n  source: string;\n  delegate: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description Parameters for registerDelegate method\n */\nexport interface RegisterDelegateParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC delegation operation\n */\nexport interface RPCDelegateOperation {\n  kind: OpKind.DELEGATION;\n  source?: string;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  delegate: string;\n}\n\n/**\n * @description Parameters for transfer method\n */\nexport interface TransferParams {\n  to: string;\n  source?: string;\n  amount: number;\n  fee?: number;\n  parameter?: TransactionOperationParameter;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n}\n\n/**\n * @description RPC transfer operation\n */\nexport interface RPCTransferOperation {\n  kind: OpKind.TRANSACTION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  amount: string;\n  source?: string;\n  destination: string;\n  parameters?: TransactionOperationParameter;\n}\n\n/**\n * @description RPC activate account operation\n */\nexport interface RPCActivateOperation {\n  kind: OpKind.ACTIVATION;\n  pkh: string;\n  secret: string;\n}\n\nexport type RPCOperation =\n  | RPCOriginationOperation\n  | RPCTransferOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCActivateOperation;\n\nexport type PrepareOperationParams = {\n  operation: RPCOperation | RPCOperation[];\n  source?: string;\n};\n","import {\n  MichelsonV1ExpressionBase,\n  OperationResultDelegation,\n  OperationResultOrigination,\n  OperationResultReveal,\n  OperationResultTransaction,\n  PreapplyResponse,\n  TezosGenericOperationError,\n} from '@taquito/rpc';\nimport {\n  hasMetadata,\n  hasMetadataWithInternalOperationResult,\n  hasMetadataWithResult,\n} from './types';\n\nexport interface TezosOperationErrorWithMessage extends TezosGenericOperationError {\n  with: MichelsonV1ExpressionBase;\n}\n\nconst isErrorWithMessage = (error: any): error is TezosOperationErrorWithMessage => {\n  return 'with' in error;\n};\n\nexport class TezosOperationError implements Error {\n  name: string = 'TezosOperationError';\n  id: string;\n  kind: string;\n  message: string;\n\n  constructor(public errors: TezosGenericOperationError[]) {\n    // Last error is 'often' the one with more detail\n    const lastError = errors[errors.length - 1];\n\n    this.id = lastError.id;\n    this.kind = lastError.kind;\n\n    this.message = `(${this.kind}) ${this.id}`;\n\n    if (isErrorWithMessage(lastError) && lastError.with.string) {\n      this.message = lastError.with.string;\n    }\n  }\n}\n\nexport class TezosPreapplyFailureError implements Error {\n  name: string = 'TezosPreapplyFailureError';\n  message: string = 'Preapply returned an unexpected result';\n\n  constructor(public result: any) {}\n}\n\nexport type MergedOperationResult = OperationResultDelegation &\n  OperationResultOrigination &\n  OperationResultTransaction &\n  OperationResultReveal & {\n    fee?: string;\n  };\n\n// Flatten all operation content results and internal operation results into a single array\n// Some cases where we can have multiple operation results or internal operation results are:\n// - When an operation includes a reveal operation\n// - When an operation is made using the batch API\n// - Smart contract call can contains internal operation results when they call other smart contract internally or originate contracts\nexport const flattenOperationResult = (response: PreapplyResponse | PreapplyResponse[]) => {\n  let results = Array.isArray(response) ? response : [response];\n\n  let returnedResults: MergedOperationResult[] = [];\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadataWithResult(content)) {\n        returnedResults.push({\n          fee: content.fee,\n          ...content.metadata.operation_result,\n        });\n\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          content.metadata.internal_operation_results.forEach(x => returnedResults.push(x.result));\n        }\n      }\n    }\n  }\n\n  return returnedResults;\n};\n\n/***\n * @description Flatten all error from preapply response (including internal error)\n */\nexport const flattenErrors = (\n  response: PreapplyResponse | PreapplyResponse[],\n  status = 'failed'\n) => {\n  let results = Array.isArray(response) ? response : [response];\n\n  let errors: TezosGenericOperationError[] = [];\n  // Transaction that do not fail will be backtracked in case one failure occur\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadata(content)) {\n        if (hasMetadataWithResult(content) && content.metadata.operation_result.status === status) {\n          errors = errors.concat(content.metadata.operation_result.errors || []);\n        }\n        if (\n          hasMetadataWithInternalOperationResult(content) &&\n          Array.isArray(content.metadata.internal_operation_results)\n        ) {\n          for (const internalResult of content.metadata.internal_operation_results) {\n            if ('result' in internalResult && internalResult.result.status === status) {\n              errors = errors.concat(internalResult.result.errors || []);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n","import { OperationContentsAndResult } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { flattenOperationResult } from '../operations/operation-errors';\n\nexport interface Receipt {\n  totalFee: BigNumber;\n  totalGas: BigNumber;\n  totalStorage: BigNumber;\n  totalAllocationBurn: BigNumber;\n  totalOriginationBurn: BigNumber;\n  totalPaidStorageDiff: BigNumber;\n  totalStorageBurn: BigNumber;\n}\n\nexport const receiptFromOperation = (\n  op: OperationContentsAndResult[],\n  { ALLOCATION_BURN, ORIGINATION_BURN } = {\n    ALLOCATION_BURN: 257,\n    ORIGINATION_BURN: 257,\n  }\n): Receipt => {\n  const operationResults = flattenOperationResult({ contents: op });\n  let totalGas = new BigNumber(0);\n  let totalStorage = new BigNumber(0);\n  let totalFee = new BigNumber(0);\n  let totalOriginationBurn = new BigNumber(0);\n  let totalAllocationBurn = new BigNumber(0);\n  let totalPaidStorageDiff = new BigNumber(0);\n  operationResults.forEach(result => {\n    totalFee = totalFee.plus(result.fee || 0);\n    totalOriginationBurn = totalOriginationBurn.plus(\n      Array.isArray(result.originated_contracts)\n        ? result.originated_contracts.length * ORIGINATION_BURN\n        : 0\n    );\n    totalAllocationBurn = totalAllocationBurn.plus(\n      'allocated_destination_contract' in result ? ALLOCATION_BURN : 0\n    );\n    totalGas = totalGas.plus(result.consumed_gas || 0);\n    totalPaidStorageDiff = totalPaidStorageDiff.plus(\n      'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0\n    );\n  });\n\n  totalStorage = totalStorage\n    .plus(totalAllocationBurn)\n    .plus(totalOriginationBurn)\n    .plus(totalPaidStorageDiff);\n\n  return {\n    totalFee,\n    totalGas,\n    totalStorage,\n    totalAllocationBurn,\n    totalOriginationBurn,\n    totalPaidStorageDiff,\n    totalStorageBurn: new BigNumber(totalStorage.multipliedBy(1000)),\n  };\n};\n","import { BlockResponse, OperationContentsAndResult, OperationResultStatusEnum } from '@taquito/rpc';\nimport { combineLatest, from, Observable, ReplaySubject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  takeWhile,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { Receipt, receiptFromOperation } from './receipt';\n\nexport type OperationStatus = 'pending' | 'unknown' | OperationResultStatusEnum;\n\nexport class MissedBlockDuringConfirmationError implements Error {\n  name: string = 'MissedBlockDuringConfirmationError';\n  message: string =\n    'Taquito missed a block while waiting for operation confirmation and was not able to find the operation';\n}\n\nconst MAX_BRANCH_ANCESTORS = 60;\n\n/**\n * @description WalletOperation allows to monitor operation inclusion on chains and surface information related to the operation\n */\nexport class WalletOperation {\n  protected _operationResult = new ReplaySubject<OperationContentsAndResult[]>(1);\n  protected _includedInBlock = new ReplaySubject<BlockResponse>(1);\n  protected _included = false;\n\n  private lastHead: BlockResponse | undefined;\n  protected newHead$: Observable<BlockResponse> = this._newHead$.pipe(\n    tap(newHead => {\n      if (\n        !this._included &&\n        this.lastHead &&\n        newHead.header.level - this.lastHead.header.level > 1\n      ) {\n        throw new MissedBlockDuringConfirmationError();\n      }\n\n      this.lastHead = newHead;\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.newHead$.pipe(\n    map(head => {\n      for (const opGroup of head.operations) {\n        for (const op of opGroup) {\n          if (op.hash === this.opHash) {\n            this._included = true;\n            this._includedInBlock.next(head);\n            this._operationResult.next(op.contents as OperationContentsAndResult[]);\n\n            // Return the block where the operation was found\n            return head;\n          }\n        }\n      }\n    }),\n    filter<BlockResponse | undefined, BlockResponse>((x): x is BlockResponse => {\n      return typeof x !== 'undefined';\n    }),\n    first(),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  async operationResults() {\n    return this._operationResult.pipe(first()).toPromise();\n  }\n\n  /**\n   * @description Receipt expose the total amount of tezos token burn and spent on fees\n   * The promise returned by receipt will resolve only once the transaction is included\n   */\n  async receipt(): Promise<Receipt> {\n    return receiptFromOperation(await this.operationResults());\n  }\n\n  /**\n   *\n   * @param opHash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    private _newHead$: Observable<BlockResponse>\n  ) {\n    this.confirmed$.pipe(first()).subscribe();\n  }\n\n  async getCurrentConfirmation() {\n    if (!this._included) {\n      return 0;\n    }\n\n    return combineLatest([this._includedInBlock, from(this.context.rpc.getBlock())])\n      .pipe(\n        map(([foundAtBlock, head]) => {\n          return head.header.level - foundAtBlock.header.level + 1;\n        }),\n        first()\n      )\n      .toPromise();\n  }\n\n  async isInCurrentBranch(tipBlockIdentifier: string = 'head') {\n    // By default it is assumed that the operation is in the current branch\n    if (!this._included) {\n      return true;\n    }\n\n    const tipBlockHeader = await this.context.rpc.getBlockHeader({ block: tipBlockIdentifier });\n    const inclusionBlock = await this._includedInBlock.pipe(first()).toPromise();\n\n    const levelDiff = tipBlockHeader.level - inclusionBlock.header.level;\n\n    // Block produced before the operation is included are assumed to be part of the current branch\n    if (levelDiff <= 0) {\n      return true;\n    }\n\n    const tipBlockLevel = Math.min(\n      inclusionBlock.header.level + levelDiff,\n      inclusionBlock.header.level + MAX_BRANCH_ANCESTORS\n    );\n\n    const blocks = new Set(await this.context.rpc.getLiveBlocks({ block: String(tipBlockLevel) }));\n    return blocks.has(inclusionBlock.hash);\n  }\n\n  confirmationObservable(confirmations?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new Error('Confirmation count must be at least 1');\n    }\n\n    const { defaultConfirmationCount } = this.context.config;\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    if (conf === undefined) {\n      throw new Error('Default confirmation count can not be undefined!');\n    }\n    \n    return combineLatest([this._includedInBlock, this.newHead$]).pipe(\n      distinctUntilChanged(([, previousHead], [, newHead]) => {\n        return previousHead.hash === newHead.hash;\n      }),\n      map(([foundAtBlock, head]) => {\n        return {\n          block: head,\n          expectedConfirmation: conf,\n          currentConfirmation: head.header.level - foundAtBlock.header.level + 1,\n          completed: head.header.level - foundAtBlock.header.level >= conf - 1,\n          isInCurrentBranch: () => this.isInCurrentBranch(head.hash),\n        };\n      }),\n      takeWhile(({ completed }) => !completed, true)\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   */\n  confirmation(confirmations?: number) {\n    return this.confirmationObservable(confirmations).toPromise();\n  }\n}\n","import { BlockResponse, OperationContentsAndResultReveal, OpKind } from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class DelegationWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async delegationOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.DELEGATION) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.delegationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import {\n  BlockResponse,\n  OperationContentsAndResultOrigination,\n  OperationContentsAndResultReveal,\n  OpKind,\n} from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { findWithKind } from '../operations/types';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class OriginationWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async originationOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.ORIGINATION) as\n      | OperationContentsAndResultOrigination\n      | undefined;\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.originationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n\n  public async contract() {\n    const op = await this.originationOperation();\n    const address = (op!.metadata.operation_result.originated_contracts || [])[0];\n    return this.context.wallet.at(address);\n  }\n}\n","import { WalletOperation, OperationStatus } from './operation';\nimport { Context } from '../context';\nimport { Observable } from 'rxjs';\nimport {\n  BlockResponse,\n  OpKind,\n  OperationContentsAndResultReveal,\n  OperationContentsAndResultTransaction,\n} from '@taquito/rpc';\n\nexport class TransactionWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async transactionOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.TRANSACTION) as\n      | OperationContentsAndResultTransaction\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.transactionOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport {\n  concat,\n  defer,\n  from,\n  MonoTypeOperatorFunction,\n  Observable,\n  of,\n  range,\n  ReplaySubject,\n  SchedulerLike,\n  throwError,\n  timer,\n} from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  shareReplay,\n  startWith,\n  switchMap,\n  timeoutWith,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { DelegationWalletOperation } from './delegation-operation';\nimport { WalletOperation } from './operation';\nimport { OriginationWalletOperation } from './origination-operation';\nimport { TransactionWalletOperation } from './transaction-operation';\n\nexport const cacheUntil = <T>(\n  cacheUntilObs: Observable<any>\n): MonoTypeOperatorFunction<T> => source => {\n  let subject: ReplaySubject<T> | null = null;\n\n  return defer(() => {\n    if (!subject) {\n      subject = new ReplaySubject<T>();\n      source.pipe(first()).subscribe(subject);\n      cacheUntilObs.pipe(first()).subscribe(() => {\n        subject = null;\n      });\n    }\n\n    return subject;\n  });\n};\n\nexport const createNewPollingBasedHeadObservable = (\n  pollingTimer: Observable<number>,\n  sharedHeadOb: Observable<BlockResponse>,\n  context: Context,\n  scheduler?: SchedulerLike\n): Observable<BlockResponse> => {  \n  \n  if (context.config.confirmationPollingTimeoutSecond === undefined) {\n    throw new Error('Confirmation polling timeout second can not be undefined!');\n  }\n\n  return pollingTimer.pipe(\n    switchMap(() => sharedHeadOb),\n    distinctUntilKeyChanged('hash'),\n    timeoutWith(\n      context.config.confirmationPollingTimeoutSecond * 1000,\n      throwError(new Error('Confirmation polling timed out')),\n      scheduler\n    ),\n    shareReplay({\n      refCount: true,\n      scheduler,\n    })\n  );\n};\n\nexport interface OperationFactoryConfig {\n  blockIdentifier?: string;\n}\n\nexport class OperationFactory {\n  constructor(private context: Context) {}\n\n  // Cache the last block for one second across all operations\n  private sharedHeadObs = defer(() => from(this.context.rpc.getBlock())).pipe(\n    cacheUntil(timer(0, 1000))\n  );\n\n  private async createNewHeadObservable() {\n    const confirmationPollingIntervalSecond = this.context.config.confirmationPollingIntervalSecond !== undefined \n                                        ? this.context.config.confirmationPollingIntervalSecond \n                                        : await this.context.getConfirmationPollingInterval();\n    return createNewPollingBasedHeadObservable(\n      timer(0, confirmationPollingIntervalSecond * 1000),\n      this.sharedHeadObs,\n      this.context\n    );\n  }\n\n  private createPastBlockWalker(startBlock: string, count: number = 1) {\n    return from(this.context.rpc.getBlock({ block: startBlock })).pipe(\n      switchMap(block => {\n        if (count === 1) {\n          return of(block);\n        }\n\n        return range(block.header.level, count - 1).pipe(\n          startWith(block),\n          concatMap(async level => {\n            return this.context.rpc.getBlock({ block: String(level) });\n          })\n        );\n      })\n    );\n  }\n\n  private async createHeadObservableFromConfig({ blockIdentifier }: OperationFactoryConfig) {\n    const observableSequence: Observable<BlockResponse>[] = [];\n\n    if (blockIdentifier) {\n      observableSequence.push(this.createPastBlockWalker(blockIdentifier));\n    }\n\n    observableSequence.push(await this.createNewHeadObservable());\n\n    return concat(...observableSequence);\n  }\n\n  async createOperation(hash: string, config: OperationFactoryConfig = {}): Promise<WalletOperation> {\n    return new WalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createTransactionOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<TransactionWalletOperation> {\n    return new TransactionWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createDelegationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<DelegationWalletOperation> {\n    return new DelegationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createOriginationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<OriginationWalletOperation> {\n    return new OriginationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n}\n","export enum DEFAULT_GAS_LIMIT {\n  DELEGATION = 10600,\n  ORIGINATION = 10600,\n  TRANSFER = 10600,\n  REVEAL = 10600,\n}\nexport enum DEFAULT_FEE {\n  DELEGATION = 1257,\n  ORIGINATION = 10000,\n  TRANSFER = 10000,\n  REVEAL = 1420,\n}\nexport enum DEFAULT_STORAGE_LIMIT {\n  DELEGATION = 0,\n  ORIGINATION = 257,\n  TRANSFER = 257,\n  REVEAL = 0,\n}\n\nexport enum Protocols {\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i'\n}\n\nexport const protocols = {\n  '004': [Protocols.Pt24m4xi],\n  '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n  '006': [Protocols.PsCARTHA],\n  '007': [Protocols.PsDELPH1],\n  '008': [Protocols.PtEdo2Zk], // edonet v2\n  '009': [Protocols.PsFLorena]\n};\n\nexport enum DefaultLambdaAddresses {\n  MAINNET = 'KT1CPuTzwC7h7uLXd5WQmpMFso1HxrLBUtpE',\n  CARTHAGENET = 'KT1VAy1o1FGiXYfD3YT7x7k5eF5HSHhmc1u6',\n  DELPHINET = 'KT19abMFs3haqyKYwqdLjK9GbtofryZLvpiK',\n  EDONET = 'KT1A64nVZDccAHGAsf1ZyVajXZcbiwjV3SnN',\n  FLORENCENET = 'KT1KCe3YqGnudsiCWb5twbe2DH5T3EMdLpSE'\n}\n\nexport enum ChainIds {\n  MAINNET = \"NetXdQprcVkpaWU\",\n  CARTHAGENET = \"NetXjD3HPJJjmcd\",\n  DELPHINET = \"NetXm8tYqnMWky1\",\n  EDONET = \"NetXSgo1ZT2DRUG\",\n  FLORENCENET = \"NetXxkAx4woPLyu\"\n}\n","import {\n  BlockHeaderResponse,\n  OperationContents,\n  OperationContentsAndResult,\n  OpKind,\n  RpcClient,\n  RPCRunOperationParam,\n} from '@taquito/rpc';\nimport { Protocols } from '../constants';\nimport { Context } from '../context';\nimport { Estimate } from '../contract/estimate';\nimport { flattenErrors, TezosOperationError, TezosPreapplyFailureError } from './operation-errors';\nimport {\n  ForgedBytes,\n  isOpRequireReveal,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RPCOperation,\n  RPCOpWithFee,\n  RPCOpWithSource\n} from './types';\n\nexport interface PreparedOperation {\n  opOb: {\n    branch: string;\n    contents: OperationContents[];\n    protocol: string;\n  };\n  counter: number;\n}\n\nexport abstract class OperationEmitter {\n  get rpc(): RpcClient {\n    return this.context.rpc;\n  }\n\n  get signer() {\n    return this.context.signer;\n  }\n\n  constructor(protected context: Context) {}\n\n  protected async isRevealOpNeeded(op: RPCOperation[] | ParamsWithKind[], pkh: string) {\n    return (!await this.isAccountRevealRequired(pkh) || !this.isRevealRequiredForOpType(op)) ? false : true;\n  }\n\n  protected async isAccountRevealRequired(publicKeyHash: string) {\n    const manager = await this.rpc.getManagerKey(publicKeyHash);\n      const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n      return !haveManager;\n  }\n\n  protected isRevealRequiredForOpType(op: RPCOperation[] | ParamsWithKind[]) {\n    let opRequireReveal = false;\n    for (const operation of op) {\n      if (isOpRequireReveal(operation)) {\n        opRequireReveal = true;\n      }\n    }\n    return opRequireReveal;\n  };\n\n  // Originally from sotez (Copyright (c) 2018 Andrew Kishino)\n  protected async prepareOperation({\n    operation,\n    source,\n  }: PrepareOperationParams): Promise<PreparedOperation> {\n    let counter;\n    const counters: { [key: string]: number } = {};\n    let ops: RPCOperation[] = [];\n    let head: BlockHeaderResponse;\n\n    const blockHeaderPromise = this.rpc.getBlockHeader();\n    const blockMetaPromise = this.rpc.getBlockMetadata();\n\n    if (Array.isArray(operation)) {\n      ops = [...operation];\n    } else {\n      ops = [operation];\n    }\n\n    // Implicit account who emit the operation\n    const publicKeyHash = await this.signer.publicKeyHash();\n    let counterPromise: Promise<string | undefined> = Promise.resolve(undefined);\n\n    for (let i = 0; i < ops.length; i++) {\n      if (isOpRequireReveal(ops[i]) || ops[i].kind === 'reveal') {\n        const { counter } = await this.rpc.getContract(publicKeyHash);\n        counterPromise = Promise.resolve(counter);\n        break;\n      }\n    }\n\n    const [header, metadata, headCounter] = await Promise.all([\n      blockHeaderPromise,\n      blockMetaPromise,\n      counterPromise\n    ]);\n\n    if (!header) {\n      throw new Error('Unable to fetch latest block header');\n    }\n\n    if (!metadata) {\n      throw new Error('Unable to fetch latest metadata');\n    }\n\n    head = header;\n\n    counter = parseInt(headCounter || '0', 10);\n    if (!counters[publicKeyHash] || counters[publicKeyHash] < counter) {\n      counters[publicKeyHash] = counter;\n    }\n\n    const getFee = (op: RPCOpWithFee) => {\n      const opCounter = ++counters[publicKeyHash];\n      return {\n        counter: `${opCounter}`,\n        // tslint:disable-next-line: strict-type-predicates\n        fee: typeof op.fee === 'undefined' ? '0' : `${op.fee}`,\n        // tslint:disable-next-line: strict-type-predicates\n        gas_limit: typeof op.gas_limit === 'undefined' ? '0' : `${op.gas_limit}`,\n        // tslint:disable-next-line: strict-type-predicates\n        storage_limit: typeof op.storage_limit === 'undefined' ? '0' : `${op.storage_limit}`,\n      };\n    };\n\n    const getSource = (op: RPCOpWithSource) => {\n      return {\n        source: typeof op.source === 'undefined' ? source || publicKeyHash : op.source,\n      };\n    };\n\n    const constructOps = (cOps: RPCOperation[]): OperationContents[] =>\n      // tslint:disable strict-type-predicates\n      cOps.map((op: RPCOperation) => {\n        switch (op.kind) {\n          case OpKind.ACTIVATION:\n            return {\n              ...op,\n            };\n          case OpKind.REVEAL:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.ORIGINATION:\n            return {\n              ...op,\n              balance: typeof op.balance !== 'undefined' ? `${op.balance}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.TRANSACTION:\n            const cops = {\n              ...op,\n              amount: typeof op.amount !== 'undefined' ? `${op.amount}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n            if (cops.source.toLowerCase().startsWith('kt1')) {\n              throw new Error(\n                `KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`\n              );\n            }\n            return cops;\n          case OpKind.DELEGATION:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          default:\n            throw new Error('Unsupported operation');\n        }\n      });\n\n    const branch = head.hash;\n    const contents = constructOps(ops);\n    const protocol = metadata.next_protocol;\n\n    return {\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async forge({ opOb: { branch, contents, protocol }, counter }: PreparedOperation) {\n    let forgedBytes = await this.context.forger.forge({ branch, contents });\n\n    return {\n      opbytes: forgedBytes,\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async simulate(op: RPCRunOperationParam) {\n    return {\n      opResponse: await this.rpc.runOperation(op),\n      op,\n      context: this.context.clone(),\n    };\n  }\n\n  protected async estimate<T extends { fee?: number; gasLimit?: number; storageLimit?: number }>(\n    { fee, gasLimit, storageLimit, ...rest }: T,\n    estimator: (param: T) => Promise<Estimate>\n  ) {\n    let calculatedFee = fee;\n    let calculatedGas = gasLimit;\n    let calculatedStorage = storageLimit;\n\n    if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n      const estimation = await estimator({ fee, gasLimit, storageLimit, ...(rest as any) });\n\n      if (calculatedFee === undefined) {\n        calculatedFee = estimation.suggestedFeeMutez;\n      }\n\n      if (calculatedGas === undefined) {\n        calculatedGas = estimation.gasLimit;\n      }\n\n      if (calculatedStorage === undefined) {\n        calculatedStorage = estimation.storageLimit;\n      }\n    }\n\n    return {\n      fee: calculatedFee!,\n      gasLimit: calculatedGas!,\n      storageLimit: calculatedStorage!,\n    };\n  }\n\n  protected async signAndInject(forgedBytes: ForgedBytes) {\n    const signed = await this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n    forgedBytes.opbytes = signed.sbytes;\n    forgedBytes.opOb.signature = signed.prefixSig;\n\n    const opResponse: OperationContentsAndResult[] = [];\n    const results = await this.rpc.preapplyOperations([forgedBytes.opOb]);\n\n    if (!Array.isArray(results)) {\n      throw new TezosPreapplyFailureError(results);\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      for (let j = 0; j < results[i].contents.length; j++) {\n        opResponse.push(results[i].contents[j]);\n      }\n    }\n\n    const errors = flattenErrors(results);\n\n    if (errors.length) {\n      // @ts-ignore\n      throw new TezosOperationError(errors);\n    }\n\n    return {\n      hash: await this.context.injector.inject(forgedBytes.opbytes),\n      forgedBytes,\n      opResponse,\n      context: this.context.clone(),\n    };\n  }\n}\n","import {\n  BlockResponse,\n  OperationContentsAndResult,\n  OperationContentsAndResultReveal,\n} from '@taquito/rpc';\nimport { defer, from, ReplaySubject, timer } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  mapTo,\n  shareReplay,\n  switchMap,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { ForgedBytes, hasMetadataWithResult } from './types';\n\ninterface PollingConfig {\n  timeout: number;\n  interval: number;\n}\n\n/**\n * @description Utility class to interact with Tezos operations\n */\nexport class Operation {\n  private _pollingConfig$ = new ReplaySubject<PollingConfig>(1);\n\n  private _currentHeadPromise: Promise<BlockResponse> | undefined = undefined;\n\n  // Caching the current head for one second\n  private currentHead$ = defer(() => {\n    if (!this._currentHeadPromise) {\n      this._currentHeadPromise = this.context.rpc.getBlock();\n      timer(1000)\n        .pipe(first())\n        .subscribe(() => {\n          this._currentHeadPromise = undefined;\n        });\n    }\n    return from(this._currentHeadPromise);\n  });\n\n  // Polling observable that emit until timeout is reached\n  private polling$ = defer(() =>\n    this._pollingConfig$.pipe(\n      tap(({ timeout, interval }) => {\n        if (timeout <= 0) {\n          throw new Error('Timeout must be more than 0');\n        }\n\n        if (interval <= 0) {\n          throw new Error('Interval must be more than 0');\n        }\n      }),\n      map((config) => ({\n        ...config,\n        timeoutAt: Math.ceil(config.timeout / config.interval) + 1,\n        count: 0,\n      })),\n      switchMap((config) => timer(0, config.interval * 1000).pipe(mapTo(config))),\n      tap((config) => {\n        config.count++;\n        if (config.count > config.timeoutAt) {\n          throw new Error(`Confirmation polling timed out`);\n        }\n      })\n    )\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.polling$.pipe(\n    switchMapTo(this.currentHead$),\n    map((head) => {\n      for (let i = 3; i >= 0; i--) {\n        head.operations[i].forEach((op) => {\n          if (op.hash === this.hash) {\n            this._foundAt = head.header.level;\n          }\n        });\n      }\n\n      if (head.header.level - this._foundAt >= 0) {\n        return this._foundAt;\n      }\n    }),\n    filter((x) => x !== undefined),\n    first(),\n    shareReplay()\n  );\n\n  protected _foundAt = Number.POSITIVE_INFINITY;\n  get includedInBlock() {\n    return this._foundAt;\n  }\n  /**\n   *\n   * @param hash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly hash: string,\n    public readonly raw: ForgedBytes,\n    public readonly results: OperationContentsAndResult[],\n    protected readonly context: Context\n  ) {\n    this.confirmed$.pipe(first()).subscribe();\n  }\n\n  get revealOperation() {\n    return (\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'reveal') as\n        | OperationContentsAndResultReveal\n        | undefined)\n    );\n  }\n\n  public get revealStatus() {\n    if (this.revealOperation) {\n      return this.revealOperation.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  public get status() {\n    return (\n      this.results.map((result) => {\n        if (hasMetadataWithResult(result)) {\n          return result.metadata.operation_result.status;\n        } else {\n          return 'unknown';\n        }\n      })[0] || 'unknown'\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   * @param interval [10] Polling interval\n   * @param timeout [180] Timeout\n   */\n  async confirmation(confirmations?: number, interval?: number, timeout?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new Error('Confirmation count must be at least 1');\n    }\n\n    const confirmationPollingIntervalSecond =\n      this.context.config.confirmationPollingIntervalSecond !== undefined\n        ? this.context.config.confirmationPollingIntervalSecond\n        : await this.context.getConfirmationPollingInterval();\n\n    const { defaultConfirmationCount, confirmationPollingTimeoutSecond } = this.context.config;\n    this._pollingConfig$.next({\n      interval: interval || confirmationPollingIntervalSecond,\n      timeout: timeout || confirmationPollingTimeoutSecond,\n    } as Required<PollingConfig>);\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    if (conf === undefined) {\n      throw new Error('Default confirmation count can not be undefined!');\n    }\n\n    return new Promise<number>((resolve, reject) => {\n      this.confirmed$\n        .pipe(\n          switchMap(() => this.polling$),\n          switchMap(() => this.currentHead$),\n          filter((head) => head.header.level - this._foundAt >= conf - 1),\n          first()\n        )\n        .subscribe((_) => {\n          resolve(this._foundAt + (conf - 1));\n        }, reject);\n    });\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { Operation } from '../operations/operations';\nimport { RPCActivateOperation } from '../operations/types';\nimport { TzProvider } from './interface';\nimport { OpKind } from '@taquito/rpc';\n\nexport class RpcTzProvider extends OperationEmitter implements TzProvider {\n  constructor(context: Context) {\n    super(context);\n  }\n\n  async getBalance(address: string): Promise<BigNumber> {\n    return this.rpc.getBalance(address);\n  }\n\n  async getDelegate(address: string): Promise<string | null> {\n    return this.rpc.getDelegate(address);\n  }\n\n  async activate(pkh: string, secret: string) {\n    const operation: RPCActivateOperation = {\n      kind: OpKind.ACTIVATION,\n      pkh,\n      secret,\n    };\n\n    const prepared = await this.prepareOperation({ operation: [operation], source: pkh });\n    const forgedBytes = await this.forge(prepared);\n    const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n    return new Operation(\n      await this.rpc.injectOperation(bytes),\n      { ...forgedBytes, opbytes: bytes },\n      [],\n      this.context.clone()\n    );\n  }\n}\n","const MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\n\nconst GAS_BUFFER = 100;\n\nexport interface EstimateProperties {\n  milligasLimit: number,\n  storageLimit: number,\n  opSize: number,\n  minimalFeePerStorageByteMutez: number,\n  baseFeeMutez?: number\n}\n\n/**\n * Examples of use :\n *\n *  Estimate a transfer operation :\n * ```\n * // Assuming that provider and signer are already configured...\n *\n * const amount = 2;\n * const address = 'tz1h3rQ8wBxFd8L9B3d7Jhaawu6Z568XU3xY';\n *\n * // Estimate gasLimit, storageLimit and fees for a transfer operation\n * const est = await Tezos.estimate.transfer({ to: address, amount: amount })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *  est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n *\n * Estimate a contract origination :\n * ```\n * // generic.json is referring to a Michelson Smart Contract\n *\n * const genericMultisigJSON = require('./generic.json')\n * const est = await Tezos.estimate.originate({\n *   code: genericMultisigJSON,\n *   storage: {\n *     stored_counter: 0,\n *     threshold: 1,\n *     keys: ['edpkuLxx9PQD8fZ45eUzrK3BhfDZJHhBuK4Zi49DcEGANwd2rpX82t']\n *   }\n * })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *   est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n */\n\nexport class Estimate {\n  constructor(\n    private readonly _milligasLimit: number | string,\n    private readonly _storageLimit: number | string,\n    private readonly opSize: number | string,\n    private readonly minimalFeePerStorageByteMutez: number | string,\n    /**\n     * @description Base fee in mutez (1 mutez = 1e10−6 tez)\n     */\n    private readonly baseFeeMutez: number | string = MINIMAL_FEE_MUTEZ\n  ) {}\n\n  /**\n   * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)\n   */\n  get burnFeeMutez() {\n    return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));\n  }\n\n  /**\n   * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.\n   */\n  get storageLimit() {\n    const limit = Math.max(Number(this._storageLimit), 0);\n    return limit > 0 ? limit : 0;\n  }\n\n  /**\n   * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.\n   */\n  get gasLimit() {\n    return this.roundUp(Number(this._milligasLimit)/1000 + GAS_BUFFER);\n  }\n\n  private get operationFeeMutez() {\n    return (\n      (Number(this._milligasLimit)/1000 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ + Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ\n      );\n  }\n\n  private roundUp(nanotez: number) {\n    return Math.ceil(Number(nanotez));\n  }\n\n  /**\n   * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.\n   */\n  get minimalFeeMutez() {\n    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n  }\n\n  /**\n   * @description The suggested fee for the operation which includes minimal fees and a small buffer.\n   */\n  get suggestedFeeMutez() {\n    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n  }\n\n  /**\n   * @description Fees according to your specified base fee will ensure that at least minimum fees are used.\n   */\n  get usingBaseFeeMutez() {\n    return (\n      Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez)\n    );\n  }\n\n  /**\n   * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.\n   */\n  get totalCost() {\n    return this.minimalFeeMutez + this.burnFeeMutez;\n  }\n\n  /**\n   * @description Since Delphinet, consumed gas is provided in milligas for more precision. \n   * This function returns an estimation of the gas that operation will consume in milligas. \n   */\n  get consumedMilligas() {\n    return Number(this._milligasLimit);\n  }\n\n  static createEstimateInstanceFromProperties(estimateProperties: EstimateProperties[]) {\n    let milligasLimit = 0;\n    let storageLimit = 0;\n    let opSize = 0;\n    let minimalFeePerStorageByteMutez = 0;\n    let baseFeeMutez: number | undefined;\n\n    estimateProperties.forEach(estimate => {\n      milligasLimit += estimate.milligasLimit;\n      storageLimit += estimate.storageLimit;\n      opSize += estimate.opSize;\n      minimalFeePerStorageByteMutez = Math.max(estimate.minimalFeePerStorageByteMutez, minimalFeePerStorageByteMutez);\n      if (estimate.baseFeeMutez) {\n        baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;\n      }\n    })\n    return new Estimate(milligasLimit, storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez);\n  }\n\n  static createArrayEstimateInstancesFromProperties(estimateProperties: EstimateProperties[]) {\n    return estimateProperties.map(x => new Estimate(x.milligasLimit, x.storageLimit, x.opSize, x.minimalFeePerStorageByteMutez, x.baseFeeMutez))\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\n\ntype Format = 'tz' | 'mtz' | 'mutez';\n\nfunction getDecimal(format: Format) {\n  switch (format) {\n    case 'tz':\n      return TZ_DECIMALS;\n    case 'mtz':\n      return MTZ_DECIMALS;\n    case 'mutez':\n    default:\n      return 0;\n  }\n}\n\nexport function format(\n  from: Format = 'mutez',\n  to: Format = 'mutez',\n  amount: number | string | BigNumber\n) {\n  const bigNum = new BigNumber(amount);\n  if (bigNum.isNaN()) {\n    return amount;\n  }\n\n  return bigNum\n    .multipliedBy(Math.pow(10, getDecimal(from)))\n    .dividedBy(Math.pow(10, getDecimal(to)));\n}\n","export class InvalidParameterError implements Error {\n  name: string = 'Invalid parameters error';\n  message: string;\n  constructor(public smartContractMethodName: string, public sigs: any[], public args: any[]) {\n    this.message = `${smartContractMethodName} Received ${\n      args.length\n    } arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`;\n  }\n}\n\nexport class UndefinedLambdaContractError implements Error {\n  name: string = 'Undefined LambdaContract error';\n  message: string;\n  constructor() {\n    this.message = \"This might happen if you are using a sandbox. Please provide the address of a lambda contract as a parameter of the read method.\";\n  }\n}\nexport class InvalidDelegationSource implements Error {\n  name: string = 'Invalid delegation source error';\n  message: string;\n\n  constructor(public source: string) {\n    this.message = `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`;\n  }\n}\n\nexport class InvalidCodeParameter implements Error {\n  public name: string = 'InvalidCodeParameter';\n  constructor(public message: string, public readonly data: any) { }\n}\n\nexport class InvalidInitParameter implements Error {\n  public name: string = 'InvalidInitParameter';\n  constructor(public message: string, public readonly data: any) { }\n}\n","import { Schema } from '@taquito/michelson-encoder';\nimport { OpKind, MichelsonV1Expression } from '@taquito/rpc';\nimport { Prim, Expr } from '@taquito/michel-codec';\nimport {\n  OriginateParams,\n  RPCOriginationOperation,\n  TransferParams,\n  RPCTransferOperation,\n  DelegateParams,\n  RPCDelegateOperation,\n  RegisterDelegateParams,\n  RPCRevealOperation,\n  RevealParams\n} from '../operations/types';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { format } from '../format';\nimport { InvalidCodeParameter, InvalidInitParameter } from './errors';\n\nexport const createOriginationOperation = async ({\n  code,\n  init,\n  balance = \"0\",\n  delegate,\n  storage,\n  fee = DEFAULT_FEE.ORIGINATION,\n  gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION,\n  mutez = false\n}: OriginateParams) => {\n  // tslint:disable-next-line: strict-type-predicates\n  if (storage !== undefined && init !== undefined) {\n    throw new Error(\n      \"Storage and Init cannot be set a the same time. Please either use storage or init but not both.\",\n    );\n  }\n\n  if(!Array.isArray(code)){\n    throw new InvalidCodeParameter('Wrong code parameter type, expected an array', code);\n  }\n\n  let contractStorage: Expr | undefined;\n  if (storage !== undefined) {\n    const storageType = (code as Expr[]).find((p): p is Prim => ('prim' in p) && p.prim === 'storage');\n    if (storageType?.args === undefined) {\n      throw new InvalidCodeParameter('The storage section is missing from the script', code);\n    }\n    const schema = new Schema(storageType.args[0] as MichelsonV1Expression); // TODO\n    contractStorage = schema.Encode(storage);\n  } else if (init !== undefined && typeof init === 'object') {\n    contractStorage = init as Expr;\n  } else {\n    throw new InvalidInitParameter('Wrong init parameter type, expected JSON Michelson', init);\n  }\n\n  const script = {\n    code,\n    storage: contractStorage,\n  };\n\n  const operation: RPCOriginationOperation = {\n    kind: OpKind.ORIGINATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    balance: mutez\n      ? balance.toString()\n      : format('tz', 'mutez', balance).toString(),\n    script,\n  };\n\n  if (delegate) {\n    operation.delegate = delegate;\n  }\n  return operation;\n};\n\nexport const createTransferOperation = async ({\n  to,\n  amount,\n  parameter,\n  fee = DEFAULT_FEE.TRANSFER,\n  gasLimit = DEFAULT_GAS_LIMIT.TRANSFER,\n  storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER,\n  mutez = false,\n}: TransferParams) => {\n  const operation: RPCTransferOperation = {\n    kind: OpKind.TRANSACTION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    amount: mutez\n      ? amount.toString()\n      : format(\"tz\", \"mutez\", amount).toString(),\n    destination: to,\n    parameters: parameter,\n  };\n  return operation;\n};\n\nexport const createSetDelegateOperation = async ({\n  delegate,\n  source,\n  fee = DEFAULT_FEE.DELEGATION,\n  gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n}: DelegateParams) => {\n  const operation: RPCDelegateOperation = {\n    kind: OpKind.DELEGATION,\n    source,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate,\n  };\n  return operation;\n};\n\nexport const createRegisterDelegateOperation = async (\n  {\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n  }: RegisterDelegateParams,\n  source: string,\n) => {\n  return {\n    kind: OpKind.DELEGATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate: source,\n  } as RPCDelegateOperation;\n};\n\nexport const createRevealOperation = async (\n  {\n    fee = DEFAULT_FEE.REVEAL,\n    gasLimit = DEFAULT_GAS_LIMIT.REVEAL,\n    storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL,\n  }: RevealParams,\n  source: string,\n  publicKey: string,\n) => {\n  return {\n    kind: OpKind.REVEAL,\n    fee,\n    public_key: publicKey,\n    source,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit\n  } as RPCRevealOperation;\n};","import { PreapplyResponse, RPCRunOperationParam, OpKind } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  flattenErrors,\n  flattenOperationResult,\n  TezosOperationError,\n} from '../operations/operation-errors';\nimport {\n  DelegateParams,\n  isOpWithFee,\n  OriginateParams,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RegisterDelegateParams,\n  RPCOperation,\n  TransferParams,\n  RevealParams,\n} from '../operations/types';\nimport { Estimate, EstimateProperties } from './estimate';\nimport { EstimationProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from './prepare';\n\ninterface Limits {\n  fee?: number;\n  storageLimit?: number;\n  gasLimit?: number;\n}\n\nconst mergeLimits = (\n  userDefinedLimit: Limits,\n  defaultLimits: Required<Limits>\n): Required<Limits> => {\n  return {\n    fee: typeof userDefinedLimit.fee === 'undefined' ? defaultLimits.fee : userDefinedLimit.fee,\n    gasLimit:\n      typeof userDefinedLimit.gasLimit === 'undefined'\n        ? defaultLimits.gasLimit\n        : userDefinedLimit.gasLimit,\n    storageLimit:\n      typeof userDefinedLimit.storageLimit === 'undefined'\n        ? defaultLimits.storageLimit\n        : userDefinedLimit.storageLimit,\n  };\n};\n\n// RPC requires a signature but does not verify it\nconst SIGNATURE_STUB =\n  'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg';\n\nexport class RPCEstimateProvider extends OperationEmitter implements EstimationProvider {\n  private readonly ALLOCATION_STORAGE = 257;\n  private readonly ORIGINATION_STORAGE = 257;\n  private readonly OP_SIZE_REVEAL = 128;\n\n  // Maximum values defined by the protocol\n  private async getAccountLimits(pkh: string) {\n    const balance = await this.rpc.getBalance(pkh);\n    const {\n      hard_gas_limit_per_operation,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n    } = await this.rpc.getConstants();\n    return {\n      fee: 0,\n      gasLimit: hard_gas_limit_per_operation.toNumber(),\n      storageLimit: Math.floor(\n        BigNumber.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber()\n      ),\n    };\n  }\n\n  private getEstimationPropertiesFromOperationContent(\n    content: PreapplyResponse['contents'][0],\n    size: number,\n    costPerByte: BigNumber\n  ): EstimateProperties {\n    const operationResults = flattenOperationResult({ contents: [content] });\n    let totalGas = 0;\n    let totalMilligas = 0;\n    let totalStorage = 0;\n    operationResults.forEach(result => {\n      totalStorage +=\n        'originated_contracts' in result && typeof result.originated_contracts !== 'undefined'\n          ? result.originated_contracts.length * this.ORIGINATION_STORAGE\n          : 0;\n      totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n      totalGas += Number(result.consumed_gas) || 0;\n      totalMilligas += Number(result.consumed_milligas) || 0;\n      totalStorage +=\n        'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n    });\n\n    if (totalGas !== 0 && totalMilligas === 0) {\n      // This will convert gas to milligas for Carthagenet where result does not contain consumed gas in milligas.\n      totalMilligas = totalGas * 1000;\n    }\n\n    if (isOpWithFee(content)) {\n      return {\n        milligasLimit: (totalMilligas || 0),\n        storageLimit: Number(totalStorage || 0),\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber()\n      }\n    } else {\n      return {\n        milligasLimit: 0,\n        storageLimit: 0,\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n        baseFeeMutez: 0\n      }\n    }\n  }\n\n  private async prepareEstimate(params: PrepareOperationParams) {\n    const prepared = await this.prepareOperation(params);\n    const {\n      opbytes,\n      opOb: { branch, contents },\n    } = await this.forge(prepared);\n    let operation: RPCRunOperationParam = {\n      operation: { branch, contents, signature: SIGNATURE_STUB },\n      chain_id: await this.rpc.getChainId(),\n    };\n\n    const { opResponse } = await this.simulate(operation);\n    const { cost_per_byte } = await this.rpc.getConstants();\n    const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)];\n\n    // Fail early in case of errors\n    if (errors.length) {\n      throw new TezosOperationError(errors);\n    }\n\n    let numberOfOps = 1;\n    if (Array.isArray(params.operation) && (params.operation.length > 1)) {\n      numberOfOps = (opResponse.contents[0].kind === 'reveal')? (params.operation.length - 1): params.operation.length\n    };\n\n    return opResponse.contents.map(x => {\n      return this.getEstimationPropertiesFromOperationContent(\n        x,\n        // TODO: Calculate a specific opSize for each operation.\n        x.kind === 'reveal' ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps,\n        cost_per_byte\n      );\n    });\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an origination operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate({ fee, storageLimit, gasLimit, ...rest }: OriginateParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    const op = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n        ...rest,\n        ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n      })\n    );\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate({ operation: ops, source: pkh });\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an transfer operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param TransferOperation Originate operation parameter\n   */\n  async transfer({ fee, storageLimit, gasLimit, ...rest }: TransferParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    const op = await createTransferOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate({ operation: ops, source: pkh });\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async setDelegate({ fee, gasLimit, storageLimit, ...rest }: DelegateParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const sourceOrDefault = rest.source || pkh;\n    const DEFAULT_PARAMS = await this.getAccountLimits(sourceOrDefault);\n    const op = await createSetDelegateOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate({ operation: ops, source: pkh });\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch\n   *\n   * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.\n   */\n  async batch(params: ParamsWithKind[]) {\n    const pkh = await this.signer.publicKeyHash();\n    let operations: RPCOperation[] = [];\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          operations.push(\n            await createTransferOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ORIGINATION:\n          operations.push(\n            await createOriginationOperation(\n              await this.context.parser.prepareCodeOrigination({\n                ...param,\n                ...mergeLimits(param, DEFAULT_PARAMS),\n              }))\n          );\n          break;\n        case OpKind.DELEGATION:\n          operations.push(\n            await createSetDelegateOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ACTIVATION:\n          operations.push({\n            ...param,\n            ...DEFAULT_PARAMS,\n          });\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n    const isRevealNeeded = await this.isRevealOpNeeded(operations, pkh);\n    operations = isRevealNeeded ? await this.addRevealOp(operations, pkh) : operations;\n    const estimateProperties = await this.prepareEstimate({ operation: operations, source: pkh });\n\n    return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const pkh = await this.signer.publicKeyHash()\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n    const op = await createRegisterDelegateOperation(\n      { ...params, ...DEFAULT_PARAMS },\n      pkh\n    );\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate({ operation: ops, source: pkh });\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees to reveal the current account\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed\n   *\n   * @param Estimate\n   */\n  async reveal(params?: RevealParams) {\n    const pkh = await this.signer.publicKeyHash();\n    if (await this.isAccountRevealRequired(pkh)) {\n      const DEFAULT_PARAMS = await this.getAccountLimits(pkh);\n      const op = await createRevealOperation({\n        ...params, ...DEFAULT_PARAMS\n      },\n        pkh,\n        await this.signer.publicKey()\n      )\n      const estimateProperties = await this.prepareEstimate({ operation: op, source: pkh });\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    }\n  }\n\n  private async addRevealOp(op: RPCOperation[], pkh: string) {\n    op.unshift(\n      await createRevealOperation({\n        ...{ fee: DEFAULT_FEE.REVEAL, gasLimit: DEFAULT_GAS_LIMIT.REVEAL, storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL }\n      },\n        pkh,\n        await this.signer.publicKey())\n    )\n    return op;\n  }\n}\n","import { OperationContentsAndResult, OperationResultStatusEnum } from '@taquito/rpc';\nimport { BATCH_KINDS } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCOperation,\n  StorageConsumingOperation,\n  hasMetadataWithResult,\n} from './types';\n\nexport class BatchOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCOperation[],\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  public get status() {\n    return (\n      this.results\n        .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n        .map((result) => {\n          if (hasMetadataWithResult(result)) {\n            return result.metadata.operation_result.status;\n          } else {\n            return 'unknown';\n          }\n        })[0] || 'unknown'\n    );\n  }\n\n  get fee() {\n    return this.sumProp(this.params, 'fee');\n  }\n\n  get gasLimit() {\n    return this.sumProp(this.params, 'gas_limit');\n  }\n\n  get storageLimit() {\n    return this.sumProp(this.params, 'storage_limit');\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.results }), 'paid_storage_size_diff')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.results });\n  }\n}\n","import { Context } from '../context';\nimport { ContractMethod } from '../contract/contract';\nimport { EstimationProvider, ContractProvider } from '../contract/interface';\nimport {\n  createOriginationOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from '../contract/prepare';\nimport { BatchOperation } from '../operations/batch-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  ActivationParams,\n  DelegateParams,\n  OriginateParams,\n  RPCOperation,\n  TransferParams,\n  ParamsWithKind,\n  isOpWithFee,\n  withKind,\n  RevealParams,\n  isOpRequireReveal,\n} from '../operations/types';\nimport { OpKind } from '@taquito/rpc';\n\nexport const BATCH_KINDS = [\n  OpKind.ACTIVATION,\n  OpKind.ORIGINATION,\n  OpKind.TRANSACTION,\n  OpKind.DELEGATION,\n];\nexport type BatchKinds =\n  | OpKind.ACTIVATION\n  | OpKind.ORIGINATION\n  | OpKind.TRANSACTION\n  | OpKind.DELEGATION;\n\nexport class OperationBatch extends OperationEmitter {\n  private operations: ParamsWithKind[] = [];\n\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: TransferParams) {\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod<ContractProvider>) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: DelegateParams) {\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an activation operation to the batch\n   *\n   * @param params Activation operation parameter\n   */\n  withActivation({ pkh, secret }: ActivationParams) {\n    this.operations.push({ kind: OpKind.ACTIVATION, pkh, secret });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination(params: OriginateParams) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  private async getRPCOp(param: ParamsWithKind) {\n    switch (param.kind) {\n      case OpKind.TRANSACTION:\n        return createTransferOperation({\n          ...param,\n        });\n      case OpKind.ORIGINATION:\n        return createOriginationOperation(\n          await this.context.parser.prepareCodeOrigination({\n          ...param,\n        }));\n      case OpKind.DELEGATION:\n        return createSetDelegateOperation({\n          ...param,\n        });\n      case OpKind.ACTIVATION:\n        return {\n          ...param,\n        };\n      default:\n        throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: ParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        case OpKind.ACTIVATION:\n          this.withActivation(param);\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Forge and Inject the operation batch\n   *\n   * @param params Optionally specify the source of the operation\n   */\n  async send(params?: { source?: string }) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const publicKey = await this.signer.publicKey();\n    const estimates = await this.estimator.batch(this.operations);\n\n    const revealNeeded = await this.isRevealOpNeeded(this.operations, publicKeyHash);\n    let i = revealNeeded ? 1 : 0;\n\n    const ops: RPCOperation[] = [];\n    for (const op of this.operations) {\n      if (isOpWithFee(op)) {\n        const estimated = await this.estimate(op, async () => estimates[i]);\n        ops.push(await this.getRPCOp({ ...op, ...estimated }));\n      } else {\n        ops.push({ ...op });\n      }\n      i++;\n    }\n    if (revealNeeded) {\n      const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL }\n      const estimatedReveal = await this.estimate(reveal, async () => estimates[0]);\n      ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey))\n    }\n\n    const source = (params && params.source) || publicKeyHash;\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new BatchOperation(hash, ops, source, forgedBytes, opResponse, context);\n  }\n}\n\nexport class RPCBatchProvider {\n  constructor(private context: Context, private estimator: EstimationProvider) { }\n\n  /***\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultDelegation } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCDelegateOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Delegation operation provide utility function to fetch newly issued delegation\n *\n * @warn Currently support only one delegation per operation\n */\nexport class DelegateOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCDelegateOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const delegationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'delegation') as OperationContentsAndResultDelegation);\n    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get delegate(): string {\n    return this.delegate;\n  }\n\n  get isRegisterOperation(): boolean {\n    return this.delegate === this.source;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultOrigination } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { RpcContractProvider } from '../contract/rpc-contract-provider';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  hasMetadataWithResult,\n  RPCOriginationOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Origination operation provide utility function to fetch newly originated contract\n *\n * @warn Currently support only one origination per operation\n */\nexport class OriginationOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  /**\n   * @description Contract address of the newly originated contract\n   */\n  public readonly contractAddress?: string;\n\n  constructor(\n    hash: string,\n    private readonly params: RPCOriginationOperation,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context,\n    private contractProvider: RpcContractProvider\n  ) {\n    super(hash, raw, results, context);\n\n    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n    if (Array.isArray(originatedContracts)) {\n      this.contractAddress = originatedContracts[0];\n    }\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get operationResults() {\n    const originationOp =\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'origination') as\n        | OperationContentsAndResultOrigination\n        | undefined);\n\n    const result =\n      originationOp &&\n      hasMetadataWithResult(originationOp) &&\n      originationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get storageDiff() {\n    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n    return storageDiff ? storageDiff : undefined;\n  }\n\n  get storageSize() {\n    const storageSize = this.operationResults && this.operationResults.storage_size;\n    return storageSize ? storageSize : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n  /**\n   * @description Provide the contract abstract of the newly originated contract\n   */\n  async contract(confirmations?: number, interval?: number, timeout?: number) {\n    if (!this.contractAddress) {\n      throw new Error('No contract was originated in this operation');\n    }\n\n    await this.confirmation(confirmations, interval, timeout);\n    return this.contractProvider.at(this.contractAddress);\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultReveal } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCRevealOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Reveal operation provides utility functions to fetch a newly issued revelation\n */\nexport class RevealOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCRevealOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const revealOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'reveal') as OperationContentsAndResultReveal);\n    return revealOp ? [revealOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get publicKey() {\n    return this.params.public_key;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTransferOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Transaction operation provides utility functions to fetch a newly issued transaction\n *\n * @warn Currently supports one transaction per operation\n */\nexport class TransactionOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCTransferOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const transactionOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'transaction') as OperationContentsAndResultTransaction);\n    return transactionOp ? [transactionOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get amount() {\n    return new BigNumber(this.params.amount);\n  }\n\n  get destination() {\n    return this.params.destination;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","const setDelegate = (key: string) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'SOME' },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferImplicit = (key: string, mutez: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'IMPLICIT_ACCOUNT' },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${mutez}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst removeDelegate = () => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferToContract = (key: string, amount: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'address' }, { string: key }],\n    },\n    { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n    [\n      {\n        prim: 'IF_NONE',\n        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], []],\n      },\n    ],\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${amount}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nexport const MANAGER_LAMBDA = {\n  setDelegate,\n  removeDelegate,\n  transferImplicit,\n  transferToContract,\n};\n","const code = [\n  {\n    prim: 'parameter',\n    args: [\n      {\n        prim: 'lambda',\n        args: [\n          { prim: 'unit' },\n          {\n            prim: 'pair',\n            args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n          },\n        ],\n      },\n    ],\n  },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  { prim: 'code', args: [[{ prim: 'CAR' }, { prim: 'UNIT' }, { prim: 'EXEC' }]] },\n];\n\nconst storage = 'Unit';\n\nexport const VIEW_LAMBDA = {\n  code,\n  storage\n}\n","import { Wallet } from '../wallet/wallet';\nimport { Context } from '../context';\nimport { ContractAbstraction } from './contract';\nimport { ContractProvider } from './interface';\n\nexport function compose<\n    ContractAbsComposer1 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbsComposer2 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbstractionComposed\n>(\n    functioncomposer1: (abs: ContractAbsComposer1, context: Context) => ContractAbsComposer2,\n    functioncomposer2: (abs: ContractAbsComposer2, context: Context) => ContractAbstractionComposed\n): (abs: ContractAbsComposer1, context: Context) => ContractAbstractionComposed {\n    return (contractAbstraction, context) =>\n        functioncomposer2(functioncomposer1(contractAbstraction, context), context);\n}\n","import { Protocols } from '../constants';\nimport { Context } from '../context';\nimport { ContractAbstraction, ContractMethod } from '../contract';\nimport { OpKind, withKind } from '../operations/types';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\n\nexport interface PKHOption {\n  forceRefetch?: boolean;\n}\n\nexport type WalletParamsWithKind =\n  | withKind<WalletTransferParams, OpKind.TRANSACTION>\n  | withKind<WalletOriginateParams, OpKind.ORIGINATION>\n  | withKind<WalletDelegateParams, OpKind.DELEGATION>;\n\nexport class WalletOperationBatch {\n  private operations: WalletParamsWithKind[] = [];\n\n  constructor(private walletProvider: WalletProvider, private context: Context) {}\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: WalletTransferParams) {\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod<Wallet>) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: WalletDelegateParams) {\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination(params: WalletOriginateParams) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  private async mapOperation(param: WalletParamsWithKind) {\n\t\tswitch (param.kind) {\n\t\t\tcase OpKind.TRANSACTION:\n\t\t\t\treturn this.walletProvider.mapTransferParamsToWalletParams({\n\t\t\t\t\t...param\n\t\t\t\t});\n\t\t\tcase OpKind.ORIGINATION:\n\t\t\t\treturn this.walletProvider.mapOriginateParamsToWalletParams(\n\t\t\t\t\tawait this.context.parser.prepareCodeOrigination({\n\t\t\t\t\t\t...param\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\tcase OpKind.DELEGATION:\n\t\t\t\treturn this.walletProvider.mapDelegateParamsToWalletParams({\n\t\t\t\t\t...param\n\t\t\t\t});\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported operation kind: ${(param as any).kind}`);\n\t\t}\n\t}\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: WalletParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Submit batch operation to wallet\n   *\n   */\n  async send() {\n    const ops: WalletParamsWithKind[] = [];\n\n    for (const op of this.operations) {\n      ops.push(await this.mapOperation(op));\n    }\n\n    const opHash = await this.walletProvider.sendOperations(ops);\n\n    return this.context.operationFactory.createOperation(opHash);\n  }\n}\n\nexport class Wallet {\n  constructor(private context: Context) {}\n\n  private get walletProvider() {\n    return this.context.walletProvider;\n  }\n\n  private _pkh?: string;\n\n  /**\n   * @description Retrieve the PKH of the account that is currently in use by the wallet\n   *\n   * @param option Option to use while fetching the PKH.\n   * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet\n   */\n  async pkh({ forceRefetch }: PKHOption = {}) {\n    if (!this._pkh || forceRefetch) {\n      this._pkh = await this.walletProvider.getPKH();\n    }\n\n    return this._pkh;\n  }\n\n  private walletCommand = <T>(send: () => Promise<T>) => {\n    return {\n      send,\n    };\n  };\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param originateParams Originate operation parameter\n   */\n  originate(params: WalletOriginateParams) {\n\t\treturn this.walletCommand(async () => {\n\t\t\tconst mappedParams = await this.walletProvider.mapOriginateParamsToWalletParams(\n\t\t\t\tawait this.context.parser.prepareCodeOrigination({\n\t\t\t\t\t...params\n\t\t\t\t})\n\t\t\t);\n\t\t\tconst opHash = await this.walletProvider.sendOperations([ mappedParams ]);\n\t\t\tif (!this.context.proto) {\n\t\t\t\tthis.context.proto = (await this.context.rpc.getBlock()).protocol as Protocols;\n\t\t\t}\n\t\t\treturn this.context.operationFactory.createOriginationOperation(opHash);\n\t\t});\n\t}\n\n  /**\n   *\n   * @description Set the delegate for a contract.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param delegateParams operation parameter\n   */\n  setDelegate(params: WalletDelegateParams) {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams({ ...params });\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   */\n  registerDelegate() {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams({\n        delegate: await this.pkh(),\n      });\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Transfer tezos tokens from current address to a specific address or call a smart contract.\n   *\n   * @returns A wallet command from which we can send the operation to the wallet\n   *\n   * @param params operation parameter\n   */\n  transfer(params: WalletTransferParams) {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapTransferParamsToWalletParams(params);\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createTransactionOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Create a batch of operation\n   *\n   * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch\n   *\n   * @param params List of operation to initialize the batch with\n   */\n  batch(params?: Parameters<WalletOperationBatch['with']>[0]) {\n    const batch = new WalletOperationBatch(this.walletProvider, this.context);\n    \n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n    \n    return batch;\n  }\n\n  /**\n   *\n   * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned\n   * smart contract abstraction will leverage the wallet provider to make smart contract calls\n   *\n   * @param address Smart contract address\n   */\n  async at<T extends ContractAbstraction<Wallet>>(address: string, contractAbstractionComposer: (abs: ContractAbstraction<Wallet>, context: Context) => T = x => x as any): Promise<T> {\n    const script = await this.context.rpc.getScript(address);\n    const entrypoints = await this.context.rpc.getEntrypoints(address);\n    const blockHeader = await this.context.rpc.getBlockHeader();\n    const chainId = blockHeader.chain_id;\n    const abs = new ContractAbstraction(address, script, this, this.context.contract, entrypoints, chainId);\n    return contractAbstractionComposer(abs, this.context);\n  }\n}","import { Context } from '../context';\nimport { attachKind, OpKind } from '../operations/types';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\nimport { WalletParamsWithKind } from './wallet';\n\nexport class LegacyWalletProvider implements WalletProvider {\n  constructor(private context: Context) {}\n\n  async getPKH(): Promise<string> {\n    return this.context.signer.publicKeyHash();\n  }\n\n  async mapTransferParamsToWalletParams(params: WalletTransferParams) {\n    return attachKind(params, OpKind.TRANSACTION);\n  }\n\n  async mapOriginateParamsToWalletParams(params: WalletOriginateParams) {\n    return attachKind(params, OpKind.ORIGINATION);\n  }\n\n  async mapDelegateParamsToWalletParams(params: WalletDelegateParams) {\n    return attachKind(params, OpKind.DELEGATION);\n  }\n\n  async sendOperations(params: WalletParamsWithKind[]) {\n    const op = await this.context.batch.batch(params as any).send();\n    return op.hash;\n  }\n}\n","import { MichelsonV1Expression } from '@taquito/rpc';\nimport { Contract, ContractAbstraction, WalletContract } from './contract';\nimport { TezosOperationError } from '../operations/operation-errors';\nimport { ContractProvider } from './interface';\nimport { Wallet } from '../wallet';\n\nexport default class LambdaView {\n  public readonly voidLambda: Object;\n\n  constructor(\n    private lambdaContract: Contract | WalletContract,\n    private viewContract: ContractAbstraction< ContractProvider | Wallet > ,\n    public readonly viewMethod: string = 'default',\n    private contractParameter: MichelsonV1Expression = { prim: 'Unit' }\n  ) {\n    this.voidLambda = this.createVoidLambda();\n  }\n\n  async execute(): Promise<any> {\n    try {\n      await this.lambdaContract.methods.default(this.voidLambda).send();\n    } catch (ex) {\n      if (ex instanceof TezosOperationError) {\n        const lastError: any = ex.errors[ex.errors.length - 1];\n\n        const failedWith = lastError.with;\n        return failedWith;\n      } else { \n        throw ex;\n      }\n    }\n  }\n\n  private createVoidLambda(): Object {\n    const [parameter, callback] = this.getView();\n\n    let contractArgs: MichelsonV1Expression[] = [\n      {\n        prim: 'pair',\n        args: [parameter, { prim: 'contract', args: [callback] }],\n      },\n    ];\n\n    if (this.viewMethod === 'default') {\n      contractArgs = ([{ string: '%default' }] as MichelsonV1Expression[]).concat(contractArgs);\n    }\n\n    return [\n      { prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] },\n      { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n      {\n        prim: 'CREATE_CONTRACT',\n        args: [\n          [\n            { prim: 'parameter', args: [callback] },\n            { prim: 'storage', args: [{ prim: 'unit' }] },\n            {\n              prim: 'code',\n              args: [[{ prim: 'CAR' }, { prim: 'FAILWITH' }]],\n            },\n          ],\n        ],\n      },\n      {\n        prim: 'DIP',\n        args: [\n          [\n            {\n              prim: 'DIP',\n              args: [\n                [\n                  {\n                    prim: 'LAMBDA',\n                    args: [\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'address' }, { prim: 'unit' }],\n                      },\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n                      },\n                      [\n                        { prim: 'CAR' },\n                        { prim: 'CONTRACT', args: [callback] },\n                        {\n                          prim: 'IF_NONE',\n                          args: [\n                            [\n                              {\n                                prim: 'PUSH',\n                                args: [{ prim: 'string' }, { string: `Callback type unmatched` }],\n                              },\n                              { prim: 'FAILWITH' },\n                            ],\n                            [],\n                          ],\n                        },\n                        {\n                          prim: 'PUSH',\n                          args: [parameter, this.contractParameter],\n                        },\n                        { prim: 'PAIR' },\n                        {\n                          prim: 'DIP',\n                          args: [\n                            [\n                              {\n                                prim: 'PUSH',\n                                args: [\n                                  { prim: 'address' },\n                                  { string: `${this.viewContract.address}%${this.viewMethod}` },\n                                ],\n                              },\n                              { prim: 'DUP' },\n                              { prim: 'CONTRACT', args: contractArgs },\n                              {\n                                prim: 'IF_NONE',\n                                args: [\n                                  [\n                                    {\n                                      prim: 'PUSH',\n                                      args: [\n                                        { prim: 'string' },\n                                        { string: `Contract does not exist` },\n                                      ],\n                                    },\n                                    { prim: 'FAILWITH' },\n                                  ],\n                                  [{ prim: 'DIP', args: [[{ prim: 'DROP' }]] }],\n                                ],\n                              },\n                              {\n                                prim: 'PUSH',\n                                args: [{ prim: 'mutez' }, { int: '0' }],\n                              },\n                            ],\n                          ],\n                        },\n                        { prim: 'TRANSFER_TOKENS' },\n                        {\n                          prim: 'DIP',\n                          args: [[{ prim: 'NIL', args: [{ prim: 'operation' }] }]],\n                        },\n                        { prim: 'CONS' },\n                        { prim: 'DIP', args: [[{ prim: 'UNIT' }]] },\n                        { prim: 'PAIR' },\n                      ],\n                    ],\n                  },\n                ],\n              ],\n            },\n            { prim: 'APPLY' },\n            {\n              prim: 'DIP',\n              args: [\n                [\n                  {\n                    prim: 'PUSH',\n                    args: [{ prim: 'address' }, { string: this.lambdaContract.address }],\n                  },\n                  { prim: 'DUP' },\n                  {\n                    prim: 'CONTRACT',\n                    args: [\n                      {\n                        prim: 'lambda',\n                        args: [\n                          { prim: 'unit' },\n                          {\n                            prim: 'pair',\n                            args: [\n                              { prim: 'list', args: [{ prim: 'operation' }] },\n                              { prim: 'unit' },\n                            ],\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  {\n                    prim: 'IF_NONE',\n                    args: [\n                      [\n                        {\n                          prim: 'PUSH',\n                          args: [{ prim: 'string' }, { string: `Contract does not exists` }],\n                        },\n                        { prim: 'FAILWITH' },\n                      ],\n                      [{ prim: 'DIP', args: [[{ prim: 'DROP' }]] }],\n                    ],\n                  },\n                  { prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] },\n                ],\n              ],\n            },\n            { prim: 'TRANSFER_TOKENS' },\n            {\n              prim: 'DIP',\n              args: [[{ prim: 'NIL', args: [{ prim: 'operation' }] }]],\n            },\n            { prim: 'CONS' },\n          ],\n        ],\n      },\n      { prim: 'CONS' },\n      { prim: 'DIP', args: [[{ prim: 'UNIT' }]] },\n      { prim: 'PAIR' },\n    ];\n  }\n\n  private getView(): [MichelsonV1Expression, MichelsonV1Expression] {\n    const entrypoints = this.viewContract.entrypoints.entrypoints;\n    const entrypoint = entrypoints[this.viewMethod] as MichelsonV1Expression;\n\n    if (!entrypoint) {\n      throw Error(\n        `Contract at ${this.viewContract.address} does not have entrypoint: ${this.viewMethod}`\n      );\n    }\n\n    if (!('prim' in entrypoint) || !entrypoint.args) {\n      // TODO: Enhance this error message to be more descriptive\n      throw Error('Entrypoint args undefined');\n    }\n\n    const args = Array.from(entrypoint.args) as [MichelsonV1Expression, MichelsonV1Expression];\n    const [parameter, callbackContract] = args;\n    if( 'annots' in parameter ) {\n      delete parameter['annots']\n    }\n\n    if (!('prim' in callbackContract) || !callbackContract.args) {\n      // TODO: Enhance this error message to be more descriptive\n      throw Error('Callback contract args undefined');\n    }\n\n    let message;\n    if (entrypoint.prim !== 'pair') {\n      message = `Expected {'prim': 'pair', ..} but found {'prim': ${entrypoint.prim}, ..}`;\n    } else if (args.length !== 2) {\n      message = `Expected an Array of length 2, but found: ${args}`;\n    } else if (callbackContract.prim !== 'contract') {\n      message = `Expected a {prim: 'contract', ...}, but found: ${callbackContract.prim}`;\n    } else if (callbackContract.args && callbackContract.args.length !== 1) {\n      message = `Expected a single argument to 'contract', but found: ${callbackContract.args}`;\n    }\n\n    if (message) throw Error(message);\n\n    return [parameter, callbackContract.args[0]] as [MichelsonV1Expression, MichelsonV1Expression];\n  }\n}\n","import { ParameterSchema, Schema } from '@taquito/michelson-encoder';\nimport { EntrypointsResponse, ScriptResponse } from '@taquito/rpc';\nimport { ChainIds, DefaultLambdaAddresses } from '../constants';\nimport { TransactionOperation } from '../operations/transaction-operation';\nimport { TransferParams } from '../operations/types';\nimport { TransactionWalletOperation, Wallet } from '../wallet';\nimport { InvalidParameterError, UndefinedLambdaContractError } from './errors';\nimport { ContractProvider, StorageProvider } from './interface';\nimport LambdaView from './lambda-view';\n\ninterface SendParams {\n  fee?: number;\n  storageLimit?: number;\n  gasLimit?: number;\n  amount: number;\n  source?: string;\n  mutez?: boolean;\n}\n\n// Ensure that all parameter that are not in SendParams are defined\ntype ExplicitTransferParams = Required<Omit<TransferParams, keyof SendParams>> & SendParams;\n\nconst DEFAULT_SMART_CONTRACT_METHOD_NAME = 'default';\n\n/**\n * @description Utility class to send smart contract operation\n */\nexport class ContractMethod<T extends ContractProvider | Wallet> {\n  constructor(\n    private provider: T,\n    private address: string,\n    private parameterSchema: ParameterSchema,\n    private name: string,\n    private args: any[],\n    private isMultipleEntrypoint = true,\n    private isAnonymous = false\n  ) { }\n\n  /**\n   * @description Get the schema of the smart contract method\n   */\n  get schema() {\n    return this.isAnonymous\n      ? this.parameterSchema.ExtractSchema()[this.name]\n      : this.parameterSchema.ExtractSchema();\n  }\n\n  /**\n   *\n   * @description Send the smart contract operation\n   *\n   * @param Options generic operation parameter\n   */\n  send(\n    params: Partial<SendParams> = {}\n  ): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation> {\n    if (this.provider instanceof Wallet) {\n      // TODO got around TS2352: Conversion of type 'T & Wallet' to type 'Wallet' by adding `as unknown`. Needs clarification\n      return (this.provider as unknown as Wallet).transfer(this.toTransferParams(params)).send() as any;\n    } else {\n      return this.provider.transfer(this.toTransferParams(params)) as any;\n    }\n  }\n\n  /**\n   *\n   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n   *\n   * @param Options generic transfer operation parameters\n   */\n  toTransferParams({\n    fee,\n    gasLimit,\n    storageLimit,\n    source,\n    amount = 0,\n    mutez = false,\n  }: Partial<SendParams> = {}): TransferParams {\n    const fullTransferParams: ExplicitTransferParams = {\n      to: this.address,\n      amount,\n      fee,\n      mutez,\n      source,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : 'default',\n        value: this.isAnonymous\n          ? this.parameterSchema.Encode(this.name, ...this.args)\n          : this.parameterSchema.Encode(...this.args),\n      },\n    };\n    return fullTransferParams;\n  }\n}\n\n/**\n * @description Utility class to retrieve data from a smart contract's storage without incurring fees via a contract's view method\n */\nexport class ContractView {\n  constructor(\n    private currentContract: ContractAbstraction<ContractProvider | Wallet>,\n    private provider: ContractProvider,\n    private name: string,\n    private chainId: string,\n    private callbackParametersSchema: ParameterSchema,\n    private parameterSchema: ParameterSchema,\n    private args: any[]\n  ) { }\n\n  /**\n   *\n   * @description Find which lambda contract to use based on the current network, \n   * encode parameters to Michelson, \n   * create an instance of Lambdaview to retrive data, and\n   * Decode Michelson response \n   *\n   * @param Options Address of a lambda contract (sandbox users)\n   */\n  async read(customLambdaAddress?: string) {\n\n    let lambdaAddress;\n\n    // TODO Verify if the 'customLambdaAdress' is a valid originated contract and if not, return an appropriate error message. \n    if (customLambdaAddress) {\n      lambdaAddress = customLambdaAddress\n    } else if (this.chainId === ChainIds.CARTHAGENET) {\n      lambdaAddress = DefaultLambdaAddresses.CARTHAGENET\n    } else if (this.chainId === ChainIds.DELPHINET) {\n      lambdaAddress = DefaultLambdaAddresses.DELPHINET\n    } else if (this.chainId === ChainIds.EDONET) {\n      lambdaAddress = DefaultLambdaAddresses.EDONET\n    } else if (this.chainId === ChainIds.FLORENCENET) {\n      lambdaAddress = DefaultLambdaAddresses.FLORENCENET\n    } else if (this.chainId === ChainIds.MAINNET) {\n      lambdaAddress = DefaultLambdaAddresses.MAINNET\n    } else {\n      throw new UndefinedLambdaContractError()\n    }\n\n    const lambdaContract = await this.provider.at(lambdaAddress);\n    const arg = this.parameterSchema.Encode(...this.args);\n    const lambdaView = new LambdaView(lambdaContract, this.currentContract, this.name, arg);\n    const failedWith = await lambdaView.execute();\n    const response = this.callbackParametersSchema.Execute(failedWith);\n    return response;\n  }\n\n}\n\nconst validateArgs = (args: any[], schema: ParameterSchema, name: string) => {\n  const sigs = schema.ExtractSignatures();\n\n  if (!sigs.find((x: any[]) => x.length === args.length)) {\n    throw new InvalidParameterError(name, sigs, args);\n  }\n};\n\nconst isView = (schema: ParameterSchema): boolean => {\n  let isView = false;\n  const sigs = schema.ExtractSignatures();\n  if ((sigs[0][sigs[0].length - 1] === 'contract')) {\n    isView = true;\n  }\n  return isView;\n};\n\nexport type Contract = ContractAbstraction<ContractProvider>;\nexport type WalletContract = ContractAbstraction<Wallet>;\n\nconst isContractProvider = (variableToCheck: any): variableToCheck is ContractProvider =>\n  variableToCheck.contractProviderTypeSymbol !== undefined;\n\n/**\n * @description Smart contract abstraction\n */\nexport class ContractAbstraction<T extends ContractProvider | Wallet> {\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methods: { [key: string]: (...args: any[]) => ContractMethod<T> } = {};\n\n  public views: { [key: string]: (...args: any[]) => ContractView } = {};\n\n  public readonly schema: Schema;\n\n  public readonly parameterSchema: ParameterSchema;\n\n  constructor(\n    public readonly address: string,\n    public readonly script: ScriptResponse,\n    provider: T,\n    private storageProvider: StorageProvider,\n    public readonly entrypoints: EntrypointsResponse,\n    private chainId: string\n  ) {\n    this.schema = Schema.fromRPCResponse({ script: this.script });\n    this.parameterSchema = ParameterSchema.fromRPCResponse({ script: this.script });\n    this._initializeMethods(this, address, provider, this.entrypoints.entrypoints, this.chainId);\n  }\n\n  private _initializeMethods(\n    currentContract: ContractAbstraction<T>,\n    address: string,\n    provider: T,\n    entrypoints: {\n      [key: string]: object;\n    },\n    chainId: string\n  ) {\n    const parameterSchema = this.parameterSchema;\n    const keys = Object.keys(entrypoints);\n    if (parameterSchema.isMultipleEntryPoint) {\n      keys.forEach(smartContractMethodName => {\n        const smartContractMethodSchema = new ParameterSchema(\n          entrypoints[smartContractMethodName]\n        );\n        const method = function (...args: any[]) {\n\n          validateArgs(args, smartContractMethodSchema, smartContractMethodName);\n\n          return new ContractMethod<T>(\n            provider,\n            address,\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n        this.methods[smartContractMethodName] = method;\n\n        if (isContractProvider(provider)) {\n          if (isView(smartContractMethodSchema)) {\n            const view = function (...args: any[]) {\n              const entrypointParamWithoutCallback = (entrypoints[smartContractMethodName] as any).args[0];\n              const smartContractMethodSchemaWithoutCallback = new ParameterSchema(\n                entrypointParamWithoutCallback\n              );\n              const parametersCallback = (entrypoints[smartContractMethodName] as any).args[1].args[0];\n              const smartContractMethodCallbackSchema = new ParameterSchema(\n                parametersCallback\n              );\n\n              validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);\n              return new ContractView(\n                currentContract,\n                provider,\n                smartContractMethodName,\n                chainId,\n                smartContractMethodCallbackSchema,\n                smartContractMethodSchemaWithoutCallback,\n                args\n              );\n            };\n            this.views[smartContractMethodName] = view;\n          }\n        }\n\n      });\n\n      // Deal with methods with no annotations which were not discovered by the RPC endpoint\n      // Methods with no annotations are discovered using parameter schema\n      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter(\n        key => Object.keys(entrypoints).indexOf(key) === -1\n      );\n\n      anonymousMethods.forEach(smartContractMethodName => {\n        const method = function (...args: any[]) {\n          validateArgs(\n            [smartContractMethodName, ...args],\n            parameterSchema,\n            smartContractMethodName\n          );\n          return new ContractMethod<T>(\n            provider,\n            address,\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n        this.methods[smartContractMethodName] = method;\n      });\n    } else {\n      const smartContractMethodSchema = this.parameterSchema;\n      const method = function (...args: any[]) {\n        validateArgs(args, parameterSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME);\n        return new ContractMethod<T>(\n          provider,\n          address,\n          smartContractMethodSchema,\n          DEFAULT_SMART_CONTRACT_METHOD_NAME,\n          args,\n          false\n        );\n      };\n      this.methods[DEFAULT_SMART_CONTRACT_METHOD_NAME] = method;\n    }\n  }\n\n  /**\n   * @description Return a friendly representation of the smart contract storage\n   */\n  public storage<T>() {\n    return this.storageProvider.getStorage<T>(this.address, this.schema);\n  }\n\n  /**\n   *\n   * @description Return a friendly representation of the smart contract big map value\n   *\n   * @param key BigMap key to fetch\n   *\n   * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  public bigMap(key: string) {\n    // tslint:disable-next-line: deprecation\n    return this.storageProvider.getBigMapKey(this.address, key, this.schema);\n  }\n}\n","import { Schema, BigMapKeyType } from '@taquito/michelson-encoder';\nimport BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\nimport { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\n\nexport class BigMapAbstraction {\n  constructor(private id: BigNumber, private schema: Schema, private provider: ContractProvider) {}\n\n  /**\n   *\n   * @description Fetch one value in a big map\n   * \n   * @param keysToEncode Key to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from (head will be use by default)\n   * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map\n   *\n   */\n  async get<T>(keyToEncode: BigMapKeyType , block?: number) {\n    try {\n      const id = await this.provider.getBigMapKeyByID<T>(this.id.toString(), keyToEncode, this.schema, block);\n      return id;\n    } catch (e) {\n      if (e instanceof HttpResponseError && e.status === STATUS_CODE.NOT_FOUND) {\n        return undefined;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it. \n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getMultipleValues<T>(keysToEncode: Array<BigMapKeyType>, block?: number, batchSize: number = 5) {\n    return this.provider.getBigMapKeysByID<T>(this.id.toString(), keysToEncode, this.schema, block, batchSize);\n  }\n\n  toJSON() {\n    return this.id.toString();\n  }\n\n  toString() {\n    return this.id.toString();\n  }\n}\n","import { Schema, Semantic } from '@taquito/michelson-encoder';\nimport { BigMapAbstraction } from './big-map';\nimport { ContractProvider } from './interface';\nimport BigNumber from 'bignumber.js';\nimport { MichelsonV1Expression } from '@taquito/rpc';\n\n// Override the default michelson encoder semantic to provide richer abstraction over storage properties\nexport const smartContractAbstractionSemantic: (p: ContractProvider) => Semantic = (\n  provider: ContractProvider\n) => ({\n  // Provide a specific abstraction for BigMaps\n  big_map: (val: MichelsonV1Expression, code: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing big map ID\n      return {};\n    } else {\n      const schema = new Schema(code);\n      return new BigMapAbstraction(new BigNumber(val.int), schema, provider);\n    }\n  },\n  /*\n  // TODO: embed useful other abstractions\n  'contract':  () => {},\n  'address':  () => {}\n  */\n});\n","import { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport { BigMapKeyType, MichelsonMap, MichelsonMapKey, Schema } from '@taquito/michelson-encoder';\nimport { OpKind, ScriptResponse } from '@taquito/rpc';\nimport { encodeExpr } from '@taquito/utils';\nimport { OperationBatch } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { DelegateOperation } from '../operations/delegate-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { OriginationOperation } from '../operations/origination-operation';\nimport { RevealOperation } from '../operations/reveal-operation';\nimport { TransactionOperation } from '../operations/transaction-operation';\nimport {\n  DelegateParams,\n  isOpRequireReveal,\n  OriginateParams,\n  ParamsWithKind,\n  RegisterDelegateParams,\n  RevealParams,\n  RPCOperation,\n  TransferParams,\n  withKind,\n} from '../operations/types';\nimport { ContractAbstraction } from './contract';\nimport { InvalidDelegationSource } from './errors';\nimport { ContractProvider, ContractSchema, EstimationProvider, StorageProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from './prepare';\nimport { smartContractAbstractionSemantic } from './semantic';\n\nexport class RpcContractProvider extends OperationEmitter\n  implements ContractProvider, StorageProvider {\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n  contractProviderTypeSymbol = Symbol.for('taquito--provider-type-symbol');\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getStorage<T>(contract: string, schema?: ContractSchema): Promise<T> {\n    if (!schema) {\n      schema = await this.rpc.getScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema)) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const storage = await this.rpc.getStorage(contract);\n\n    return contractSchema.Execute(storage, smartContractAbstractionSemantic(this)) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract big map storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param key contract big map key to fetch value from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  async getBigMapKey<T>(contract: string, key: string, schema?: ContractSchema): Promise<T> {\n    if (!schema) {\n      schema = await this.rpc.getScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema)) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const encodedKey = contractSchema.EncodeBigMapKey(key);\n\n    // tslint:disable-next-line: deprecation\n    const val = await this.rpc.getBigMapKey(contract, encodedKey);\n\n    return contractSchema.ExecuteOnBigMapValue(val) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a big map value\n   *\n   * @param id Big Map ID\n   * @param keyToEncode key to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapKeyByID<T>(id: string, keyToEncode: BigMapKeyType, schema: Schema, block?: number): Promise<T> {\n    const { key, type } = schema.EncodeBigMapKey(keyToEncode);\n    const { packed } = await this.context.packer.packData({ data: key, type });\n\n    const encodedExpr = encodeExpr(packed);\n\n    const bigMapValue = block? await this.context.rpc.getBigMapExpr(id.toString(), encodedExpr, { block: String(block) }) : await this.context.rpc.getBigMapExpr(id.toString(), encodedExpr);\n\n    return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this)) as T;\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it. \n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param id Big Map ID\n   * @param keys Array of keys to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getBigMapKeysByID<T>(id: string, keys: Array<BigMapKeyType>, schema: Schema, block?: number, batchSize: number = 5): Promise<MichelsonMap<MichelsonMapKey, T | undefined>> {\n    const level = await this.getBlockForRequest(keys, block)\n    const bigMapValues = new MichelsonMap<MichelsonMapKey, T | undefined>();\n\n    // Execute batch of promises in series\n    let position = 0;\n    let results: Array<(T | undefined)> = [];\n\n    while (position < keys.length) {\n      const keysBatch = keys.slice(position, position + batchSize);\n      const batch = keysBatch.map((keyToEncode) => this.getBigMapValueOrUndefined<T>(keyToEncode, id, schema, level))\n      results = [...results, ...await Promise.all(batch)]\n      position += batchSize;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      bigMapValues.set(keys[i], results[i]);\n    }\n\n    return bigMapValues;\n  }\n\n  private async getBlockForRequest(keys: Array<BigMapKeyType>, block?: number) {\n    return keys.length === 1 || typeof block !== 'undefined' ? block : (await this.rpc.getBlock())?.header.level\n  }\n\n  private async getBigMapValueOrUndefined<T>(keyToEncode: BigMapKeyType, id: string, schema: Schema, level?: number) {\n    try {\n      return await this.getBigMapKeyByID<T>(id, keyToEncode, schema, level);\n    } catch (ex) {\n      if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {\n        return\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n  private async addRevealOperationIfNeeded(operation: RPCOperation, publicKeyHash: string){\n    if(isOpRequireReveal(operation)){\n      const ops: RPCOperation[] = [operation];\n      const publicKey = await this.signer.publicKey();\n      const estimateReveal = await this.estimator.reveal();\n      if(estimateReveal){\n        const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL };\n        const estimatedReveal = await this.estimate(reveal, async () => estimateReveal);\n        ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey));\n        return ops;\n      }\n    }\n    return operation;\n  }\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate(params: OriginateParams) {\n    const estimate = await this.estimate(params, this.estimator.originate.bind(this.estimator));\n\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n      ...params,\n      ...estimate,\n    }));\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const preparedOrigination = await this.prepareOperation({ operation: ops, source: publicKeyHash });\n    const forgedOrigination = await this.forge(preparedOrigination);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(forgedOrigination);\n    return new OriginationOperation(hash, operation, forgedBytes, opResponse, context, this);\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param SetDelegate operation parameter\n   */\n  async setDelegate(params: DelegateParams) {\n    // Since babylon delegation source cannot smart contract\n    if (/kt1/i.test(params.source)) {\n      throw new InvalidDelegationSource(params.source);\n    }\n\n    const estimate = await this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n    const publicKeyHash = await this.signer.publicKeyHash()\n    const operation = await createSetDelegateOperation({ ...params, ...estimate });\n    const sourceOrDefault = params.source || publicKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source: sourceOrDefault,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(\n      hash,\n      operation,\n      sourceOrDefault,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RegisterDelegate operation parameter\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerDelegate.bind(this.estimator)\n    );\n    const source = await this.signer.publicKeyHash();\n    const operation = await createRegisterDelegateOperation({ ...params, ...estimate }, source);\n    const ops = await this.addRevealOperationIfNeeded(operation, source);\n    const prepared = await this.prepareOperation({ operation: ops });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param Transfer operation parameter\n   */\n  async transfer(params: TransferParams) {\n    const publickKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(params, this.estimator.transfer.bind(this.estimator));\n    const operation = await createTransferOperation({\n      ...params,\n      ...estimate,\n    });\n    const source = params.source || publickKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publickKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: params.source });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TransactionOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Reveal the current address. Will throw an error if the address is already revealed.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RevealParams operation parameter\n   */\n  async reveal(params: RevealParams){\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const estimateReveal = await this.estimator.reveal(params);\n    if(estimateReveal){\n      const estimated = await this.estimate(params, async () => estimateReveal);\n      const operation = await createRevealOperation({\n        ...estimated,\n      }, publicKeyHash, await this.signer.publicKey());\n      const prepared = await this.prepareOperation({ operation, source: publicKeyHash });\n      const opBytes = await this.forge(prepared);\n      const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n      return new RevealOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n    } else {\n      throw new Error('The current address is already revealed.')\n    }\n  }\n\n  async at<T extends ContractAbstraction<ContractProvider>>(address: string, contractAbstractionComposer: ContractAbstractionComposer<T> = x => x as any): Promise<T> {\n    const script = await this.rpc.getScript(address);\n    const entrypoints = await this.rpc.getEntrypoints(address);\n    const blockHeader = await this.rpc.getBlockHeader();\n    const chainId = blockHeader.chain_id;\n    const abs = new ContractAbstraction(address, script, this, this, entrypoints, chainId);\n    return contractAbstractionComposer(abs, this.context);\n  }\n\n  /**\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @returns A batch object from which we can add more operation or send a command to execute the batch\n   * \n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n\n}\n\ntype ContractAbstractionComposer<T> = (abs: ContractAbstraction<ContractProvider>, context: Context) => T\n","import { Context } from '../context';\nimport { ParserProvider } from './interface';\nimport { Expr, Parser, Prim } from '@taquito/michel-codec';\nimport { Protocols } from '../constants';\nimport { OriginateParams } from '../operations/types';\nimport { InvalidInitParameter, InvalidCodeParameter } from '../contract/errors';\n\nexport class MichelCodecParser implements ParserProvider {\n    constructor(private context: Context) { }\n\n    private async getNextProto() {\n        const { next_protocol } = await this.context.rpc.getBlockMetadata();\n        return next_protocol as Protocols;\n    }\n\n    async parseScript(src: string): Promise<Expr[] | null> {\n        const parser = new Parser({ protocol: await this.getNextProto() });\n        return parser.parseScript(src);\n    }\n\n    async parseMichelineExpression(src: string): Promise<Expr | null> {\n        const parser = new Parser({ protocol: await this.getNextProto() });\n        return parser.parseMichelineExpression(src);\n    }\n\n    async parseJSON(src: object): Promise<Expr> {\n        const parser = new Parser({ protocol: await this.getNextProto() });\n        return parser.parseJSON(src);\n    }\n\n    async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n        const parsedParams = params;\n        parsedParams.code = await this.formatCodeParam(params.code);\n        if (params.init) {\n            parsedParams.init = await this.formatInitParam(params.init);\n        }\n        return parsedParams;\n    }\n\n    private async formatCodeParam(code: string | object[]) {\n        let parsedCode: Expr[];\n        if (typeof code === 'string') {\n            const c = await this.parseScript(code);\n            if (c === null) {\n                throw new InvalidCodeParameter('Invalid code parameter', code);\n            }\n            parsedCode = c;\n        } else {\n            const c = await this.parseJSON(code);\n            const order = ['parameter', 'storage', 'code'];\n            // Ensure correct ordering for RPC\n            parsedCode = (c as Prim[]).sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));\n        }\n        return parsedCode;\n    }\n\n    private async formatInitParam(init: string | object) {\n        let parsedInit: Expr;\n        if (typeof init === 'string') {\n            const c = await this.parseMichelineExpression(init);\n            if (c === null) {\n                throw new InvalidInitParameter('Invalid init parameter', init);\n            }\n            parsedInit = c;\n        } else {\n            parsedInit = await this.parseJSON(init);\n        }\n        return parsedInit;\n    }\n}\n","import { Packer } from './interface';\nimport { Context } from '../context';\nimport { PackDataParams, PackDataResponse } from '@taquito/rpc';\n\nexport class RpcPacker implements Packer {\n  constructor(private context: Context) {}\n  \n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    return this.context.rpc.packData(data);\n  }\n}\n","import { RpcClient } from '@taquito/rpc';\nimport { Protocols } from './constants';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { Injector } from './injector/interface';\nimport { RpcInjector } from './injector/rpc-injector';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { OperationFactory } from './wallet/operation-factory';\nimport { RpcTzProvider } from './tz/rpc-tz-provider';\nimport { RPCEstimateProvider } from './contract/rpc-estimate-provider';\nimport { RpcContractProvider } from './contract/rpc-contract-provider';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\n\nimport { Wallet, LegacyWalletProvider, WalletProvider } from './wallet';\nimport { ParserProvider } from './parser/interface';\nimport { MichelCodecParser } from './parser/michel-codec-parser';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport BigNumber from 'bignumber.js';\nimport { retry } from 'rxjs/operators';\nimport { OperatorFunction } from 'rxjs';\n\nexport interface TaquitoProvider<T, K extends Array<any>> {\n  new (context: Context, ...rest: K): T;\n}\n\n// The shouldObservableSubscriptionRetrythe parameter is related to the observable in ObservableSubsription class. \n// When set to true, the observable won't die when getBlock rpc call fails; the error will be reported via the error callback, \n// and it will continue to poll for new blocks.\nexport interface Config {\n  confirmationPollingIntervalSecond?: number;\n  confirmationPollingTimeoutSecond?: number;\n  defaultConfirmationCount?: number;\n  shouldObservableSubscriptionRetry?: boolean;\n  observableSubscriptionRetryFunction?: OperatorFunction<any,any>;\n}\n\nexport const defaultConfig: Partial<Config> = {\n  defaultConfirmationCount: 1,\n  confirmationPollingTimeoutSecond: 180,\n  shouldObservableSubscriptionRetry: false,\n  observableSubscriptionRetryFunction: retry()\n};\n\n/**\n * @description Encapsulate common service used throughout different part of the library\n */\nexport class Context {\n  private _rpcClient: RpcClient;\n  private _forger: Forger;\n  private _parser: ParserProvider;\n  private _injector: Injector;\n  private _walletProvider: WalletProvider;\n  public readonly operationFactory: OperationFactory;\n  private _packer: Packer;\n\n  public readonly tz = new RpcTzProvider(this);\n  public readonly estimate = new RPCEstimateProvider(this);\n  public readonly contract = new RpcContractProvider(this, this.estimate);\n  public readonly batch = new RPCBatchProvider(this, this.estimate);\n  public readonly wallet = new Wallet(this);\n\n  constructor(\n    private _rpc: RpcClient | string,\n    private _signer: Signer = new NoopSigner(),\n    private _proto?: Protocols,\n    private _config?: Partial<Config>,\n    forger?: Forger,\n    injector?: Injector,\n    packer?: Packer,\n    wallet?: WalletProvider,\n    parser?: ParserProvider,\n  ) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this.config = _config as any;\n    this._forger = forger ? forger : new RpcForger(this);\n    this._injector = injector ? injector : new RpcInjector(this);\n    this.operationFactory = new OperationFactory(this);\n    this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);\n    this._parser = parser? parser: new MichelCodecParser(this);\n    this._packer = packer? packer: new RpcPacker(this);\n  }\n\n  get config(): Partial<Config> {\n    return this._config as any;\n  }\n\n  set config(value: Partial<Config>) {\n    this._config = {\n      ...defaultConfig,\n      ...value,\n    };\n  }\n\n  get rpc(): RpcClient {\n    return this._rpcClient;\n  }\n\n  set rpc(value: RpcClient) {\n    this._rpcClient = value;\n  }\n\n  get injector() {\n    return this._injector;\n  }\n\n  set injector(value: Injector) {\n    this._injector = value;\n  }\n\n  get forger() {\n    return this._forger;\n  }\n\n  set forger(value: Forger) {\n    this._forger = value;\n  }\n\n  get signer() {\n    return this._signer;\n  }\n\n  get walletProvider() {\n    return this._walletProvider;\n  }\n\n  set walletProvider(value: WalletProvider) {\n    this._walletProvider = value;\n  }\n\n  set signer(value: Signer) {\n    this._signer = value;\n  }\n\n  set proto(value: Protocols | undefined) {\n    this._proto = value;\n  }\n\n  get proto() {\n    return this._proto;\n  }\n\n  get parser() {\n    return this._parser;\n  }\n\n  set parser(value: ParserProvider) {\n    this._parser = value;\n  }\n\n  get packer() {\n    return this._packer;\n  }\n\n  set packer(value: Packer) {\n    this._packer = value;\n  }\n\n  async isAnyProtocolActive(protocol: string[] = []) {\n    if (this._proto) {\n      return protocol.includes(this._proto);\n    } else {\n      const { next_protocol } = await this.rpc.getBlockMetadata();\n      return protocol.includes(next_protocol);\n    }\n  }\n\n  async getConfirmationPollingInterval() {\n    try {\n      const constants = await this.rpc.getConstants();\n      let confirmationPollingInterval = BigNumber.sum(constants.time_between_blocks[0], \n        new BigNumber(constants.delay_per_missing_endorsement!)\n        .multipliedBy(Math.max(0, constants.initial_endorsers! - constants.endorsers_per_block))\n      );\n      \n      // Divide the polling interval by a constant 3\n      // to improvise for polling time to work in prod,\n      // testnet and sandbox enviornment.   \n      confirmationPollingInterval = confirmationPollingInterval.dividedBy(3);  \n      this.config.confirmationPollingIntervalSecond = confirmationPollingInterval.toNumber();\n      return this.config.confirmationPollingIntervalSecond;\n    } catch (exception) {\n      // Return default value if there is\n      // an issue returning from constants\n      // file.\n      return 10;\n    }\n  }\n  \n  /**\n   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\n   */\n  clone(): Context {\n    return new Context(this.rpc, this.signer, this.proto, this.config, this.forger, this._injector, this.packer);\n  }\n}\n","import { OpFilter, FilterExpression, Filter, OpHashFilter, SourceFilter, KindFilter, DestinationFilter, OperationContent } from './interface';\n\nconst opHashFilter = (op: OperationContent, filter: OpHashFilter) => op.hash === filter.opHash;\n\nconst sourceFilter = (x: OperationContent, filter: SourceFilter) => {\n  switch (x.kind) {\n    case 'endorsement':\n      return 'metadata' in x && x.metadata.delegate === filter.source\n    case 'activate_account':\n      return 'metadata' in x && x.pkh === filter.source\n    default:\n      return 'source' in x && x.source === filter.source\n  }\n}\n\nconst kindFilter = (x: OperationContent, filter: KindFilter) => 'kind' in x && x.kind === filter.kind;\n\nconst destinationFilter = (x: OperationContent, filter: DestinationFilter) => {\n  switch (x.kind) {\n    case 'delegation':\n      return x.delegate === filter.destination;\n    case 'origination':\n      if (\n        'metadata' in x &&\n        'operation_result' in x.metadata &&\n        'originated_contracts' in x.metadata.operation_result &&\n        Array.isArray(x.metadata.operation_result.originated_contracts)\n      ) {\n        return x.metadata.operation_result.originated_contracts.some(\n          contract => contract === filter.destination\n        );\n      }\n      break;\n    case 'transaction':\n      return x.destination === filter.destination;\n    default:\n      return false;\n  }\n};\n\nexport const evaluateOpFilter = (op: OperationContent, filter: OpFilter) => {\n  if ('opHash' in filter) {\n    return opHashFilter(op, filter);\n  } else if ('source' in filter) {\n    return sourceFilter(op, filter)\n  } else if ('kind' in filter) {\n    return kindFilter(op, filter);\n  } else if ('destination' in filter) {\n    return destinationFilter(op, filter)\n  }\n\n  return false;\n};\n\nexport const evaluateExpression = (op: OperationContent, exp: FilterExpression): boolean => {\n  if (Array.isArray(exp.and)) {\n    return exp.and.every((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else if (Array.isArray(exp.or)) {\n    return exp.or.some((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else {\n    throw new Error('Filter expression must contains either and/or property');\n  }\n};\n\nexport const evaluateFilter = (op: OperationContent, filter: Filter): boolean => {\n  const filters: OpFilter[] | FilterExpression[] = [];\n  if (!Array.isArray(filter)) {\n    filters.push(filter as any);\n  } else {\n    filters.push(...(filter as any));\n  }\n\n  return (filters as any[]).every((filterOrExp: OpFilter | FilterExpression) => {\n    if ('and' in filterOrExp || 'or' in filterOrExp) {\n      return evaluateExpression(op, filterOrExp);\n    } else {\n      return evaluateOpFilter(op, filterOrExp as OpFilter);\n    }\n  });\n};\n","import { Observable, Subscription as RXJSSubscription, Subject, NEVER, OperatorFunction } from 'rxjs';\nimport { Subscription } from './interface';\nimport { takeUntil, tap, catchError, retry } from 'rxjs/operators';\n\nexport class ObservableSubscription<T> implements Subscription<T> {\n  private errorListeners: Array<(error: Error) => void> = [];\n  private messageListeners: Array<(data: T) => void> = [];\n  private closeListeners: Array<() => void> = [];\n  private completed$ = new Subject();\n\n  constructor(obs: Observable<T>, \n              private shouldRetry: boolean = false, \n              private operatorFunction: OperatorFunction<T,T> = retry<T>()) {\n    \n    obs\n      .pipe(\n        takeUntil(this.completed$),\n        tap(\n          (data: T) => {\n            this.call(this.messageListeners, data);\n          },\n          (error) => {\n            this.call(this.errorListeners, error);\n          },\n          () => {\n            this.call(this.closeListeners);\n          }\n        ),\n        this.shouldRetry ? operatorFunction : tap(),\n        catchError(() => NEVER)\n      )\n      .subscribe();\n  }\n\n  private call<K>(listeners: Array<(val: K) => void>, value?: K) {\n    for (const l of listeners) {\n      try {\n        l(value!);\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  private remove(listeners: Array<any>, value: any) {\n    const idx = listeners.indexOf(value);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  }\n\n  public on(type: 'error', cb: (error: Error) => void): void;\n  // tslint:disable-next-line: unified-signatures\n  public on(type: 'data', cb: (data: T) => void): void;\n  public on(type: 'close', cb: () => void): void;\n\n  public on(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.messageListeners.push(cb);\n        break;\n      case 'error':\n        this.errorListeners.push(cb);\n        break;\n      case 'close':\n        this.closeListeners.push(cb);\n        break;\n      default:\n        throw new Error(`Trying to register on an unsupported event: ${type}`);\n    }\n  }\n\n  public off(type: 'error', cb: (error: Error) => void): void;\n  // tslint:disable-next-line: unified-signatures\n  public off(type: 'data', cb: (data: T) => void): void;\n  public off(type: 'close', cb: () => void): void;\n\n  public off(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.remove(this.messageListeners, cb);\n        break;\n      case 'error':\n        this.remove(this.errorListeners, cb);\n        break;\n      case 'close':\n        this.remove(this.closeListeners, cb);\n        break;\n      default:\n        throw new Error(`Trying to unregister on an unsupported event: ${type}`);\n    }\n  }\n\n  public close() {\n    this.completed$.next();\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport { from, Observable, ObservableInput, timer } from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  map,\n  pluck,\n  publishReplay,\n  refCount,\n  switchMap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { evaluateFilter } from './filters';\nimport { Filter, SubscribeProvider, Subscription, OperationContent } from './interface';\nimport { ObservableSubscription } from './observable-subscription';\n\nconst getLastBlock = (context: Context) => {\n  return from(context.rpc.getBlock()).pipe(first());\n};\n\nconst applyFilter = (filter: Filter) =>\n  concatMap<BlockResponse, ObservableInput<OperationContent>>(block => {\n    return new Observable<OperationContent>(sub => {\n      for (const ops of block.operations) {\n        for (const op of ops) {\n          for (const content of op.contents) {\n            if (evaluateFilter({hash: op.hash, ...content}, filter)) {\n              sub.next({hash: op.hash, ...content});\n            }\n          }\n        }\n      }\n      sub.complete();\n    });\n  });\n\nexport class PollingSubscribeProvider implements SubscribeProvider {\n  private newBlock$ = timer(0, this.POLL_INTERVAL).pipe(\n    map(() => this.context),\n    switchMap(getLastBlock),\n    distinctUntilKeyChanged('hash'),\n    publishReplay(),\n    refCount()\n  );\n\n  constructor(private context: Context, public readonly POLL_INTERVAL = 20000) {}\n\n  subscribe(_filter: 'head'): Subscription<string> {\n    return new ObservableSubscription(this.newBlock$.pipe(pluck('hash')), \n                                      this.context.config.shouldObservableSubscriptionRetry,\n                                      this.context.config.observableSubscriptionRetryFunction);\n  }\n\n  subscribeOperation(filter: Filter): Subscription<OperationContent> {\n    return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter)),\n                                      this.context.config.shouldObservableSubscriptionRetry,\n                                      this.context.config.observableSubscriptionRetryFunction);\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"7a156c90cea8b18a3aa9badee33445ab354867e5\",\n    \"version\": \"9.1.0\"\n};\n/* tslint:enable */\n","import { Forger, ForgeParams, ForgeResponse } from './interface';\n\nexport class ForgingMismatchError implements Error {\n  name: string = 'ForgingMismatchError';\n  message: string = 'Forging mismatch error';\n  constructor(public results: string[]) {}\n}\n\nexport class CompositeForger implements Forger {\n  constructor(private forgers: Forger[]) {\n    if (forgers.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n  }\n\n  async forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    const results = await Promise.all(\n      this.forgers.map(forger => {\n        return forger.forge({ branch, contents });\n      })\n    );\n\n    if (results.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n\n    let lastResult: string = results.pop()!; // Assumed to be more than one since we\n    while (results.length) {\n      const currentResult = results.pop()!;\n\n      if (currentResult !== lastResult) {\n        throw new ForgingMismatchError([lastResult, currentResult]);\n      }\n      lastResult = currentResult;\n    }\n\n    return lastResult;\n  }\n}\n","import { OriginateParams } from \"../operations/types\";\nimport { ParserProvider } from \"./interface\";\n\nexport class NoopParser implements ParserProvider {\n    async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n        return params;\n    }\n}","import { Packer } from './interface';\nimport { packDataBytes, MichelsonData, MichelsonType } from '@taquito/michel-codec'\nimport { PackDataResponse, PackDataParams } from '@taquito/rpc';\n\nexport class MichelCodecPacker implements Packer {\n\n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    const { bytes } = packDataBytes(data.data as MichelsonData, data.type as MichelsonType);\n    return { packed: bytes }\n  }\n}\n","/**\n * @packageDocumentation\n * @module @taquito/taquito\n */\n\nimport { RpcClient } from '@taquito/rpc';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\nimport { Protocols } from './constants';\nimport { Config, Context, TaquitoProvider } from './context';\nimport { ContractProvider, EstimationProvider } from './contract/interface';\nimport { Extension } from './extension/extension';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { format } from './format';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { SubscribeProvider } from './subscribe/interface';\nimport { PollingSubscribeProvider } from './subscribe/polling-provider';\nimport { TzProvider } from './tz/interface';\nimport { VERSION } from './version';\nimport { LegacyWalletProvider, Wallet, WalletProvider } from './wallet';\nimport { OperationFactory } from './wallet/operation-factory';\n\nexport { MichelsonMap, UnitValue } from '@taquito/michelson-encoder';\nexport * from './constants';\nexport * from './context';\nexport { TaquitoProvider } from './context';\nexport * from './contract';\nexport * from './contract/big-map';\nexport { CompositeForger } from './forger/composite-forger';\nexport * from './forger/interface';\nexport { RpcForger } from './forger/rpc-forger';\nexport * from './operations';\nexport { OperationBatch } from './batch/rpc-batch-provider';\nexport * from './signer/interface';\nexport * from './subscribe/interface';\nexport { SubscribeProvider } from './subscribe/interface';\nexport { PollingSubscribeProvider } from './subscribe/polling-provider';\nexport * from './tz/interface';\nexport * from './wallet';\nexport { Extension } from './extension/extension';\nexport * from './parser/interface';\nexport * from './parser/michel-codec-parser';\nexport * from './parser/noop-parser';\nexport * from './packer/interface';\nexport * from './packer/michel-codec-packer';\nexport * from './packer/rpc-packer';\n\nexport interface SetProviderOptions {\n  forger?: Forger;\n  wallet?: WalletProvider;\n  rpc?: string | RpcClient;\n  stream?: string | SubscribeProvider;\n  signer?: Signer;\n  protocol?: Protocols;\n  config?: Config;\n  packer?: Packer;\n}\n\nexport interface VersionInfo {\n  commitHash: string;\n  version: string;\n}\n\n/**\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\n *\n * @param _rpc The RPC server to use\n */\nexport class TezosToolkit {\n  private _stream!: SubscribeProvider;\n  private _options: SetProviderOptions = {};\n  private _rpcClient: RpcClient;\n  private _wallet: Wallet;\n  private _context: Context;\n  /**\n   * @deprecated TezosToolkit.batch has been deprecated in favor of TezosToolkit.contract.batch\n   *\n   */\n  public batch: RPCBatchProvider['batch'];\n\n  public readonly format = format;\n\n  constructor(private _rpc: RpcClient | string) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this._context = new Context(_rpc);\n    this._wallet = new Wallet(this._context);\n    this.setProvider({ rpc: this._rpcClient });\n    // tslint:disable-next-line: deprecation\n    this.batch = this._context.batch.batch.bind(this._context.batch);\n  }\n\n  /**\n   * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setProvider({rpc: 'https://api.tez.ie/rpc/mainnet', signer: new InMemorySigner.fromSecretKey(“edsk...”)})\n   * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})\n   *\n   */\n\n  setProvider({\n    rpc,\n    stream,\n    signer,\n    protocol,\n    config,\n    forger,\n    wallet,\n    packer,\n  }: SetProviderOptions) {\n    this.setRpcProvider(rpc);\n    this.setStreamProvider(stream);\n    this.setSignerProvider(signer);\n    this.setForgerProvider(forger);\n    this.setWalletProvider(wallet);\n    this.setPackerProvider(packer);\n\n    this._context.proto = protocol;\n    this._context.config = config as Partial<Config>;\n  }\n\n  /**\n   * @description Sets signer provider on the Tezos Taquito instance.\n   *\n   * @param options signer to use to interact with the Tezos network\n   *\n   * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))\n   *\n   */\n  setSignerProvider(signer?: SetProviderOptions['signer']) {\n    if (!this._options.signer && typeof signer === 'undefined') {\n      this._context.signer = new NoopSigner();\n      this._options.signer = signer;\n    } else if (typeof signer !== 'undefined') {\n      this._context.signer = signer;\n      this._options.signer = signer;\n    }\n  }\n\n  /**\n   * @description Sets rpc provider on the Tezos Taquito instance\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setRpcProvider('https://api.tez.ie/rpc/mainnet')\n   *\n   */\n  setRpcProvider(rpc?: SetProviderOptions['rpc']) {\n    if (typeof rpc === 'string') {\n      this._rpcClient = new RpcClient(rpc);\n    } else if (rpc instanceof RpcClient) {\n      this._rpcClient = rpc;\n    }\n    /*     else if (this._options.rpc === undefined) {\n      this._rpcClient = new RpcClient();\n    } */\n    this._options.rpc = this._rpcClient;\n    this._context.rpc = this._rpcClient;\n  }\n\n  /**\n   * @description Sets forger provider on the Tezos Taquito instance\n   *\n   * @param options forger to use to interact with the Tezos network\n   *\n   * @example Tezos.setForgerProvider(localForger)\n   *\n   */\n  setForgerProvider(forger?: SetProviderOptions['forger']) {\n    const f = typeof forger === 'undefined' ? this.getFactory(RpcForger)() : forger;\n    this._options.forger = f;\n    this._context.forger = f;\n  }\n\n  /**\n   * @description Sets stream provider on the Tezos Taquito instance\n   *\n   * @param options stream to use to interact with the Tezos network\n   *\n   * @example Tezos.setStreamProvider(...)\n   *\n   */\n  setStreamProvider(stream?: SetProviderOptions['stream']) {\n    if (typeof stream === 'string') {\n      this._stream = new PollingSubscribeProvider(new Context(new RpcClient(stream)));\n    } else if (typeof stream !== 'undefined') {\n      this._stream = stream;\n    } else if (this._options.stream === undefined) {\n      this._stream = this.getFactory(PollingSubscribeProvider)();\n    }\n    this._options.stream = stream;\n  }\n\n  /**\n   * @description Sets wallet provider on the Tezos Taquito instance\n   *\n   * @param options wallet to use to interact with the Tezos network\n   *\n   * @example Tezos.setWalletProvider(...)\n   *\n   */\n  setWalletProvider(wallet?: SetProviderOptions['wallet']) {\n    if (!this._options.wallet && typeof wallet === 'undefined') {\n      const w = this.getFactory(LegacyWalletProvider)();\n      this._options.wallet = w;\n      this._context.walletProvider = w;\n    } else if (typeof wallet !== 'undefined') {\n      this._options.wallet = wallet;\n      this._context.walletProvider = wallet;\n    }\n  }\n\n  /**\n   * @description Sets Packer provider on the Tezos Taquito instance\n   *\n   * @param options packer to use to interact with the Tezos network\n   *\n   * @example Tezos.setPackerProvider(new MichelCodecPacker())\n   *\n   */\n  setPackerProvider(packer?: SetProviderOptions['packer']) {\n    const p = typeof packer === 'undefined' ? this.getFactory(RpcPacker)() : packer;\n    this._options.packer = p;\n    this._context.packer = p;\n  }\n\n  /**\n   * @description Provide access to tezos account management\n   */\n  get tz(): TzProvider {\n    return this._context.tz;\n  }\n\n  /**\n   * @description Provide access to smart contract utilities\n   */\n  get contract(): ContractProvider {\n    return this._context.contract;\n  }\n\n  get wallet(): Wallet {\n    return this._wallet;\n  }\n\n  get operation(): OperationFactory {\n    return this._context.operationFactory;\n  }\n\n  /**\n   * @description Provide access to operation estimation utilities\n   */\n  get estimate(): EstimationProvider {\n    return this._context.estimate;\n  }\n\n  /**\n   * @description Provide access to streaming utilities backed by an streamer implementation\n   */\n  get stream(): SubscribeProvider {\n    return this._stream;\n  }\n\n  /**\n   * @description Provide access to the currently used rpc client\n   */\n  get rpc(): RpcClient {\n    return this._context.rpc;\n  }\n\n  /**\n   * @description Provide access to the currently used signer\n   */\n  get signer() {\n    return this._context.signer;\n  }\n\n  /**\n   * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.\n   *\n   * @param module extension to add to the TezosToolkit instance\n   *\n   * @example Tezos.addExtension(new Tzip16Module());\n   */\n  addExtension(module: Extension) {\n    module.configureContext(this._context);\n  }\n\n  getFactory<T, K extends Array<any>>(ctor: TaquitoProvider<T, K>) {\n    return (...args: K) => {\n      return new ctor(this._context, ...args);\n    };\n  }\n\n  /**\n   * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from\n   */\n  getVersionInfo(): VersionInfo {\n    return VERSION;\n  }\n}\n"],"names":[],"mappings":"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"}