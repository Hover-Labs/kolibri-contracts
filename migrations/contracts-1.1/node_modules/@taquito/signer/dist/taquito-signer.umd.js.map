{"version":3,"file":"taquito-signer.umd.js","sources":["../src/ed-key.ts","../src/ec-key.ts","../src/import-key.ts","../src/version.ts","../src/taquito-signer.ts"],"sourcesContent":["import sodium from 'libsodium-wrappers';\nimport { b58cencode, b58cdecode, prefix, buf2hex, Prefix, isValidPrefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n\n/**\n * @description Provide signing logic for ed25519 curve based key (tz1)\n */\nexport class Tz1 {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n  private isInit: Promise<boolean>;\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(private key: string, encrypted: boolean, decrypt: (k: any) => any) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new Error('key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    this._publicKey = this._key.slice(32);\n\n    if (!this._key) {\n      throw new Error('Unable to decode key');\n    }\n\n    this.isInit = this.init();\n  }\n\n  private async init() {\n    await sodium.ready;\n    if (this._key.length !== 64) {\n      const { publicKey, privateKey } = sodium.crypto_sign_seed_keypair(\n        new Uint8Array(this._key),\n        'uint8array'\n      );\n      this._publicKey = publicKey;\n      this._key = privateKey;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    await this.isInit;\n    const signature = sodium.crypto_sign_detached(\n      new Uint8Array(bytesHash),\n      new Uint8Array(this._key)\n    );\n    const signatureBuffer = toBuffer(signature);\n    const sbytes = bytes + buf2hex(signatureBuffer);\n\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, prefix.edsig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    await this.isInit;\n    return b58cencode(this._publicKey, prefix['edpk']);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await this.isInit;\n    await sodium.ready;\n    return b58cencode(sodium.crypto_generichash(20, new Uint8Array(this._publicKey)), prefix.tz1);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    await this.isInit;\n    await sodium.ready;\n    let key = this._key;\n    const { privateKey } = sodium.crypto_sign_seed_keypair(\n      new Uint8Array(key).slice(0, 32),\n      'uint8array'\n    );\n    key = toBuffer(privateKey);\n\n    return b58cencode(key, prefix[`edsk`]);\n  }\n}\n","import sodium from 'libsodium-wrappers';\nimport { b58cencode, b58cdecode, prefix, buf2hex, Prefix, isValidPrefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport elliptic from 'elliptic';\n\nconst pref = {\n  p256: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  secp256k1: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\n/**\n * @description Provide signing logic for elliptic curve based key (tz2, tz3)\n */\nexport class ECKey {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n\n  /**\n   *\n   * @param curve Curve to use with the key\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(\n    private curve: 'p256' | 'secp256k1',\n    private key: string,\n    encrypted: boolean,\n    decrypt: (k: any) => any\n  ) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new Error('key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    const keyPair = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const keyPairY = keyPair.getPublic().getY().toArray();\n    const parityByte = keyPairY.length < 32 ? keyPairY[keyPairY.length - 1] : keyPairY[31];\n    const pref = parityByte % 2 ? 3 : 2;\n    const pad = new Array(32).fill(0);\n    this._publicKey = toBuffer(\n      new Uint8Array([pref].concat(pad.concat(keyPair.getPublic().getX().toArray()).slice(-32)))\n    );\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    const key = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const sig = key.sign(bytesHash, { canonical: true });\n    const signature = sig.r.toString('hex', 64) + sig.s.toString('hex', 64);\n\n    const sbytes = bytes + signature;\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, pref[this.curve].sig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return b58cencode(this._publicKey, pref[this.curve].pk);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await sodium.ready;\n    return b58cencode(\n      sodium.crypto_generichash(20, new Uint8Array(this._publicKey)),\n      pref[this.curve].pkh\n    );\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    let key = this._key;\n\n    return b58cencode(key, pref[this.curve].sk);\n  }\n}\n\n/**\n * @description Tz3 key class using the p256 curve\n */\nexport const Tz3 = ECKey.bind(null, 'p256');\n\n/**\n * @description Tz3 key class using the secp256k1 curve\n */\nexport const Tz2 = ECKey.bind(null, 'secp256k1');\n","import { InMemorySigner } from './taquito-signer';\nimport { TezosToolkit } from '@taquito/taquito';\n\n/**\n *\n * @description Import a key to sign operation with the side-effect of setting the Tezos instance to use the InMemorySigner provider\n *\n * @param toolkit The toolkit instance to attach a signer\n * @param privateKeyOrEmail Key to load in memory\n * @param passphrase If the key is encrypted passphrase to decrypt it\n * @param mnemonic Faucet mnemonic\n * @param secret Faucet secret\n */\nexport async function importKey(\n  toolkit: TezosToolkit,\n  privateKeyOrEmail: string,\n  passphrase?: string,\n  mnemonic?: string,\n  secret?: string\n) {\n  if (privateKeyOrEmail && passphrase && mnemonic && secret) {\n    const signer = InMemorySigner.fromFundraiser(privateKeyOrEmail, passphrase, mnemonic);\n    toolkit.setProvider({ signer });\n    const pkh = await signer.publicKeyHash();\n    let op;\n    try {\n      op = await toolkit.tz.activate(pkh, secret);\n    } catch (ex) {\n      const isInvalidActivationError = ex && ex.body && /Invalid activation/.test(ex.body);\n      if (!isInvalidActivationError) {\n        throw ex;\n      }\n    }\n    if (op) {\n      await op.confirmation();\n    }\n  } else {\n    // Fallback to regular import\n    const signer = await InMemorySigner.fromSecretKey(privateKeyOrEmail, passphrase);\n    toolkit.setProvider({ signer });\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"7a156c90cea8b18a3aa9badee33445ab354867e5\",\n    \"version\": \"9.1.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/signer\n */\nimport sodium from 'libsodium-wrappers';\nimport { hex2buf, mergebuf, b58cencode, prefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport { Tz1 } from './ed-key';\nimport { Tz2, ECKey, Tz3 } from './ec-key';\nimport pbkdf2 from 'pbkdf2';\nimport { mnemonicToSeedSync } from 'bip39';\n\nexport * from './import-key';\nexport { VERSION } from './version';\n\n/**\n * @description A local implementation of the signer. Will represent a Tezos account and be able to produce signature in its behalf\n *\n * @warn If running in production and dealing with tokens that have real value, it is strongly recommended to use a HSM backed signer so that private key material is not stored in memory or on disk\n *\n * @warn Calling this constructor directly is discouraged as it do not await for sodium library to be loaded.\n *\n * Consider doing:\n *\n * ```const sodium = require('libsodium-wrappers'); await sodium.ready;```\n *\n * The recommended usage is to use InMemorySigner.fromSecretKey('edsk', 'passphrase')\n */\nexport class InMemorySigner {\n  private _key!: Tz1 | ECKey;\n\n  static fromFundraiser(email: string, password: string, mnemonic: string) {\n    let seed = mnemonicToSeedSync(mnemonic, `${email}${password}`);\n    const key = b58cencode(seed.slice(0, 32), prefix.edsk2);\n    return new InMemorySigner(key);\n  }\n\n  static async fromSecretKey(key: string, passphrase?: string) {\n    await sodium.ready;\n    return new InMemorySigner(key, passphrase);\n  }\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param passphrase Passphrase to decrypt the private key if it is encrypted\n   *\n   */\n  constructor(key: string, passphrase?: string) {\n    const encrypted = key.substring(2, 3) === 'e';\n\n    let decrypt = (k: any) => k;\n\n    if (encrypted) {\n      if (!passphrase) {\n        throw new Error('Encrypted key provided without a passphrase.');\n      }\n\n      decrypt = (constructedKey: Uint8Array) => {\n        const salt = toBuffer(constructedKey.slice(0, 8));\n        const encryptedSk = constructedKey.slice(8);\n        const encryptionKey = pbkdf2.pbkdf2Sync(passphrase, salt, 32768, 32, 'sha512');\n\n        return sodium.crypto_secretbox_open_easy(\n          new Uint8Array(encryptedSk),\n          new Uint8Array(24),\n          new Uint8Array(encryptionKey)\n        );\n      };\n    }\n\n    switch (key.substr(0, 4)) {\n      case 'edes':\n      case 'edsk':\n        this._key = new Tz1(key, encrypted, decrypt);\n        break;\n      case 'spsk':\n      case 'spes':\n        this._key = new Tz2(key, encrypted, decrypt);\n        break;\n      case 'p2sk':\n      case 'p2es':\n        this._key = new Tz3(key, encrypted, decrypt);\n        break;\n      default:\n        throw new Error('Unsupported key type');\n    }\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param watermark Watermark to append to the bytes\n   */\n  async sign(bytes: string, watermark?: Uint8Array) {\n    let bb = hex2buf(bytes);\n    if (typeof watermark !== 'undefined') {\n      bb = mergebuf(watermark, bb);\n    }\n\n    // Ensure sodium is ready before calling crypto_generichash otherwise the function do not exists\n    await sodium.ready;\n    const bytesHash = toBuffer(sodium.crypto_generichash(32, bb));\n\n    return this._key.sign(bytes, bytesHash);\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return this._key.publicKey();\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return this._key.publicKeyHash();\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    return this._key.secretKey();\n  }\n}\n"],"names":["isValidPrefix","b58cdecode","prefix","sodium","toBuffer","buf2hex","b58cencode","elliptic","pbkdf2","mnemonicToSeedSync","hex2buf","mergebuf"],"mappings":"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"}