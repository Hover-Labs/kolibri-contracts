{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/client.ts","../src/taquito-wallet.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppGetCurrentPermissionRequest\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest\n  | ThanosDAppSignRequest\n  | ThanosDAppBroadcastRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppGetCurrentPermissionResponse\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse\n  | ThanosDAppSignResponse\n  | ThanosDAppBroadcastResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  GetCurrentPermissionRequest = \"GET_CURRENT_PERMISSION_REQUEST\",\n  GetCurrentPermissionResponse = \"GET_CURRENT_PERMISSION_RESPONSE\",\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n  SignRequest = \"SIGN_REQUEST\",\n  SignResponse = \"SIGN_RESPONSE\",\n  BroadcastRequest = \"BROADCAST_REQUEST\",\n  BroadcastResponse = \"BROADCAST_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppGetCurrentPermissionRequest\n  extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.GetCurrentPermissionRequest;\n}\n\nexport interface ThanosDAppGetCurrentPermissionResponse\n  extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.GetCurrentPermissionResponse;\n  permission: ThanosDAppPermission;\n}\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  publicKey: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\nexport interface ThanosDAppSignRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignRequest;\n  sourcePkh: string;\n  payload: string;\n}\n\nexport interface ThanosDAppSignResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignResponse;\n  signature: string;\n}\n\nexport interface ThanosDAppBroadcastRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastRequest;\n  signedOpBytes: string;\n}\n\nexport interface ThanosDAppBroadcastResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n  TezosOperation = \"TEZOS_OPERATION\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppPermission = {\n  rpc: string;\n  pkh: string;\n  publicKey: string;\n} | null;\n\nexport type ThanosDAppNetwork =\n  | \"mainnet\"\n  | \"delphinet\"\n  | \"edo2net\"\n  | \"carthagenet\"\n  | \"sandbox\"\n  | { name: string; rpc: string };\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport { TezosOperationError } from \"@taquito/taquito\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n  ThanosDAppPermission,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 500);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 0,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport function onPermissionChange(\n  callback: (permission: ThanosDAppPermission) => void\n) {\n  let t: any;\n  let currentPerm: ThanosDAppPermission = null;\n  const check = async () => {\n    try {\n      const perm = await getCurrentPermission();\n      if (!permissionsAreEqual(perm, currentPerm)) {\n        callback(perm);\n        currentPerm = perm;\n      }\n    } catch {}\n\n    t = setTimeout(check, 10_000);\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function getCurrentPermission() {\n  const res = await request({\n    type: ThanosDAppMessageType.GetCurrentPermissionRequest,\n  });\n  assertResponse(\n    res.type === ThanosDAppMessageType.GetCurrentPermissionResponse\n  );\n  return res.permission;\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return {\n    rpc: res.rpc,\n    pkh: res.pkh,\n    publicKey: res.publicKey,\n  };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nexport async function requestSign(sourcePkh: string, payload: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.SignRequest,\n    sourcePkh,\n    payload,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.SignResponse);\n  return res.signature;\n}\n\nexport async function requestBroadcast(signedOpBytes: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.BroadcastRequest,\n    signedOpBytes,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.BroadcastResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction permissionsAreEqual(\n  aPerm: ThanosDAppPermission,\n  bPerm: ThanosDAppPermission\n) {\n  if (aPerm === null) return bPerm === null;\n  return aPerm.pkh === bPerm?.pkh && aPerm.rpc === bPerm?.rpc;\n}\n\nfunction createError(payload: any) {\n  switch (true) {\n    case payload === ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case payload === ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case payload === ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    case Array.isArray(payload) &&\n      payload[0] === ThanosDAppErrorType.TezosOperation &&\n      Array.isArray(payload[1]) &&\n      payload[1].length > 0:\n      return new TezosOperationError(payload[1]);\n\n    case typeof payload === \"string\" && payload.startsWith(\"__tezos__\"):\n      return new Error(payload.replace(\"__tezos__\", \"\"));\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n","import {\n  TezosToolkit,\n  WalletProvider,\n  createOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletTransferParams,\n} from \"@taquito/taquito\";\n\nimport {\n  isAvailable,\n  onAvailabilityChange,\n  getCurrentPermission,\n  onPermissionChange,\n  requestPermission,\n  requestOperation,\n  requestSign,\n  requestBroadcast,\n  ThanosWalletError,\n} from \"./client\";\n\nimport { ThanosDAppNetwork, ThanosDAppPermission } from \"./types\";\n\nexport class ThanosWallet implements WalletProvider {\n  static isAvailable = isAvailable;\n  static onAvailabilityChange = onAvailabilityChange;\n  static getCurrentPermission = getCurrentPermission;\n  static onPermissionChange = onPermissionChange;\n\n  permission: ThanosDAppPermission = null;\n\n  constructor(\n    private appName: string,\n    existingPermission?: ThanosDAppPermission\n  ) {\n    if (existingPermission) {\n      this.permission = existingPermission;\n    }\n  }\n\n  get connected() {\n    return Boolean(this.permission);\n  }\n\n  toTezos() {\n    assertConnected(this.permission);\n    const tezos = new TezosToolkit(this.permission.rpc);\n    tezos.setProvider({ wallet: this });\n    return tezos;\n  }\n\n  async connect(network: ThanosDAppNetwork, opts = { forcePermission: false }) {\n    const perm = await requestPermission(\n      network,\n      { name: this.appName },\n      opts.forcePermission\n    );\n    this.permission = perm;\n  }\n\n  reconnect(network: ThanosDAppNetwork) {\n    return this.connect(network, { forcePermission: true });\n  }\n\n  async getPKH() {\n    assertConnected(this.permission);\n    return this.permission.pkh;\n  }\n\n  async mapTransferParamsToWalletParams(params: WalletTransferParams) {\n    return createTransferOperation(params);\n  }\n\n  async mapOriginateParamsToWalletParams(params: WalletOriginateParams) {\n    return createOriginationOperation(params as any);\n  }\n\n  async mapDelegateParamsToWalletParams(params: WalletDelegateParams) {\n    return createSetDelegateOperation(params as any);\n  }\n\n  async sendOperations(opParams: any[]) {\n    assertConnected(this.permission);\n    return requestOperation(this.permission.pkh, opParams.map(formatOpParams));\n  }\n\n  async sign(payload: string) {\n    assertConnected(this.permission);\n    return requestSign(this.permission.pkh, payload);\n  }\n\n  async broadcast(signedOpBytes: string) {\n    assertConnected(this.permission);\n    return requestBroadcast(signedOpBytes);\n  }\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nfunction assertConnected(perm: ThanosDAppPermission): asserts perm {\n  if (!perm) {\n    throw new NotConnectedThanosWalletError();\n  }\n}\n\nfunction formatOpParams(op: any) {\n  const { fee, gas_limit, storage_limit, ...rest } = op;\n\n  switch (op.kind) {\n    case \"origination\":\n      return {\n        ...rest,\n        mutez: true, // The balance was already converted from Tez (ꜩ) to Mutez (uꜩ)\n      };\n\n    case \"transaction\":\n      const { destination, amount, parameters, ...txRest } = rest;\n      return {\n        ...txRest,\n        to: destination,\n        amount: +amount,\n        mutez: true,\n        parameter: parameters,\n      };\n\n    default:\n      return rest;\n  }\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","type","Response","payload","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","onAvailabilityChange","callback","currentStatus","check","async","attempt","initial","available","onPermissionChange","currentPerm","perm","getCurrentPermission","bPerm","aPerm","pkh","rpc","res","request","GetCurrentPermissionRequest","assertResponse","GetCurrentPermissionResponse","permission","requestPermission","network","appMeta","force","PermissionRequest","PermissionResponse","publicKey","requestOperation","sourcePkh","opParams","OperationRequest","OperationResponse","opHash","requestSign","SignRequest","SignResponse","signature","requestBroadcast","signedOpBytes","BroadcastRequest","BroadcastResponse","reject","reqId","nanoid","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","Array","isArray","TezosOperation","length","TezosOperationError","startsWith","Error","replace","ThanosWalletError","createError","condition","msg","postMessage","constructor","this","ThanosWallet","appName","existingPermission","connected","Boolean","toTezos","assertConnected","tezos","TezosToolkit","setProvider","wallet","[object Object]","opts","forcePermission","name","reconnect","connect","params","createTransferOperation","createOriginationOperation","createSetDelegateOperation","map","formatOpParams","NotConnectedThanosWalletError","op","rest","kind","mutez","destination","amount","parameters","txRest","to","parameter"],"mappings":"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"}