{"version":3,"file":"index.module.js","sources":["../src/types.ts","../src/client.ts","../src/taquito-wallet.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppGetCurrentPermissionRequest\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest\n  | ThanosDAppSignRequest\n  | ThanosDAppBroadcastRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppGetCurrentPermissionResponse\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse\n  | ThanosDAppSignResponse\n  | ThanosDAppBroadcastResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  GetCurrentPermissionRequest = \"GET_CURRENT_PERMISSION_REQUEST\",\n  GetCurrentPermissionResponse = \"GET_CURRENT_PERMISSION_RESPONSE\",\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n  SignRequest = \"SIGN_REQUEST\",\n  SignResponse = \"SIGN_RESPONSE\",\n  BroadcastRequest = \"BROADCAST_REQUEST\",\n  BroadcastResponse = \"BROADCAST_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppGetCurrentPermissionRequest\n  extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.GetCurrentPermissionRequest;\n}\n\nexport interface ThanosDAppGetCurrentPermissionResponse\n  extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.GetCurrentPermissionResponse;\n  permission: ThanosDAppPermission;\n}\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  publicKey: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\nexport interface ThanosDAppSignRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignRequest;\n  sourcePkh: string;\n  payload: string;\n}\n\nexport interface ThanosDAppSignResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignResponse;\n  signature: string;\n}\n\nexport interface ThanosDAppBroadcastRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastRequest;\n  signedOpBytes: string;\n}\n\nexport interface ThanosDAppBroadcastResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n  TezosOperation = \"TEZOS_OPERATION\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppPermission = {\n  rpc: string;\n  pkh: string;\n  publicKey: string;\n} | null;\n\nexport type ThanosDAppNetwork =\n  | \"mainnet\"\n  | \"delphinet\"\n  | \"edo2net\"\n  | \"carthagenet\"\n  | \"sandbox\"\n  | { name: string; rpc: string };\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport { TezosOperationError } from \"@taquito/taquito\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n  ThanosDAppPermission,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 500);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 0,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport function onPermissionChange(\n  callback: (permission: ThanosDAppPermission) => void\n) {\n  let t: any;\n  let currentPerm: ThanosDAppPermission = null;\n  const check = async () => {\n    try {\n      const perm = await getCurrentPermission();\n      if (!permissionsAreEqual(perm, currentPerm)) {\n        callback(perm);\n        currentPerm = perm;\n      }\n    } catch {}\n\n    t = setTimeout(check, 10_000);\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function getCurrentPermission() {\n  const res = await request({\n    type: ThanosDAppMessageType.GetCurrentPermissionRequest,\n  });\n  assertResponse(\n    res.type === ThanosDAppMessageType.GetCurrentPermissionResponse\n  );\n  return res.permission;\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return {\n    rpc: res.rpc,\n    pkh: res.pkh,\n    publicKey: res.publicKey,\n  };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nexport async function requestSign(sourcePkh: string, payload: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.SignRequest,\n    sourcePkh,\n    payload,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.SignResponse);\n  return res.signature;\n}\n\nexport async function requestBroadcast(signedOpBytes: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.BroadcastRequest,\n    signedOpBytes,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.BroadcastResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction permissionsAreEqual(\n  aPerm: ThanosDAppPermission,\n  bPerm: ThanosDAppPermission\n) {\n  if (aPerm === null) return bPerm === null;\n  return aPerm.pkh === bPerm?.pkh && aPerm.rpc === bPerm?.rpc;\n}\n\nfunction createError(payload: any) {\n  switch (true) {\n    case payload === ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case payload === ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case payload === ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    case Array.isArray(payload) &&\n      payload[0] === ThanosDAppErrorType.TezosOperation &&\n      Array.isArray(payload[1]) &&\n      payload[1].length > 0:\n      return new TezosOperationError(payload[1]);\n\n    case typeof payload === \"string\" && payload.startsWith(\"__tezos__\"):\n      return new Error(payload.replace(\"__tezos__\", \"\"));\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n","import {\n  TezosToolkit,\n  WalletProvider,\n  createOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletTransferParams,\n} from \"@taquito/taquito\";\n\nimport {\n  isAvailable,\n  onAvailabilityChange,\n  getCurrentPermission,\n  onPermissionChange,\n  requestPermission,\n  requestOperation,\n  requestSign,\n  requestBroadcast,\n  ThanosWalletError,\n} from \"./client\";\n\nimport { ThanosDAppNetwork, ThanosDAppPermission } from \"./types\";\n\nexport class ThanosWallet implements WalletProvider {\n  static isAvailable = isAvailable;\n  static onAvailabilityChange = onAvailabilityChange;\n  static getCurrentPermission = getCurrentPermission;\n  static onPermissionChange = onPermissionChange;\n\n  permission: ThanosDAppPermission = null;\n\n  constructor(\n    private appName: string,\n    existingPermission?: ThanosDAppPermission\n  ) {\n    if (existingPermission) {\n      this.permission = existingPermission;\n    }\n  }\n\n  get connected() {\n    return Boolean(this.permission);\n  }\n\n  toTezos() {\n    assertConnected(this.permission);\n    const tezos = new TezosToolkit(this.permission.rpc);\n    tezos.setProvider({ wallet: this });\n    return tezos;\n  }\n\n  async connect(network: ThanosDAppNetwork, opts = { forcePermission: false }) {\n    const perm = await requestPermission(\n      network,\n      { name: this.appName },\n      opts.forcePermission\n    );\n    this.permission = perm;\n  }\n\n  reconnect(network: ThanosDAppNetwork) {\n    return this.connect(network, { forcePermission: true });\n  }\n\n  async getPKH() {\n    assertConnected(this.permission);\n    return this.permission.pkh;\n  }\n\n  async mapTransferParamsToWalletParams(params: WalletTransferParams) {\n    return createTransferOperation(params);\n  }\n\n  async mapOriginateParamsToWalletParams(params: WalletOriginateParams) {\n    return createOriginationOperation(params as any);\n  }\n\n  async mapDelegateParamsToWalletParams(params: WalletDelegateParams) {\n    return createSetDelegateOperation(params as any);\n  }\n\n  async sendOperations(opParams: any[]) {\n    assertConnected(this.permission);\n    return requestOperation(this.permission.pkh, opParams.map(formatOpParams));\n  }\n\n  async sign(payload: string) {\n    assertConnected(this.permission);\n    return requestSign(this.permission.pkh, payload);\n  }\n\n  async broadcast(signedOpBytes: string) {\n    assertConnected(this.permission);\n    return requestBroadcast(signedOpBytes);\n  }\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nfunction assertConnected(perm: ThanosDAppPermission): asserts perm {\n  if (!perm) {\n    throw new NotConnectedThanosWalletError();\n  }\n}\n\nfunction formatOpParams(op: any) {\n  const { fee, gas_limit, storage_limit, ...rest } = op;\n\n  switch (op.kind) {\n    case \"origination\":\n      return {\n        ...rest,\n        mutez: true, // The balance was already converted from Tez (ꜩ) to Mutez (uꜩ)\n      };\n\n    case \"transaction\":\n      const { destination, amount, parameters, ...txRest } = rest;\n      return {\n        ...txRest,\n        to: destination,\n        amount: +amount,\n        mutez: true,\n        parameter: parameters,\n      };\n\n    default:\n      return rest;\n  }\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","requestBroadcast","signedOpBytes","request","type","BroadcastRequest","res","assertResponse","BroadcastResponse","opHash","requestSign","sourcePkh","payload","SignRequest","SignResponse","signature","requestOperation","opParams","OperationRequest","OperationResponse","requestPermission","network","appMeta","force","PermissionRequest","PermissionResponse","rpc","pkh","publicKey","getCurrentPermission","GetCurrentPermissionRequest","GetCurrentPermissionResponse","permission","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","Response","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","onAvailabilityChange","callback","currentStatus","check","attempt","initial","available","onPermissionChange","currentPerm","perm","aPerm","bPerm","reject","reqId","nanoid","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","Array","isArray","TezosOperation","length","TezosOperationError","startsWith","Error","replace","ThanosWalletError","createError","condition","msg","postMessage","this","_this","_this2","_this3","ThanosWallet","appName","existingPermission","toTezos","assertConnected","tezos","TezosToolkit","setProvider","wallet","connect","opts","forcePermission","name","reconnect","getPKH","mapTransferParamsToWalletParams","params","createTransferOperation","mapOriginateParamsToWalletParams","createOriginationOperation","mapDelegateParamsToWalletParams","createSetDelegateOperation","sendOperations","map","formatOpParams","sign","broadcast","Boolean","NotConnectedThanosWalletError","_this11","op","fee","rest","kind","mutez","destination","amount","parameters","to","parameter"],"mappings":"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"}