import Network from './network';
import Address from './types/address';
import OperationHash from './types/operation-hash';
import { ThanosWallet } from '@thanos-wallet/dapp';
import { InMemorySigner } from '@taquito/signer';
import Shard from './types/shard';
import Mutez from './types/mutez';
import { TransactionWalletOperation } from '@taquito/taquito';
import { TransactionOperation } from '@taquito/taquito/dist/types/operations/transaction-operation';
export declare type OvenDeployResult = {
    operationHash: OperationHash;
    ovenAddress: Address;
};
export declare type Oven = {
    ovenOwner: Address;
    ovenAddress: Address;
};
export declare type InterestData = {
    globalInterestIndex: Shard;
    lastUpdateTime: Date;
};
export default class StableCoinClient {
    private readonly network;
    private readonly ovenRegistryAddress;
    private readonly minterAddress;
    private readonly ovenFactoryAddress;
    private readonly indexerURL?;
    private readonly tezos;
    constructor(nodeUrl: string, network: Network, ovenRegistryAddress: Address, minterAddress: Address, ovenFactoryAddress: Address, indexerURL?: string | undefined);
    getNetwork(): string;
    deployOven(wallet: InMemorySigner | ThanosWallet): Promise<TransactionWalletOperation | TransactionOperation>;
    getStabilityFeeApy(): Promise<Shard>;
    getSimpleStabilityFee(): Promise<Shard>;
    getMaximumOvenValue(): Promise<Mutez | null>;
    getRequiredCollateralizationRatio(): Promise<Shard>;
    getInterestData(time?: Date): Promise<InterestData>;
    getOvenCount(): Promise<number>;
    ovensOwnedByAddress(address: Address): Promise<Array<Address>>;
    getAllOvens(): Promise<Array<Oven>>;
}
