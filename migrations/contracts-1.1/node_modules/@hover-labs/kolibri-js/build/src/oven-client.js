"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const taquito_1 = require("@taquito/taquito");
const signer_1 = require("@taquito/signer");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const MUTEZ_DIGITS = 6;
const SHARD_DIGITS = 18;
const MUTEZ_TO_SHARD = new bignumber_js_1.default(Math.pow(10, SHARD_DIGITS - MUTEZ_DIGITS));
const SHARD_PRECISION = new bignumber_js_1.default(Math.pow(10, SHARD_DIGITS));
class OvenClient {
    constructor(nodeUrl, wallet, ovenAddress, stableCoinClient, harbingerClient) {
        this.ovenAddress = ovenAddress;
        this.stableCoinClient = stableCoinClient;
        this.harbingerClient = harbingerClient;
        const tezos = new taquito_1.TezosToolkit(nodeUrl);
        if (wallet instanceof signer_1.InMemorySigner) {
            tezos.setProvider({ signer: wallet });
        }
        else {
            tezos.setWalletProvider(wallet);
        }
        this.tezos = tezos;
    }
    async getCollateralizationRatio() {
        const { price } = await this.harbingerClient.getPriceData();
        const priceShard = price.multipliedBy(MUTEZ_TO_SHARD);
        const currentBalance = await this.getBalance();
        const collateralValue = currentBalance.multipliedBy(MUTEZ_TO_SHARD).multipliedBy(priceShard);
        const collateralValueInkUSD = collateralValue.multipliedBy(SHARD_PRECISION);
        const totalBorrowedTokens = await this.getTotalOutstandingTokens();
        return collateralValueInkUSD.dividedBy(totalBorrowedTokens).multipliedBy(new bignumber_js_1.default(100));
    }
    async getBaker() {
        try {
            return await this.tezos.rpc.getDelegate(this.ovenAddress);
        }
        catch (e) {
            if (e.status === 404) {
                return null;
            }
            throw e;
        }
    }
    async setBaker(baker) {
        return this.invokeOvenMethod('setDelegate', baker);
    }
    async getOwner() {
        const ovenContract = await this.tezos.wallet.at(this.ovenAddress);
        const ovenStorage = await ovenContract.storage();
        return ovenStorage.owner;
    }
    async getBorrowedTokens() {
        const ovenContract = await this.tezos.wallet.at(this.ovenAddress);
        const ovenStorage = await ovenContract.storage();
        return ovenStorage.borrowedTokens;
    }
    async getTotalOutstandingTokens(time = new Date()) {
        const stabilityFees = await this.getStabilityFees(time);
        const borrowedTokens = await this.getBorrowedTokens();
        return stabilityFees.plus(borrowedTokens);
    }
    async getStabilityFees(time = new Date()) {
        const ovenContract = await this.tezos.wallet.at(this.ovenAddress);
        const ovenStorage = await ovenContract.storage();
        const stabilityFeeTokens = ovenStorage.stabilityFeeTokens;
        const interestData = await this.stableCoinClient.getInterestData(time);
        const ovenInterestIndex = ovenStorage.interestIndex;
        const borrowedTokens = await this.getBorrowedTokens();
        const minterInterestIndex = interestData.globalInterestIndex;
        const ratio = minterInterestIndex.times(SHARD_PRECISION).div(ovenInterestIndex).integerValue();
        const totalPrinciple = borrowedTokens.plus(stabilityFeeTokens);
        const newTotalTokens = ratio.times(totalPrinciple).div(SHARD_PRECISION).integerValue();
        return newTotalTokens.minus(borrowedTokens);
    }
    async isLiquidated() {
        const ovenContract = await this.tezos.wallet.at(this.ovenAddress);
        const ovenStorage = await ovenContract.storage();
        return ovenStorage.isLiquidated;
    }
    async getBalance() {
        return await this.tezos.tz.getBalance(this.ovenAddress);
    }
    async liquidate() {
        return this.invokeOvenMethod('liquidate', [['unit']]);
    }
    async borrow(tokens) {
        return this.invokeOvenMethod('borrow', tokens);
    }
    async deposit(mutez) {
        return this.invokeOvenMethod('default', [['unit']], Number(mutez));
    }
    async withdraw(mutez) {
        return this.invokeOvenMethod('withdraw', mutez);
    }
    async repay(tokensToRepay) {
        return this.invokeOvenMethod('repay', tokensToRepay);
    }
    async invokeOvenMethod(entrypoint, args, amount = 0) {
        const ovenContract = await this.tezos.wallet.at(this.ovenAddress);
        const sendArgs = { amount: amount, mutez: true };
        return await ovenContract.methods[entrypoint](args).send(sendArgs);
    }
}
exports.default = OvenClient;
//# sourceMappingURL=oven-client.js.map