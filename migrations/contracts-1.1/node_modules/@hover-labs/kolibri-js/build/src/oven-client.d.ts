import Address from './types/address';
import { TransactionWalletOperation } from '@taquito/taquito';
import { ThanosWallet } from '@thanos-wallet/dapp';
import { InMemorySigner } from '@taquito/signer';
import HarbingerClient from './harbinger-client';
import Mutez from './types/mutez';
import Shard from './types/shard';
import { TransactionOperation } from '@taquito/taquito/dist/types/operations/transaction-operation';
import StableCoinClient from './stable-coin-client';
export default class OvenClient {
    readonly ovenAddress: Address;
    readonly stableCoinClient: StableCoinClient;
    readonly harbingerClient: HarbingerClient;
    private readonly tezos;
    constructor(nodeUrl: string, wallet: InMemorySigner | ThanosWallet, ovenAddress: Address, stableCoinClient: StableCoinClient, harbingerClient: HarbingerClient);
    getCollateralizationRatio(): Promise<Shard>;
    getBaker(): Promise<Address | null>;
    setBaker(baker: Address | null): Promise<TransactionOperation | TransactionWalletOperation>;
    getOwner(): Promise<Address>;
    getBorrowedTokens(): Promise<Shard>;
    getTotalOutstandingTokens(time?: Date): Promise<Shard>;
    getStabilityFees(time?: Date): Promise<Shard>;
    isLiquidated(): Promise<boolean>;
    getBalance(): Promise<Mutez>;
    liquidate(): Promise<TransactionOperation | TransactionWalletOperation>;
    borrow(tokens: Shard): Promise<TransactionOperation | TransactionWalletOperation>;
    deposit(mutez: Mutez): Promise<TransactionOperation | TransactionWalletOperation>;
    withdraw(mutez: Mutez): Promise<TransactionOperation | TransactionWalletOperation>;
    repay(tokensToRepay: Shard): Promise<TransactionOperation | TransactionWalletOperation>;
    private invokeOvenMethod;
}
