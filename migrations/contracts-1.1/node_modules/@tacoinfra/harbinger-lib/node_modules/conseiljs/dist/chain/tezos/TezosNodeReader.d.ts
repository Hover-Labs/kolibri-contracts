import * as TezosRPCTypes from '../../types/tezos/TezosRPCResponseTypes';
export declare namespace TezosNodeReader {
    function getBlock(server: string, hash?: string, chainid?: string): Promise<TezosRPCTypes.TezosBlock>;
    function getBlockHead(server: string): Promise<TezosRPCTypes.TezosBlock>;
    function getBlockAtOffset(server: string, offset: number, chainid?: string): Promise<TezosRPCTypes.TezosBlock>;
    function getAccountForBlock(server: string, blockHash: string, accountHash: string, chainid?: string): Promise<TezosRPCTypes.Contract>;
    function getCounterForAccount(server: string, accountHash: string, chainid?: string): Promise<number>;
    function getSpendableBalanceForAccount(server: string, accountHash: string, chainid?: string): Promise<number>;
    function getAccountManagerForBlock(server: string, block: string, accountHash: string, chainid?: string): Promise<string>;
    function isImplicitAndEmpty(server: string, accountHash: string): Promise<boolean>;
    function isManagerKeyRevealedForAccount(server: string, accountHash: string): Promise<boolean>;
    function getContractStorage(server: string, accountHash: string, block?: string, chainid?: string): Promise<any>;
    function getValueForBigMapKey(server: string, index: number, key: string, block?: string, chainid?: string): Promise<any>;
    function getMempoolOperation(server: string, operationGroupId: string, chainid?: string): Promise<any>;
    function estimateBranchTimeout(server: string, branch: string, chainid?: string): Promise<number>;
    function getMempoolOperationsForAccount(server: string, accountHash: string, chainid?: string): Promise<any>;
}
