"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructPushOperation = exports.pushOracleDataOnce = void 0;
const common_1 = require("./common");
const utils_1 = __importDefault(require("./utils"));
const conseiljs_1 = require("conseiljs");
const constants_1 = __importDefault(require("./constants"));
const operation_fee_estimator_1 = __importDefault(require("./operation-fee-estimator"));
async function pushOracleData(logLevel, oracleContractAddress, normalizerContractAddress, pusherPrivateKey, updateIntervalSeconds, tezosNodeURL) {
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Using node located at: ' + tezosNodeURL);
        utils_1.default.print('');
    }
    if (updateIntervalSeconds) {
        while (true) {
            await pushOracleDataOnce(logLevel, oracleContractAddress, normalizerContractAddress, pusherPrivateKey, tezosNodeURL);
            utils_1.default.print(`Waiting ${updateIntervalSeconds} seconds to do next update. (Customize with --updateInterval)`);
            await utils_1.default.sleep(updateIntervalSeconds);
        }
    }
    else {
        await pushOracleDataOnce(logLevel, oracleContractAddress, normalizerContractAddress, pusherPrivateKey, tezosNodeURL);
    }
}
exports.default = pushOracleData;
async function pushOracleDataOnce(logLevel, oracleContractAddress, normalizerContractAddress, pusherPrivateKey, tezosNodeURL) {
    try {
        utils_1.default.print(`Pushing data from oracle located at: ${oracleContractAddress}`);
        utils_1.default.print(`To: ${normalizerContractAddress}`);
        utils_1.default.print('');
        const keystore = await utils_1.default.keyStoreFromPrivateKey(pusherPrivateKey);
        const signer = await utils_1.default.signerFromKeyStore(keystore);
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print(`Pushing from account: ${keystore.publicKeyHash}`);
            utils_1.default.print('');
        }
        await utils_1.default.revealAccountIfNeeded(tezosNodeURL, keystore, signer);
        const counter = await conseiljs_1.TezosNodeReader.getCounterForAccount(tezosNodeURL, keystore.publicKeyHash);
        const operation = constructPushOperation(logLevel, keystore, counter + 1, oracleContractAddress, normalizerContractAddress);
        const operationFeeApplicator = new operation_fee_estimator_1.default(tezosNodeURL);
        const operationsWithFees = await operationFeeApplicator.estimateAndApplyFees([operation]);
        const nodeResult = await conseiljs_1.TezosNodeWriter.sendOperation(tezosNodeURL, operationsWithFees, signer);
        utils_1.default.print(`Push sent with hash: ${nodeResult.operationGroupID.replace(/"/g, '')}`);
    }
    catch (error) {
        utils_1.default.print('Error occurred while trying to update.');
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print(error);
        }
        utils_1.default.print('');
    }
}
exports.pushOracleDataOnce = pushOracleDataOnce;
function constructPushOperation(logLevel, keystore, counter, oracleContractAddress, normalizerContractAddress) {
    const parameter = `"${normalizerContractAddress}%update"`;
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Made parameter: ');
        utils_1.default.print(parameter);
        utils_1.default.print('');
    }
    const entrypoint = 'push';
    return conseiljs_1.TezosNodeWriter.constructContractInvocationOperation(keystore.publicKeyHash, counter, oracleContractAddress, 0, 0, constants_1.default.storageLimit, constants_1.default.gasLimit, entrypoint, parameter, conseiljs_1.TezosParameterFormat.Michelson);
}
exports.constructPushOperation = constructPushOperation;
//# sourceMappingURL=push.js.map