"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const utils_1 = __importDefault(require("./utils"));
const conseiljs_1 = require("conseiljs");
const constants_1 = __importDefault(require("./constants"));
const operation_fee_estimator_1 = __importDefault(require("./operation-fee-estimator"));
async function revokeOracle(logLevel, signedRevokeCommand, oracleContractAddress, revokerPrivateKey, tezosNodeURL) {
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Using node located at: ' + tezosNodeURL);
        utils_1.default.print('');
    }
    try {
        utils_1.default.print('Revoking oracle contract: ' + oracleContractAddress);
        const keystore = await utils_1.default.keyStoreFromPrivateKey(revokerPrivateKey);
        const signer = await utils_1.default.signerFromKeyStore(keystore);
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print('Revoking from account: ' + keystore.publicKeyHash);
            utils_1.default.print('');
        }
        const parameter = `"${signedRevokeCommand}"`;
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print('Made parameter: ');
            utils_1.default.print(parameter);
            utils_1.default.print('');
        }
        const counter = await conseiljs_1.TezosNodeReader.getCounterForAccount(tezosNodeURL, keystore.publicKeyHash);
        const entrypoint = 'revoke';
        const operation = conseiljs_1.TezosNodeWriter.constructContractInvocationOperation(keystore.publicKeyHash, counter, oracleContractAddress, 0, 0, constants_1.default.storageLimit, constants_1.default.gasLimit, entrypoint, parameter, conseiljs_1.TezosParameterFormat.Michelson);
        const operationFeeEstimator = new operation_fee_estimator_1.default(tezosNodeURL);
        const operationsWithFees = await operationFeeEstimator.estimateAndApplyFees([operation]);
        const nodeResult = await conseiljs_1.TezosNodeWriter.sendOperation(tezosNodeURL, operationsWithFees, signer);
        utils_1.default.print(`Revoked with operation hash: ${nodeResult.operationGroupID.replace(/"/g, '')}`);
    }
    catch (error) {
        utils_1.default.print('Error occurred while trying to revoke.');
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print(error.message);
        }
        utils_1.default.print('');
    }
}
exports.default = revokeOracle;
//# sourceMappingURL=revoke.js.map