"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployNormalizer = exports.deployOracle = void 0;
const utils_1 = __importDefault(require("./utils"));
const common_1 = require("./common");
const conseiljs_1 = require("conseiljs");
const fs = require("fs");
const constants_1 = __importDefault(require("./constants"));
const operation_fee_estimator_1 = __importDefault(require("./operation-fee-estimator"));
const NORMALIZER_CONTRACT_FILE = __dirname + '/normalizer.tz';
const ORACLE_CONTRACT_FILE = __dirname + '/oracle.tz';
function readContract(filename) {
    const contractFile = filename;
    const contract = fs.readFileSync(contractFile).toString('latin1');
    return contract;
}
function makeOracleStorage(logLevel, assetNames, signerPublicKey) {
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Using assets: ' +
            assetNames.reduce((previousValue, assetName) => {
                return previousValue + assetName + ', ';
            }, ''));
    }
    utils_1.default.print('');
    const elementsString = elementsStringFromAssetName(assetNames);
    const storage = `
    Pair 
        {
            ${elementsString}
        }
        (Some "${signerPublicKey}")
`;
    return storage;
}
function makeNormalizerStorage(assetNames, numDataPoints, oracleContractAddress) {
    const assetNameParam = assetNames.reduce((previous, current) => {
        return previous + `"${current}"; `;
    }, '');
    const assetValuesParam = assetNames.reduce((previous, current) => {
        return (previous +
            `Elt "${current}" (Pair (Pair 0 "0") (Pair (Pair (Pair 0 -1) (Pair {Elt 0 0} 0)) (Pair (Pair 0 -1) (Pair {Elt 0 0} 0))));`);
    }, '');
    return `(Pair (Pair {${assetNameParam}} {${assetValuesParam}}) (Pair ${numDataPoints} "${oracleContractAddress}"))`;
}
async function deployOracle(logLevel, assetNames, signerPublicKey, deployerPrivateKey, tezosNodeURL) {
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Using node located at: ' + tezosNodeURL);
        utils_1.default.print('');
    }
    try {
        utils_1.default.print('Deploying an oracle contract.');
        const storage = makeOracleStorage(logLevel, assetNames, signerPublicKey);
        const contract = readContract(ORACLE_CONTRACT_FILE);
        const addresses = await deploy(logLevel, deployerPrivateKey, [contract], [storage], tezosNodeURL);
        utils_1.default.print('New Contract Address: ' + addresses[0]);
    }
    catch (error) {
        utils_1.default.print('Error deploying contract');
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print(error.message);
        }
        utils_1.default.print('');
        throw error;
    }
}
exports.deployOracle = deployOracle;
async function deployNormalizer(logLevel, deployerPrivateKey, assetNames, numDataPoints, oracleContractAddress, tezosNodeURL) {
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Using node located at: ' + tezosNodeURL);
        utils_1.default.print('');
    }
    try {
        utils_1.default.print('Deploying a normalizer contract.');
        utils_1.default.print('');
        const storage = makeNormalizerStorage(assetNames, numDataPoints, oracleContractAddress);
        const contract = readContract(NORMALIZER_CONTRACT_FILE);
        const addresses = await deploy(logLevel, deployerPrivateKey, [contract], [storage], tezosNodeURL);
        utils_1.default.print('New Contract Address: ' + addresses[0]);
    }
    catch (error) {
        utils_1.default.print('Error deploying contract');
        if (logLevel == common_1.LogLevel.Debug) {
            utils_1.default.print(error.message);
        }
        utils_1.default.print('');
    }
}
exports.deployNormalizer = deployNormalizer;
async function deploy(logLevel, deployerPrivateKey, contracts, storages, tezosNodeURL) {
    const keystore = await utils_1.default.keyStoreFromPrivateKey(deployerPrivateKey);
    const signer = await utils_1.default.signerFromKeyStore(keystore);
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Deploying from account: ' + keystore.publicKeyHash);
        utils_1.default.print('');
    }
    await utils_1.default.revealAccountIfNeeded(tezosNodeURL, keystore, signer);
    const operations = [];
    let counter = await conseiljs_1.TezosNodeReader.getCounterForAccount(tezosNodeURL, keystore.publicKeyHash);
    for (let i = 0; i < contracts.length; i++) {
        const contract = contracts[i];
        const storage = storages[i];
        counter++;
        const operation = conseiljs_1.TezosNodeWriter.constructContractOriginationOperation(keystore, 0, undefined, 0, constants_1.default.storageLimit, constants_1.default.gasLimit, contract, storage, conseiljs_1.TezosParameterFormat.Michelson, counter);
        operations.push(operation);
    }
    const operationFeeEstimator = new operation_fee_estimator_1.default(tezosNodeURL);
    const operationsWithFees = await operationFeeEstimator.estimateAndApplyFees(operations);
    const nodeResult = await conseiljs_1.TezosNodeWriter.sendOperation(tezosNodeURL, operationsWithFees, signer);
    const operationHash = nodeResult.operationGroupID
        .replace(/"/g, '')
        .replace(/\n/, '');
    utils_1.default.print('Deployed in operation hash: ' + operationHash);
    const contractAddresses = [];
    for (let i = 0; i < contracts.length; i++) {
        contractAddresses.push(utils_1.default.calculateContractAddress(operationHash, i));
    }
    return contractAddresses;
}
function elementsStringFromAssetName(assetNames) {
    const elements = assetNames.map((assetName) => {
        return `Elt "${assetName}" (Pair 0 (Pair 0 (Pair 0 (Pair 0 (Pair 0 (Pair 0 0))))));`;
    });
    const elementsString = elements.reduce((previousValue, currentValue) => {
        return previousValue + '\n' + currentValue;
    }, '');
    return elementsString.trim();
}
//# sourceMappingURL=deploy.js.map