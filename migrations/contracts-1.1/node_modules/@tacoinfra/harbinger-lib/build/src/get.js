"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const utils_1 = __importDefault(require("./utils"));
const conseiljs_1 = require("conseiljs");
async function get(tezosNodeURL, oracleContractAddress, assetCode, logLevel) {
    utils_1.default.print('Fetching data...');
    utils_1.default.print('');
    if (logLevel === common_1.LogLevel.Debug) {
        utils_1.default.print('Using Node: ' + tezosNodeURL);
        utils_1.default.print('Using Oracle Contract ' + oracleContractAddress);
        utils_1.default.print('Fetching Asset Code: ' + assetCode);
        utils_1.default.print('');
    }
    const storage = await conseiljs_1.TezosNodeReader.getContractStorage(tezosNodeURL, oracleContractAddress, undefined, undefined);
    const bigMapIndex = storage['args'][0]['int'];
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print(`Got storage: ${JSON.stringify(storage)}`);
        utils_1.default.print(`Got big map index ${JSON.stringify(bigMapIndex)}`);
        utils_1.default.print('');
    }
    const packedBytes = conseiljs_1.TezosMessageUtils.writePackedData(assetCode, 'string', conseiljs_1.TezosParameterFormat.Michelson);
    const packedHex = conseiljs_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(packedBytes, 'hex'));
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print(`Packed big map key to ${packedHex}`);
        utils_1.default.print('');
    }
    const value = await conseiljs_1.TezosNodeReader.getValueForBigMapKey(tezosNodeURL, bigMapIndex, packedHex, undefined, 'main');
    if (logLevel == common_1.LogLevel.Debug) {
        utils_1.default.print('Retrieved value from big map: ' + JSON.stringify(value));
        utils_1.default.print('');
    }
    utils_1.default.print(`Oracle Data for Asset: ${assetCode}`);
    utils_1.default.print(`Period Start: ${JSON.stringify(getValue(value, 0, 'string'))}`);
    utils_1.default.print(`Period End: ${JSON.stringify(getValue(value, 1, 'string'))}`);
    utils_1.default.print(`Open: ${normalizeDataPoint(Number(getValue(value, 2, 'int')))}`);
    utils_1.default.print(`High: ${normalizeDataPoint(Number(getValue(value, 3, 'int')))}`);
    utils_1.default.print(`Low: ${normalizeDataPoint(Number(getValue(value, 4, 'int')))}`);
    utils_1.default.print(`Close: ${normalizeDataPoint(Number(getValue(value, 5, 'int')))}`);
    const rawValue = value['args'][1]['args'][1]['args'][1]['args'][1]['args'][1]['args'][1]['int'];
    utils_1.default.print(`Volume: ${normalizeDataPoint(Number(rawValue))}`);
    utils_1.default.print('');
}
exports.default = get;
function getValue(input, depth, key) {
    if (depth == 0) {
        return input['args'][0][key];
    }
    const nested = input['args'][1];
    return getValue(nested, depth - 1, key);
}
function normalizeDataPoint(input) {
    const scale = Math.pow(10, 6);
    return input / scale;
}
//# sourceMappingURL=get.js.map