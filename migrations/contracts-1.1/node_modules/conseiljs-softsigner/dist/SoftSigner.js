"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneratePassword = __importStar(require("generate-password"));
const conseiljs_1 = require("conseiljs");
const CryptoUtils_1 = require("./utils/CryptoUtils");
class SoftSigner {
    constructor(secretKey, validity = -1, passphrase = '', salt) {
        this._secretKey = secretKey;
        this._lockTimout = validity;
        this._passphrase = passphrase;
        this._salt = salt ? salt : Buffer.alloc(0);
        this._unlocked = validity < 0;
        this._key = Buffer.alloc(0);
        if (validity < 0) {
            this._key = secretKey;
        }
    }
    getSignerCurve() {
        return conseiljs_1.SignerCurve.ED25519;
    }
    static createSigner(secretKey, validity = 60) {
        return __awaiter(this, void 0, void 0, function* () {
            if (validity >= 0) {
                const passphrase = GeneratePassword.generate({ length: 32, numbers: true, symbols: true, lowercase: true, uppercase: true });
                const salt = yield CryptoUtils_1.CryptoUtils.generateSaltForPwHash();
                secretKey = yield CryptoUtils_1.CryptoUtils.encryptMessage(secretKey, passphrase, salt);
                return new SoftSigner(secretKey, validity, passphrase, salt);
            }
            else {
                return new SoftSigner(secretKey);
            }
        });
    }
    getKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._unlocked) {
                const k = yield CryptoUtils_1.CryptoUtils.decryptMessage(this._secretKey, this._passphrase, this._salt);
                if (this._lockTimout == 0) {
                    return k;
                }
                this._key = k;
                this._unlocked = true;
                if (this._lockTimout > 0) {
                    setTimeout(() => {
                        this._key = Buffer.alloc(0);
                        this._unlocked = false;
                    }, this._lockTimout * 1000);
                }
                return this._key;
            }
            return this._key;
        });
    }
    signOperation(bytes) {
        return __awaiter(this, void 0, void 0, function* () {
            return CryptoUtils_1.CryptoUtils.signDetached(conseiljs_1.TezosMessageUtils.simpleHash(bytes, 32), yield this.getKey());
        });
    }
    signText(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(Buffer.from(message, 'utf8'), yield this.getKey());
            return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');
        });
    }
    signTextHash(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const messageHash = conseiljs_1.TezosMessageUtils.simpleHash(Buffer.from(message, 'utf8'), 32);
            const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(messageHash, yield this.getKey());
            return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');
        });
    }
}
exports.SoftSigner = SoftSigner;
//# sourceMappingURL=SoftSigner.js.map