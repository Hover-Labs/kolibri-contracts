parameter (or (or (unit %default) (contract %getXtzUsdRate nat)) (or (pair %getXtzUsdRate_callback string (pair timestamp nat)) (or (address %setGovernorContract) (nat %setMaxDataDelaySec))));
storage   (pair (pair (option %clientCallback address) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            PUSH int 19; # int : @parameter%default : @storage
            FAILWITH;   # FAILED
          }
          {
            # == getXtzUsdRate ==
            # sp.verify(self.data.state == 0, 12) # @parameter%getXtzUsdRate : @storage
            PUSH int 0; # int : @parameter%getXtzUsdRate : @storage
            DUP 3;      # @storage : int : @parameter%getXtzUsdRate : @storage
            GET 6;      # int : int : @parameter%getXtzUsdRate : @storage
            COMPARE;    # int : @parameter%getXtzUsdRate : @storage
            EQ;         # bool : @parameter%getXtzUsdRate : @storage
            IF
              {}
              {
                PUSH int 12; # int : @parameter%getXtzUsdRate : @storage
                FAILWITH;   # FAILED
              }; # @parameter%getXtzUsdRate : @storage
            # sp.verify(sp.amount == sp.tez(0), 15) # @parameter%getXtzUsdRate : @storage
            PUSH mutez 0; # mutez : @parameter%getXtzUsdRate : @storage
            AMOUNT;     # @amount : mutez : @parameter%getXtzUsdRate : @storage
            COMPARE;    # int : @parameter%getXtzUsdRate : @storage
            EQ;         # bool : @parameter%getXtzUsdRate : @storage
            IF
              {}
              {
                PUSH int 15; # int : @parameter%getXtzUsdRate : @storage
                FAILWITH;   # FAILED
              }; # @parameter%getXtzUsdRate : @storage
            SWAP;       # @storage : @parameter%getXtzUsdRate
            # self.data.state = 1 # @storage : @parameter%getXtzUsdRate
            PUSH int 1; # int : @storage : @parameter%getXtzUsdRate
            UPDATE 6;   # @storage : @parameter%getXtzUsdRate
            # self.data.clientCallback = sp.some(sp.to_address(params)) # @storage : @parameter%getXtzUsdRate
            UNPAIR;     # pair (option %clientCallback address) (address %governorContractAddress) : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : @parameter%getXtzUsdRate
            CDR;        # address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : @parameter%getXtzUsdRate
            DIG 2;      # @parameter%getXtzUsdRate : address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
            ADDRESS;    # address : address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
            SOME;       # option address : address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
            PAIR;       # pair (option address) address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
            PAIR;       # pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            # sp.transfer(('XTZ-USD', sp.self_entry_point('getXtzUsdRate_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TString, sp.TContract(sp.TPair(sp.TString, sp.TPair(sp.TTimestamp, sp.TNat)))), self.data.harbingerContractAddress, entry_point='get').open_some()) # pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            DUP;        # pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))) : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            GET 3;      # address : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            CONTRACT %get (pair string (contract (pair string (pair timestamp nat)))); # option (contract (pair string (contract (pair string (pair timestamp nat))))) : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            IF_NONE
              {
                UNIT;       # unit : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
                FAILWITH;   # FAILED
              }
              {}; # @some : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            NIL operation; # list operation : @some : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            SWAP;       # @some : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            PUSH mutez 0; # mutez : @some : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            SELF %getXtzUsdRate_callback; # @self : mutez : @some : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            PUSH string "XTZ-USD"; # string : @self : mutez : @some : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            PAIR;       # pair string @self : mutez : @some : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            TRANSFER_TOKENS; # operation : list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            CONS;       # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
          }; # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
      }
      {
        IF_LEFT
          {
            # == getXtzUsdRate_callback ==
            # sp.verify(self.data.state == 1, 12) # @parameter%getXtzUsdRate_callback : @storage
            PUSH int 1; # int : @parameter%getXtzUsdRate_callback : @storage
            DUP 3;      # @storage : int : @parameter%getXtzUsdRate_callback : @storage
            GET 6;      # int : int : @parameter%getXtzUsdRate_callback : @storage
            COMPARE;    # int : @parameter%getXtzUsdRate_callback : @storage
            EQ;         # bool : @parameter%getXtzUsdRate_callback : @storage
            IF
              {}
              {
                PUSH int 12; # int : @parameter%getXtzUsdRate_callback : @storage
                FAILWITH;   # FAILED
              }; # @parameter%getXtzUsdRate_callback : @storage
            SWAP;       # @storage : @parameter%getXtzUsdRate_callback
            # sp.verify(sp.sender == self.data.harbingerContractAddress, 3) # @storage : @parameter%getXtzUsdRate_callback
            DUP;        # @storage : @storage : @parameter%getXtzUsdRate_callback
            DUG 2;      # @storage : @parameter%getXtzUsdRate_callback : @storage
            GET 3;      # address : @parameter%getXtzUsdRate_callback : @storage
            SENDER;     # @sender : address : @parameter%getXtzUsdRate_callback : @storage
            COMPARE;    # int : @parameter%getXtzUsdRate_callback : @storage
            EQ;         # bool : @parameter%getXtzUsdRate_callback : @storage
            IF
              {}
              {
                PUSH int 3; # int : @parameter%getXtzUsdRate_callback : @storage
                FAILWITH;   # FAILED
              }; # @parameter%getXtzUsdRate_callback : @storage
            # sp.verify(sp.fst(params) == 'XTZ-USD', 14) # @parameter%getXtzUsdRate_callback : @storage
            DUP;        # @parameter%getXtzUsdRate_callback : @parameter%getXtzUsdRate_callback : @storage
            CAR;        # string : @parameter%getXtzUsdRate_callback : @storage
            PUSH string "XTZ-USD"; # string : string : @parameter%getXtzUsdRate_callback : @storage
            COMPARE;    # int : @parameter%getXtzUsdRate_callback : @storage
            EQ;         # bool : @parameter%getXtzUsdRate_callback : @storage
            IF
              {}
              {
                PUSH int 14; # int : @parameter%getXtzUsdRate_callback : @storage
                FAILWITH;   # FAILED
              }; # @parameter%getXtzUsdRate_callback : @storage
            # sp.transfer(sp.snd(sp.snd(params)) * 1000000000000, sp.tez(0), sp.contract(sp.TNat, self.data.clientCallback.open_some()).open_some()) # @parameter%getXtzUsdRate_callback : @storage
            NIL operation; # list operation : @parameter%getXtzUsdRate_callback : @storage
            DUP 3;      # @storage : list operation : @parameter%getXtzUsdRate_callback : @storage
            CAR;        # pair (option %clientCallback address) (address %governorContractAddress) : list operation : @parameter%getXtzUsdRate_callback : @storage
            CAR;        # option address : list operation : @parameter%getXtzUsdRate_callback : @storage
            IF_NONE
              {
                UNIT;       # unit : list operation : @parameter%getXtzUsdRate_callback : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%getXtzUsdRate_callback : @storage
            CONTRACT nat; # option (contract nat) : list operation : @parameter%getXtzUsdRate_callback : @storage
            IF_NONE
              {
                UNIT;       # unit : list operation : @parameter%getXtzUsdRate_callback : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%getXtzUsdRate_callback : @storage
            PUSH mutez 0; # mutez : @some : list operation : @parameter%getXtzUsdRate_callback : @storage
            PUSH nat 1000000000000; # nat : mutez : @some : list operation : @parameter%getXtzUsdRate_callback : @storage
            DIG 4;      # @parameter%getXtzUsdRate_callback : nat : mutez : @some : list operation : @storage
            GET 4;      # nat : nat : mutez : @some : list operation : @storage
            MUL;        # nat : mutez : @some : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
            SWAP;       # @storage : list operation
            # self.data.state = 0 # @storage : list operation
            PUSH int 0; # int : @storage : list operation
            UPDATE 6;   # @storage : list operation
            # self.data.clientCallback = sp.none # @storage : list operation
            UNPAIR;     # pair (option %clientCallback address) (address %governorContractAddress) : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : list operation
            CDR;        # address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : list operation
            NONE address; # option address : address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : list operation
            PAIR;       # pair (option address) address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : list operation
            PAIR;       # pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))) : list operation
            SWAP;       # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%setGovernorContract
                # == setGovernorContract ==
                # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setGovernorContract
                DUP;        # @storage : @storage : @parameter%setGovernorContract
                DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                CAR;        # pair (option %clientCallback address) (address %governorContractAddress) : @parameter%setGovernorContract : @storage
                CDR;        # address : @parameter%setGovernorContract : @storage
                SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                COMPARE;    # int : @parameter%setGovernorContract : @storage
                EQ;         # bool : @parameter%setGovernorContract : @storage
                IF
                  {}
                  {
                    PUSH int 4; # int : @parameter%setGovernorContract : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%setGovernorContract : @storage
                SWAP;       # @storage : @parameter%setGovernorContract
                # self.data.governorContractAddress = params # @storage : @parameter%setGovernorContract
                UNPAIR;     # pair (option %clientCallback address) (address %governorContractAddress) : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : @parameter%setGovernorContract
                CAR;        # option address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)) : @parameter%setGovernorContract
                DIG 2;      # @parameter%setGovernorContract : option address : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
                SWAP;       # option address : @parameter%setGovernorContract : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
                PAIR;       # pair (option address) @parameter%setGovernorContract : pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))
                PAIR;       # pair (pair (option address) @parameter%setGovernorContract) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
              }
              {
                SWAP;       # @storage : @parameter%setMaxDataDelaySec
                # == setMaxDataDelaySec ==
                # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setMaxDataDelaySec
                DUP;        # @storage : @storage : @parameter%setMaxDataDelaySec
                DUG 2;      # @storage : @parameter%setMaxDataDelaySec : @storage
                CAR;        # pair (option %clientCallback address) (address %governorContractAddress) : @parameter%setMaxDataDelaySec : @storage
                CDR;        # address : @parameter%setMaxDataDelaySec : @storage
                SENDER;     # @sender : address : @parameter%setMaxDataDelaySec : @storage
                COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                IF
                  {}
                  {
                    PUSH int 4; # int : @parameter%setMaxDataDelaySec : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%setMaxDataDelaySec : @storage
                # self.data.maxDataDelaySec = params # @parameter%setMaxDataDelaySec : @storage
                UPDATE 5;   # @storage
              }; # pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
            NIL operation; # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
          }; # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
      }; # list operation : pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))
    PAIR;       # pair (list operation) (pair (pair (option address) address) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state))))
  };