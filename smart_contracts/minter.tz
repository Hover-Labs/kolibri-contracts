parameter (or (or (or (or (pair %borrow nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (pair %deposit address (pair address (pair nat (pair nat (pair bool (pair int int))))))) (or (contract %getInterestIndex nat) (nat %initialize))) (or (or (pair %liquidate nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair %repay address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (or (nat %setCollateralizationPercentage) (or (address %setDeveloperFundContract) (address %setGovernorContract))))) (or (or (or (address %setInitializerContract) (nat %setLiquidationFeePercent)) (or (address %setLiquidityPoolContract) (or (address %setOvenProxyContract) (nat %setPrivateLiquidationThreshold)))) (or (or (nat %setStabilityFee) (address %setStabilityFundContract)) (or (address %setTokenContract) (or (pair %updateFundSplits (nat %developerFundSplit) (nat %stabilityFundSplit)) (pair %withdraw nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))));
storage   (pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))));
code
  {
    LAMBDA
      (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
      (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
      {
        UNPAIR;     # pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 5;      # nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        SWAP;       # pair int (pair nat (pair nat nat)) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUG 2;      # pair int (pair nat (pair nat nat)) : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 3;      # nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        ADD;        # nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PUSH nat 1000000000000000000; # nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DIG 2;      # pair int (pair nat (pair nat nat)) : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 5;      # nat : pair int (pair nat (pair nat nat)) : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        SWAP;       # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUG 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 3;      # nat : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        ADD;        # nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        CAR;        # int : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        ISNAT;      # option nat : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PUSH nat 1000000000000000000; # nat : @some : nat : nat : nat : pair int (pair nat (pair nat nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DIG 5;      # pair int (pair nat (pair nat nat)) : nat : @some : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 6;      # nat : nat : @some : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        MUL;        # nat : @some : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        EDIV;       # option (pair nat nat) : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        CAR;        # nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        MUL;        # nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        EDIV;       # option (pair nat nat) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        CAR;        # nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        SUB;        # int : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        ISNAT;      # option nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PAIR;       # pair @some (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))
      }; # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
    LAMBDA
      (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
      (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
      {
        UNPAIR;     # pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 4;      # nat : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PUSH nat 100; # nat : nat : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        SWAP;       # nat : nat : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # nat : nat : nat : nat : pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DIG 4;      # pair nat (pair nat nat) : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        GET 3;      # nat : pair nat (pair nat nat) : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        SWAP;       # pair nat (pair nat nat) : nat : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        CAR;        # nat : nat : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        MUL;        # nat : nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        EDIV;       # option (pair nat nat) : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
          }; # nat : nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        MUL;        # nat : nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        EDIV;       # option (pair nat nat) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        IF_NONE
          {
            UNIT;       # unit : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
          }; # nat : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        MUL;        # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
        PAIR;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))
      }; # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair @parameter @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
    SWAP;       # pair @parameter @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
    UNPAIR;     # @parameter : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    PUSH bool True; # bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # @storage : bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # bool : bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # @storage : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @storage : @storage : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # @storage : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SENDER;     # @sender : address : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @parameter%borrow : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair nat (pair bool (pair int (pair int nat))) : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair bool (pair int (pair int nat)) : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair bool (pair int (pair int nat)) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair int (pair int nat) : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair int (pair int nat) : pair int (pair int nat) : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair int (pair int nat) : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool False; # bool : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # bool : bool : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 16; # int : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 18;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 19;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 17;     # @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 18;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 18;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow
                    DIG 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow
                    DUG 18;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 18;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 18;     # nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # int : nat : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # int : int : nat : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # int : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # pair int nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 0; # nat : nat : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LT;         # bool : nat : int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {
                        DIG 4;      # pair int (pair int nat) : nat : int : pair int nat : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 5;      # pair bool (pair int (pair int nat)) : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # pair nat (pair bool (pair int (pair int nat))) : nat : int : pair int nat : bool : nat : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 7;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : nat : int : pair int nat : bool : nat : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : int : pair int nat : bool : nat : nat : address : address : nat : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : address : address : nat : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # @parameter%borrow : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair nat nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 11;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 10;     # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 7;      # nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address
                        DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int nat : bool : nat : address : address
                        DUG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUG 9;      # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GE;         # bool : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF
                          {}
                          {
                            PUSH int 11; # int : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }; # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }
                      {
                        DROP;       # int : pair int nat : bool : pair int (pair int nat) : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 3;      # pair int (pair int nat) : int : pair int nat : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 4;      # pair bool (pair int (pair int nat)) : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 4;      # nat : int : pair int nat : bool : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 4;      # pair nat (pair bool (pair int (pair int nat))) : int : pair int nat : bool : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 5;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : int : pair int nat : bool : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : int : pair int nat : bool : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # nat : int : pair int nat : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : int : pair int nat : bool : nat : address : address : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : @parameter%borrow : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # @parameter%borrow : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 7;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NIL operation; # list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 8;      # address : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 0; # mutez : @some : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 5;      # pair int nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 8;      # address : nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair address nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    BALANCE;    # @balance : @some : list operation : int : pair int nat : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 5;      # bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    INT;        # int : bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 9;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address
                    DUG 9;      # nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # int : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ADD;        # nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : pair int bool : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 5;      # pair int nat : pair int (pair int bool) : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : pair int (pair int bool) : @balance : @some : list operation : pair int nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # nat : nat : pair int (pair int bool) : @balance : @some : list operation : pair int nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ADD;        # nat : pair int (pair int bool) : @balance : @some : list operation : pair int nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : pair int nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat
                    DUG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 4;      # address : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat
                    DUG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 7;      # address : @some : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # nat : list operation : pair int nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : list operation : pair int nat
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : pair int nat
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : pair int nat
                    UNPAIR;     # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : pair int nat
                    CDR;        # nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : pair int nat
                    DIG 6;      # pair int nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    CDR;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    DIG 5;      # nat : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    ADD;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    EXEC;       # nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # address : nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    GET 3;      # pair (pair timestamp nat) (pair address address) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # pair timestamp nat : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # timestamp : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                  }
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DROP;       # @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool True; # bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # @storage : bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # bool : bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # @storage : @parameter%deposit : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @storage : @storage : @parameter%deposit : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # @storage : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SENDER;     # @sender : address : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int int)))) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # pair nat (pair bool (pair int int)) : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair bool (pair int int) : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair bool (pair int int) : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # bool : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool False; # bool : bool : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 16; # int : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NIL operation; # list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # @storage : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    BALANCE;    # @balance : @some : list operation : bool : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 3;      # bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    INT;        # int : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 7;      # pair int int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CAR;        # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 8;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DUP 7;      # pair int int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    CDR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage
                    DIG 9;      # @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    DIG 2;      # pair int (pair nat (pair @some nat)) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : pair int bool : @balance : @some : list operation : pair int int : nat : address
                    DUG 8;      # nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # pair int int : nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # int : nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ADD;        # nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 4;      # nat : pair int (pair int bool) : @balance : @some : list operation : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                    DUG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 4;      # address : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                    DUG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 7;      # address : @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : list operation
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    UNPAIR;     # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    CDR;        # nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    DIG 4;      # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    EXEC;       # nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # address : nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    GET 3;      # pair (pair timestamp nat) (pair address address) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # pair timestamp nat : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # timestamp : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
              }
              {
                DIG 3;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.left.left.right : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                DROP;       # @parameter.left.left.right : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%getInterestIndex : @storage
                    DROP;       # @parameter%getInterestIndex : @storage
                    PUSH bool True; # bool : @parameter%getInterestIndex : @storage
                    DUP 3;      # @storage : bool : @parameter%getInterestIndex : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%getInterestIndex : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%getInterestIndex : @storage
                    CDR;        # bool : bool : @parameter%getInterestIndex : @storage
                    COMPARE;    # int : @parameter%getInterestIndex : @storage
                    EQ;         # bool : @parameter%getInterestIndex : @storage
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%getInterestIndex : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%getInterestIndex : @storage
                    PUSH mutez 0; # mutez : @parameter%getInterestIndex : @storage
                    AMOUNT;     # @amount : mutez : @parameter%getInterestIndex : @storage
                    COMPARE;    # int : @parameter%getInterestIndex : @storage
                    EQ;         # bool : @parameter%getInterestIndex : @storage
                    IF
                      {}
                      {
                        PUSH int 15; # int : @parameter%getInterestIndex : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%getInterestIndex : @storage
                    NIL operation; # list operation : @parameter%getInterestIndex : @storage
                    SWAP;       # @parameter%getInterestIndex : list operation : @storage
                    PUSH mutez 0; # mutez : @parameter%getInterestIndex : list operation : @storage
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    DUP 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    DUP 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    DUP 6;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    EXEC;       # nat : mutez : @parameter%getInterestIndex : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    DUP 4;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    DUP 4;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    DUP 4;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : @storage
                    EXEC;       # nat : list operation : @storage
                    SWAP;       # list operation : nat : @storage
                    DUP 3;      # @storage : list operation : nat : @storage
                    GET 8;      # address : list operation : nat : @storage
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : nat : @storage
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @storage
                    DIG 5;      # @storage : nat : mutez : @some : list operation : nat
                    DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @storage : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : @storage : nat : mutez : @some : list operation : nat
                    GET 3;      # nat : @storage : nat : mutez : @some : list operation : nat
                    SWAP;       # @storage : nat : nat : mutez : @some : list operation : nat
                    DUP;        # @storage : @storage : nat : nat : mutez : @some : list operation : nat
                    DUG 7;      # @storage : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @storage
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @storage
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @storage
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @storage
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @storage
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @storage
                      }; # nat : mutez : @some : list operation : nat : @storage
                    DUP 6;      # @storage : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @storage
                    GET 4;      # address : nat : mutez : @some : list operation : nat : @storage
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : @storage
                    TRANSFER_TOKENS; # operation : list operation : nat : @storage
                    CONS;       # list operation : nat : @storage
                    DUP 3;      # @storage : list operation : nat : @storage
                    GET 8;      # address : list operation : nat : @storage
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : nat : @storage
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @storage
                    DIG 5;      # @storage : nat : mutez : @some : list operation : nat
                    DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @storage : nat : mutez : @some : list operation : nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : @storage : nat : mutez : @some : list operation : nat
                    GET 3;      # nat : @storage : nat : mutez : @some : list operation : nat
                    SWAP;       # @storage : nat : nat : mutez : @some : list operation : nat
                    DUP;        # @storage : @storage : nat : nat : mutez : @some : list operation : nat
                    DUG 7;      # @storage : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @storage
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @storage
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @storage
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @storage
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @storage
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @storage
                      }; # nat : mutez : @some : list operation : nat : @storage
                    DUP 6;      # @storage : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : mutez : @some : list operation : nat : @storage
                    CAR;        # nat : nat : mutez : @some : list operation : nat : @storage
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : @storage
                    SUB;        # int : nat : mutez : @some : list operation : nat : @storage
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : @storage
                    SUB;        # int : mutez : @some : list operation : nat : @storage
                    ISNAT;      # option nat : mutez : @some : list operation : nat : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : @storage
                    DUP 6;      # @storage : @some : mutez : @some : list operation : nat : @storage
                    GET 7;      # address : @some : mutez : @some : list operation : nat : @storage
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : @storage
                    TRANSFER_TOKENS; # operation : list operation : nat : @storage
                    CONS;       # list operation : nat : @storage
                    SWAP;       # nat : list operation : @storage
                    DIG 2;      # @storage : nat : list operation
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation
                    CDR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation
                    DIG 4;      # nat : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 7;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CAR;        # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NOW;        # @now : timestamp : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EDIV;       # option (pair nat nat) : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    MUL;        # nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    INT;        # int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 6;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # timestamp : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%initialize : @storage
                    DROP;       # @parameter%initialize : @storage
                    PUSH bool False; # bool : @parameter%initialize : @storage
                    DUP 3;      # @storage : bool : @parameter%initialize : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%initialize : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%initialize : @storage
                    CDR;        # bool : bool : @parameter%initialize : @storage
                    COMPARE;    # int : @parameter%initialize : @storage
                    EQ;         # bool : @parameter%initialize : @storage
                    IF
                      {}
                      {
                        PUSH int 29; # int : @parameter%initialize : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%initialize : @storage
                    SWAP;       # @storage : @parameter%initialize
                    DUP;        # @storage : @storage : @parameter%initialize
                    DUG 2;      # @storage : @parameter%initialize : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%initialize : @storage
                    GET 5;      # address : @parameter%initialize : @storage
                    SENDER;     # @sender : address : @parameter%initialize : @storage
                    COMPARE;    # int : @parameter%initialize : @storage
                    EQ;         # bool : @parameter%initialize : @storage
                    IF
                      {}
                      {
                        PUSH int 28; # int : @parameter%initialize : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%initialize : @storage
                    SWAP;       # @storage : @parameter%initialize
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                    CDR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                    DIG 4;      # @parameter%initialize : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair @parameter%initialize nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    CAR;        # address : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PUSH bool True; # bool : address : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # address : bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair address bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NIL operation; # list operation : pair (pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    PUSH bool True; # bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # @storage : bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # bool : bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # @storage : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @storage : @storage : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # @storage : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SENDER;     # @sender : address : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @parameter%liquidate : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # pair nat (pair nat (pair bool (pair int (pair int address)))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair nat (pair bool (pair int (pair int address))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair nat (pair bool (pair int (pair int address))) : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair bool (pair int (pair int address)) : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair bool (pair int (pair int address)) : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # bool : pair int (pair int address) : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair int (pair int address) : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # int : pair int address : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool False; # bool : int : pair int address : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 3;      # bool : bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 16; # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # @storage : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 5;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate
                    DIG 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate
                    DUG 13;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 13;     # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # int : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate
                    DIG 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate
                    DUG 12;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 12;     # nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LT;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 10; # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # pair int address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {
                        PUSH bool True; # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }
                      {
                        DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 7;      # address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 3;      # pair int address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {
                        DIG 5;      # nat : int : pair int address : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 5;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : int : pair int address : nat : nat : address : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 5;      # @parameter%liquidate : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH bool True; # bool : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }
                      {
                        DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : int : pair int address : nat : nat : address : nat : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : nat : @parameter%liquidate : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # @parameter%liquidate : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 5;      # pair nat nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair nat nat : nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # int : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 5;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 6;      # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat
                        DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat
                        DUG 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUG 10;     # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 4;      # int : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 6;      # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 7;      # nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair nat (pair nat nat) : @some : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # pair nat (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @some : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : @some : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : int : pair int address : nat : nat : address
                        DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : @some : int : pair int address : nat : nat : address
                        DUG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUG 8;      # nat : @some : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        LT;         # bool : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # bool : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 26; # int : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NIL operation; # list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 8;      # address : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %burn (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 0; # mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address
                    DUG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 12;     # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # int : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 11;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address
                    DUG 11;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 11;     # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # int : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair int address : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # address : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair address nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # pair int address : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # address : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT unit; # option (contract unit) : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 1; # mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 7;      # nat : nat : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 0; # mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool True; # bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    INT;        # int : bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 0; # nat : pair int bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    INT;        # int : pair int bool : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair int bool) : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 0; # nat : pair int (pair int bool) : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : int : pair int address : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 7;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair nat nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 8;      # address : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 0; # mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DUG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 13;     # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # int : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair nat nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 8;      # address : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH mutez 0; # mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 15;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 13;     # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DUG 13;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 13;     # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # int : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair nat nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 1000000000000000000; # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 12;     # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat
                    DUG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 12;     # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # int : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # nat : nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    MUL;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 7;      # address : @some : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    TRANSFER_TOKENS; # operation : list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CONS;       # list operation : nat : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 13;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 9;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 11;     # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : pair int address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat
                    CAR;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : int : nat
                    DIG 7;      # int : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat
                    ISNAT;      # option nat : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat
                    ADD;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat
                    DIG 7;      # nat : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    ADD;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                    DIG 5;      # nat : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SUB;        # int : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    ISNAT;      # option nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair @some nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair address bool) (pair address nat) : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair address bool : pair address nat : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair address nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 7;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    CAR;        # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    EXEC;       # nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # address : nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair address nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair address bool : pair address nat : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair address bool) (pair address nat) : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    GET 3;      # pair (pair timestamp nat) (pair address address) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # pair timestamp nat : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # timestamp : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                  }
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DROP;       # @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool True; # bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # @storage : bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # bool : bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # @storage : @parameter%repay : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # @storage : @storage : @parameter%repay : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 4;      # address : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SENDER;     # @sender : address : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%repay : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # pair nat (pair bool (pair int (pair int nat))) : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair bool (pair int (pair int nat)) : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair bool (pair int (pair int nat)) : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # bool : pair int (pair int nat) : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # pair int (pair int nat) : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH bool False; # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # bool : bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EQ;         # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 16; # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 9;      # @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int nat : bool : nat : address : address
                    DUG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 9;      # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # int : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # pair int nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LE;         # bool : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {}
                      {
                        PUSH int 30; # int : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }; # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 6;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : nat : address : address
                    DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                    DUG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUG 8;      # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    SWAP;       # int : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP;        # int : int : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUG 2;      # int : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ISNAT;      # option nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    ADD;        # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DUP 3;      # pair int nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    CDR;        # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    COMPARE;    # int : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    LT;         # bool : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    IF
                      {
                        SWAP;       # pair int nat : int : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # pair int nat : pair int nat : int : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 2;      # pair int nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 4;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address
                        DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int nat : bool : nat : address : address
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : int : pair int nat : bool : nat : address : address
                        DUG 8;      # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 2;      # int : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ADD;        # nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 3;      # nat : @some : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }
                      {
                        DUP 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 3;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 6;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int nat : bool : nat : address : address
                        DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                        DUG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUG 8;      # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # int : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # int : int : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 2;      # int : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ADD;        # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 0; # nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 8;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 4;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int nat : bool : nat : address : address
                        DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int nat : bool : nat : address : address
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int nat : bool : nat : address : address
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int nat : bool : nat : address : address
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : int : pair int nat : bool : nat : address : address
                        DUG 8;      # nat : nat : int : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 2;      # int : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ADD;        # nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 3;      # pair int nat : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : pair int nat : bool : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 4;      # nat : @some : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NIL operation; # list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %burn (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # pair int nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 8;      # address : nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUG 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 4;      # address : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 8;      # address : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address
                    DUG 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair nat nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 7;      # address : @some : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : nat : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # nat : list operation : nat : nat : pair int nat : bool : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : list operation : nat : nat : pair int nat : bool : address
                    UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : pair int nat : bool : address
                    UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : pair int nat : bool : address
                    UNPAIR;     # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : pair int nat : bool : address
                    CDR;        # nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : pair int nat : bool : address
                    DIG 8;      # pair int nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : bool : address
                    CDR;        # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation : nat : nat : bool : address
                    DIG 5;      # nat : nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    SUB;        # int : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    ISNAT;      # option nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    PAIR;       # pair @some nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    PAIR;       # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    PAIR;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : nat : nat : bool : address
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : bool : address
                    DUP;        # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : bool : address
                    DUG 6;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 4;      # address : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    BALANCE;    # @balance : @some : list operation : nat : nat : bool : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 10;     # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 10;     # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 10;     # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EXEC;       # nat : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int bool : @balance : @some : list operation : nat : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 5;      # nat : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : pair int bool : @balance : @some : list operation : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : nat : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 4;      # nat : pair int (pair int bool) : @balance : @some : list operation : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : address : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CONS;       # list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair address bool) (pair address nat) : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair address bool : pair address nat : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair address nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 7;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    CAR;        # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    EXEC;       # nat : address : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # address : nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair address nat : pair address bool : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair address bool : pair address nat : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair address bool) (pair address nat) : pair (pair @some nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    SWAP;       # pair (pair @some nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUP;        # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    DUG 2;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SWAP;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    UNPAIR;     # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CDR;        # nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    PUSH nat 60; # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DUP 8;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # pair timestamp nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    CAR;        # timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    NOW;        # @now : timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    SUB;        # int : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    ISNAT;      # option nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    EDIV;       # option (pair nat nat) : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    MUL;        # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    INT;        # int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                    DIG 6;      # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    GET 3;      # pair (pair timestamp nat) (pair address address) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # pair timestamp nat : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    CAR;        # timestamp : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                    PAIR;       # pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                  }; # list operation : pair (pair (pair (pair @some nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
              }
              {
                DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.left.right.right : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                DROP;       # @parameter.left.right.right : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                DIG 2;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.left.right.right : @storage
                DROP;       # @parameter.left.right.right : @storage
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setCollateralizationPercentage
                    DUP;        # @storage : @storage : @parameter%setCollateralizationPercentage
                    DUG 2;      # @storage : @parameter%setCollateralizationPercentage : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setCollateralizationPercentage : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setCollateralizationPercentage : @storage
                    CAR;        # address : @parameter%setCollateralizationPercentage : @storage
                    SENDER;     # @sender : address : @parameter%setCollateralizationPercentage : @storage
                    COMPARE;    # int : @parameter%setCollateralizationPercentage : @storage
                    EQ;         # bool : @parameter%setCollateralizationPercentage : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setCollateralizationPercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setCollateralizationPercentage : @storage
                    SWAP;       # @storage : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    CAR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    DIG 4;      # @parameter%setCollateralizationPercentage : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # nat : @parameter%setCollateralizationPercentage : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair nat @parameter%setCollateralizationPercentage : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%setDeveloperFundContract
                        DUP;        # @storage : @storage : @parameter%setDeveloperFundContract
                        DUG 2;      # @storage : @parameter%setDeveloperFundContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setDeveloperFundContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setDeveloperFundContract : @storage
                        CAR;        # address : @parameter%setDeveloperFundContract : @storage
                        SENDER;     # @sender : address : @parameter%setDeveloperFundContract : @storage
                        COMPARE;    # int : @parameter%setDeveloperFundContract : @storage
                        EQ;         # bool : @parameter%setDeveloperFundContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setDeveloperFundContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setDeveloperFundContract : @storage
                        SWAP;       # @storage : @parameter%setDeveloperFundContract
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                        UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                        SWAP;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                        CAR;        # nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                        DIG 4;      # @parameter%setDeveloperFundContract : nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # nat : @parameter%setDeveloperFundContract : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair nat @parameter%setDeveloperFundContract : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat @parameter%setDeveloperFundContract : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        SWAP;       # @storage : @parameter%setGovernorContract
                        DUP;        # @storage : @storage : @parameter%setGovernorContract
                        DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setGovernorContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setGovernorContract : @storage
                        CAR;        # address : @parameter%setGovernorContract : @storage
                        SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                        COMPARE;    # int : @parameter%setGovernorContract : @storage
                        EQ;         # bool : @parameter%setGovernorContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setGovernorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setGovernorContract : @storage
                        SWAP;       # @storage : @parameter%setGovernorContract
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        CDR;        # bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        DIG 4;      # @parameter%setGovernorContract : bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair @parameter%setGovernorContract bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                NIL operation; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
          }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
      }
      {
        IF_LEFT
          {
            DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.right.left : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
            DROP;       # @parameter.right.left : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
            DIG 2;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.right.left : @storage
            DROP;       # @parameter.right.left : @storage
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setInitializerContract
                    DUP;        # @storage : @storage : @parameter%setInitializerContract
                    DUG 2;      # @storage : @parameter%setInitializerContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setInitializerContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setInitializerContract : @storage
                    CAR;        # address : @parameter%setInitializerContract : @storage
                    SENDER;     # @sender : address : @parameter%setInitializerContract : @storage
                    COMPARE;    # int : @parameter%setInitializerContract : @storage
                    EQ;         # bool : @parameter%setInitializerContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setInitializerContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setInitializerContract : @storage
                    SWAP;       # @storage : @parameter%setInitializerContract
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    CDR;        # nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                    DIG 4;      # @parameter%setInitializerContract : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair @parameter%setInitializerContract nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair @parameter%setInitializerContract nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setLiquidationFeePercent
                    DUP;        # @storage : @storage : @parameter%setLiquidationFeePercent
                    DUG 2;      # @storage : @parameter%setLiquidationFeePercent : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setLiquidationFeePercent : @storage
                    CAR;        # address : @parameter%setLiquidationFeePercent : @storage
                    SENDER;     # @sender : address : @parameter%setLiquidationFeePercent : @storage
                    COMPARE;    # int : @parameter%setLiquidationFeePercent : @storage
                    EQ;         # bool : @parameter%setLiquidationFeePercent : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setLiquidationFeePercent : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setLiquidationFeePercent : @storage
                    SWAP;       # @storage : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setLiquidationFeePercent
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    CAR;        # timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    DIG 4;      # @parameter%setLiquidationFeePercent : timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # timestamp : @parameter%setLiquidationFeePercent : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair timestamp @parameter%setLiquidationFeePercent : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setLiquidityPoolContract
                    DUP;        # @storage : @storage : @parameter%setLiquidityPoolContract
                    DUG 2;      # @storage : @parameter%setLiquidityPoolContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setLiquidityPoolContract : @storage
                    CAR;        # address : @parameter%setLiquidityPoolContract : @storage
                    SENDER;     # @sender : address : @parameter%setLiquidityPoolContract : @storage
                    COMPARE;    # int : @parameter%setLiquidityPoolContract : @storage
                    EQ;         # bool : @parameter%setLiquidityPoolContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setLiquidityPoolContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setLiquidityPoolContract : @storage
                    SWAP;       # @storage : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setLiquidityPoolContract
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    SWAP;       # pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    CDR;        # address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    DIG 4;      # @parameter%setLiquidityPoolContract : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair @parameter%setLiquidityPoolContract address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair @parameter%setLiquidityPoolContract address : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%setOvenProxyContract
                        DUP;        # @storage : @storage : @parameter%setOvenProxyContract
                        DUG 2;      # @storage : @parameter%setOvenProxyContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setOvenProxyContract : @storage
                        CAR;        # address : @parameter%setOvenProxyContract : @storage
                        SENDER;     # @sender : address : @parameter%setOvenProxyContract : @storage
                        COMPARE;    # int : @parameter%setOvenProxyContract : @storage
                        EQ;         # bool : @parameter%setOvenProxyContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setOvenProxyContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setOvenProxyContract : @storage
                        SWAP;       # @storage : @parameter%setOvenProxyContract
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setOvenProxyContract
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                        SWAP;       # pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                        CAR;        # address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                        DIG 4;      # @parameter%setOvenProxyContract : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # address : @parameter%setOvenProxyContract : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair address @parameter%setOvenProxyContract : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair address @parameter%setOvenProxyContract : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        SWAP;       # @storage : @parameter%setPrivateLiquidationThreshold
                        DUP;        # @storage : @storage : @parameter%setPrivateLiquidationThreshold
                        DUG 2;      # @storage : @parameter%setPrivateLiquidationThreshold : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setPrivateLiquidationThreshold : @storage
                        CAR;        # address : @parameter%setPrivateLiquidationThreshold : @storage
                        SENDER;     # @sender : address : @parameter%setPrivateLiquidationThreshold : @storage
                        COMPARE;    # int : @parameter%setPrivateLiquidationThreshold : @storage
                        EQ;         # bool : @parameter%setPrivateLiquidationThreshold : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setPrivateLiquidationThreshold : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setPrivateLiquidationThreshold : @storage
                        SWAP;       # @storage : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setPrivateLiquidationThreshold
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        SWAP;       # pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        CDR;        # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        DIG 4;      # @parameter%setPrivateLiquidationThreshold : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair @parameter%setPrivateLiquidationThreshold nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
            NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                DIG 3;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter.right.right.left : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                DROP;       # @parameter.right.right.left : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%setStabilityFee : @storage
                    DROP;       # @parameter%setStabilityFee : @storage
                    SWAP;       # @storage : @parameter%setStabilityFee
                    DUP;        # @storage : @storage : @parameter%setStabilityFee
                    DUG 2;      # @storage : @parameter%setStabilityFee : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setStabilityFee : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setStabilityFee : @storage
                    CAR;        # address : @parameter%setStabilityFee : @storage
                    SENDER;     # @sender : address : @parameter%setStabilityFee : @storage
                    COMPARE;    # int : @parameter%setStabilityFee : @storage
                    EQ;         # bool : @parameter%setStabilityFee : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setStabilityFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setStabilityFee : @storage
                    PUSH bool True; # bool : @parameter%setStabilityFee : @storage
                    DUP 3;      # @storage : bool : @parameter%setStabilityFee : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%setStabilityFee : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%setStabilityFee : @storage
                    CDR;        # bool : bool : @parameter%setStabilityFee : @storage
                    COMPARE;    # int : @parameter%setStabilityFee : @storage
                    EQ;         # bool : @parameter%setStabilityFee : @storage
                    IF
                      {}
                      {
                        PUSH int 31; # int : @parameter%setStabilityFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setStabilityFee : @storage
                    PUSH nat 60; # nat : @parameter%setStabilityFee : @storage
                    DUP 3;      # @storage : nat : @parameter%setStabilityFee : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : @parameter%setStabilityFee : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : @parameter%setStabilityFee : @storage
                    CAR;        # timestamp : nat : @parameter%setStabilityFee : @storage
                    NOW;        # @now : timestamp : nat : @parameter%setStabilityFee : @storage
                    SUB;        # int : nat : @parameter%setStabilityFee : @storage
                    ISNAT;      # option nat : nat : @parameter%setStabilityFee : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : @parameter%setStabilityFee : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%setStabilityFee : @storage
                    EDIV;       # option (pair nat nat) : @parameter%setStabilityFee : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @parameter%setStabilityFee : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : @parameter%setStabilityFee : @storage
                      }; # nat : @parameter%setStabilityFee : @storage
                    DUP 3;      # @storage : nat : @parameter%setStabilityFee : @storage
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    DUP 6;      # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    DUP 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : @storage
                    DIG 8;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : @parameter%setStabilityFee
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : @parameter%setStabilityFee
                    DUG 3;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # nat : nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    MUL;        # nat : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    INT;        # int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 7;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    CAR;        # timestamp : int : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : @parameter%setStabilityFee
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : @parameter%setStabilityFee
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : @parameter%setStabilityFee
                    DUG 2;      # nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    LAMBDA
                      (pair nat (pair nat nat))
                      nat
                      {
                        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                        SWAP;       # pair nat (pair nat nat) : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                        GET 3;      # nat : pair nat (pair nat nat) : nat
                        SWAP;       # pair nat (pair nat nat) : nat : nat
                        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                        MUL;        # nat : nat : pair nat (pair nat nat)
                        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                        ADD;        # nat : nat : pair nat (pair nat nat)
                        DIG 2;      # pair nat (pair nat nat) : nat : nat
                        CAR;        # nat : nat : nat
                        MUL;        # nat : nat
                        EDIV;       # option (pair nat nat)
                        IF_NONE
                          {
                            UNIT;       # unit
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat
                          }; # nat
                      }; # lambda (pair nat (pair nat nat)) nat : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 4;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 4;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EXEC;       # nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NIL operation; # list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 4;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 8;      # address : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    GET 3;      # nat : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    SWAP;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 7;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 4;      # address : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    TRANSFER_TOKENS; # operation : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CONS;       # list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 4;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 8;      # address : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    GET 3;      # nat : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    SWAP;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee
                    DUG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 7;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 7;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @some : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 7;      # address : @some : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    TRANSFER_TOKENS; # operation : list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CONS;       # list operation : nat : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 3;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : nat : @parameter%setStabilityFee
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : nat : @parameter%setStabilityFee
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : nat : @parameter%setStabilityFee
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : nat : @parameter%setStabilityFee
                    CDR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : nat : @parameter%setStabilityFee
                    DIG 5;      # nat : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @parameter%setStabilityFee
                    PAIR;       # pair nat nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @parameter%setStabilityFee
                    PAIR;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @parameter%setStabilityFee
                    PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @parameter%setStabilityFee
                    SWAP;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : @parameter%setStabilityFee
                    UNPAIR;     # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : @parameter%setStabilityFee
                    SWAP;       # pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : @parameter%setStabilityFee
                    UNPAIR;     # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : @parameter%setStabilityFee
                    CAR;        # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : @parameter%setStabilityFee
                    DIG 5;      # @parameter%setStabilityFee : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # nat : @parameter%setStabilityFee : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair nat @parameter%setStabilityFee : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%setStabilityFundContract : @storage
                    DROP;       # @parameter%setStabilityFundContract : @storage
                    SWAP;       # @storage : @parameter%setStabilityFundContract
                    DUP;        # @storage : @storage : @parameter%setStabilityFundContract
                    DUG 2;      # @storage : @parameter%setStabilityFundContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setStabilityFundContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setStabilityFundContract : @storage
                    CAR;        # address : @parameter%setStabilityFundContract : @storage
                    SENDER;     # @sender : address : @parameter%setStabilityFundContract : @storage
                    COMPARE;    # int : @parameter%setStabilityFundContract : @storage
                    EQ;         # bool : @parameter%setStabilityFundContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setStabilityFundContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setStabilityFundContract : @storage
                    UPDATE 7;   # @storage
                    NIL operation; # list operation : @storage
                  }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%setTokenContract : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DROP;       # @parameter%setTokenContract : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                    DIG 2;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%setTokenContract : @storage
                    DROP;       # @parameter%setTokenContract : @storage
                    SWAP;       # @storage : @parameter%setTokenContract
                    DUP;        # @storage : @storage : @parameter%setTokenContract
                    DUG 2;      # @storage : @parameter%setTokenContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setTokenContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setTokenContract : @storage
                    CAR;        # address : @parameter%setTokenContract : @storage
                    SENDER;     # @sender : address : @parameter%setTokenContract : @storage
                    COMPARE;    # int : @parameter%setTokenContract : @storage
                    EQ;         # bool : @parameter%setTokenContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setTokenContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTokenContract : @storage
                    UPDATE 8;   # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        DIG 2;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%updateFundSplits : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DROP;       # @parameter%updateFundSplits : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : @parameter%updateFundSplits : @storage
                        DROP;       # @parameter%updateFundSplits : @storage
                        PUSH nat 1000000000000000000; # nat : @parameter%updateFundSplits : @storage
                        SWAP;       # @parameter%updateFundSplits : nat : @storage
                        DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : @storage
                        CDR;        # nat : @parameter%updateFundSplits : nat : @storage
                        SWAP;       # @parameter%updateFundSplits : nat : nat : @storage
                        DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : nat : @storage
                        DUG 3;      # @parameter%updateFundSplits : nat : nat : @parameter%updateFundSplits : @storage
                        CAR;        # nat : nat : nat : @parameter%updateFundSplits : @storage
                        ADD;        # nat : nat : @parameter%updateFundSplits : @storage
                        COMPARE;    # int : @parameter%updateFundSplits : @storage
                        EQ;         # bool : @parameter%updateFundSplits : @storage
                        IF
                          {}
                          {
                            PUSH int 25; # int : @parameter%updateFundSplits : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateFundSplits : @storage
                        SWAP;       # @storage : @parameter%updateFundSplits
                        DUP;        # @storage : @storage : @parameter%updateFundSplits
                        DUG 2;      # @storage : @parameter%updateFundSplits : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%updateFundSplits : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%updateFundSplits : @storage
                        CAR;        # address : @parameter%updateFundSplits : @storage
                        SENDER;     # @sender : address : @parameter%updateFundSplits : @storage
                        COMPARE;    # int : @parameter%updateFundSplits : @storage
                        EQ;         # bool : @parameter%updateFundSplits : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%updateFundSplits : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateFundSplits : @storage
                        SWAP;       # @storage : @parameter%updateFundSplits
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                        UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                        SWAP;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                        CDR;        # address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                        DIG 4;      # @parameter%updateFundSplits : address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        CAR;        # nat : address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair nat address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat address : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        PUSH bool True; # bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 3;      # @storage : bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # bool : bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EQ;         # bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF
                          {}
                          {
                            PUSH int 31; # int : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }; # @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # @storage : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # @storage : @storage : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 2;      # @storage : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 4;      # address : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SENDER;     # @sender : address : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EQ;         # bool : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF
                          {}
                          {
                            PUSH int 2; # int : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }; # @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # @parameter%withdraw : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair nat (pair bool (pair int (pair int mutez))) : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair nat (pair bool (pair int (pair int mutez))) : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair bool (pair int (pair int mutez)) : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair bool (pair int (pair int mutez)) : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # bool : pair int (pair int mutez) : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # pair int (pair int mutez) : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 0; # nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 14;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 4;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 7;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 5;      # pair int mutez : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 13;     # @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 2;      # pair int (pair nat (pair @some nat)) : @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) @storage : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 14;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 14;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw
                        DIG 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw
                        DUG 14;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUG 14;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUG 14;     # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 3;      # int : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ADD;        # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 6;      # nat : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ADD;        # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        COMPARE;    # int : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GT;         # bool : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF
                          {
                            DIG 8;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : int : pair int mutez : bool : nat : nat : address : address : nat : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : nat : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 8;      # @parameter%withdraw : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # pair (pair nat nat) (pair nat address) : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # pair nat nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CDR;        # nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 10;     # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            LAMBDA
                              (pair nat (pair nat nat))
                              nat
                              {
                                PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                                SWAP;       # pair nat (pair nat nat) : nat
                                DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                                GET 3;      # nat : pair nat (pair nat nat) : nat
                                SWAP;       # pair nat (pair nat nat) : nat : nat
                                DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                                DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                                GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                                MUL;        # nat : nat : pair nat (pair nat nat)
                                PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                                ADD;        # nat : nat : pair nat (pair nat nat)
                                DIG 2;      # pair nat (pair nat nat) : nat : nat
                                CAR;        # nat : nat : nat
                                MUL;        # nat : nat
                                EDIV;       # option (pair nat nat)
                                IF_NONE
                                  {
                                    UNIT;       # unit
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    CAR;        # nat
                                  }; # nat
                              }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                              }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 14;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 5;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 8;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 6;      # pair int mutez : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat
                            DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat
                            DUG 12;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            DUG 12;     # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 4;      # int : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ISNAT;      # option nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 7;      # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ADD;        # nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 10;     # nat : nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PUSH nat 1000000000000; # nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PUSH mutez 1; # mutez : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 7;      # pair int mutez : mutez : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CDR;        # mutez : mutez : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            EDIV;       # option (pair nat mutez) : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            CAR;        # nat : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            MUL;        # nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DUP 9;      # nat : nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            SUB;        # int : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            ISNAT;      # option nat : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF_NONE
                              {
                                UNIT;       # unit : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair nat nat : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair @some (pair nat nat) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            SWAP;       # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair @some (pair nat nat) : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 10;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair @some (pair nat nat) : nat : int : pair int mutez : bool : nat : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 2;      # pair @some (pair nat nat) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            PAIR;       # pair (pair @some (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : int : pair int mutez : bool : nat : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : nat : int : pair int mutez : bool : nat : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int mutez : bool : nat : nat : address : address : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : int : pair int mutez : bool : nat : nat : address : address
                            DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int mutez : bool : nat : nat : address : address
                            DUG 10;     # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : nat : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            DUG 10;     # nat : nat : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            COMPARE;    # int : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            GE;         # bool : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            IF
                              {}
                              {
                                PUSH int 11; # int : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                                FAILWITH;   # FAILED
                              }; # int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }
                          {
                            DIG 7;      # nat : int : pair int mutez : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 7;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : int : pair int mutez : bool : nat : nat : address : address : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : @parameter%withdraw : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 7;      # @parameter%withdraw : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DIG 8;      # lambda (pair (pair nat (pair nat nat)) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        NIL operation; # list operation : int : pair int mutez : bool : nat : nat : address : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 6;      # address : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CONTRACT unit; # option (contract unit) : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 4;      # pair int mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        UNIT;       # unit : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        TRANSFER_TOKENS; # operation : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CONS;       # list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 4;      # address : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 4;      # pair int mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH mutez 1; # mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 1000000000000; # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # nat : nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EDIV;       # option (pair nat nat) : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        MUL;        # mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # mutez : @some : list operation : int : pair int mutez : bool : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 5;      # bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DUP 11;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        EXEC;       # nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        INT;        # int : bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        PAIR;       # pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))))
                        DIG 9;      # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 12;     # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EXEC;       # nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 7;      # int : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 9;      # nat : pair @some nat : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 7;      # pair int mutez : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : mutez : @some : list operation : int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 9;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int (pair nat (pair @some nat)) : pair int bool : mutez : @some : list operation : int : nat : address
                        DIG 2;      # pair int (pair nat (pair @some nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : nat : address
                        PAIR;       # pair (pair int (pair nat (pair @some nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : lambda (pair (pair int (pair nat (pair nat nat))) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) (pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))) : pair int bool : mutez : @some : list operation : int : nat : address
                        EXEC;       # pair nat (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))) : pair int bool : mutez : @some : list operation : int : nat : address
                        UNPAIR;     # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair int bool : mutez : @some : list operation : int : nat : address
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : pair int bool : mutez : @some : list operation : int : nat : address
                        DUG 8;      # nat : pair int bool : mutez : @some : list operation : int : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 5;      # int : nat : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ADD;        # nat : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        INT;        # int : pair int bool : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair int (pair int bool) : mutez : @some : list operation : nat : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 4;      # nat : pair int (pair int bool) : mutez : @some : list operation : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CONS;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 4;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair nat nat) (pair nat address) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair nat nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EXEC;       # nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 8;      # address : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                        DUG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        MUL;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 4;      # address : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair address nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CONS;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 3;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 8;      # address : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 5;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        CAR;        # pair (pair nat nat) (pair nat address) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        GET 3;      # nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat
                        SWAP;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat
                        DUG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair nat nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        MUL;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair (pair nat nat) (pair nat address) : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair nat nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 7;      # address : @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair address @some : mutez : @some : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CONS;       # list operation : nat : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # nat : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : list operation
                        UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                        UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                        UNPAIR;     # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                        CDR;        # nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : nat : list operation
                        DIG 4;      # nat : nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair nat nat : pair nat address : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                        DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        LAMBDA
                          (pair nat (pair nat nat))
                          nat
                          {
                            PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
                            SWAP;       # pair nat (pair nat nat) : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
                            GET 3;      # nat : pair nat (pair nat nat) : nat
                            SWAP;       # pair nat (pair nat nat) : nat : nat
                            DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
                            DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
                            GET 4;      # nat : nat : nat : pair nat (pair nat nat)
                            MUL;        # nat : nat : pair nat (pair nat nat)
                            PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
                            ADD;        # nat : nat : pair nat (pair nat nat)
                            DIG 2;      # pair nat (pair nat nat) : nat : nat
                            CAR;        # nat : nat : nat
                            MUL;        # nat : nat
                            EDIV;       # option (pair nat nat)
                            IF_NONE
                              {
                                UNIT;       # unit
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat
                              }; # nat
                          }; # lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 5;      # pair nat nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 7;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        CAR;        # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        EXEC;       # nat : address : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        SWAP;       # address : nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair address nat : pair address bool : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        SWAP;       # pair address bool : pair address nat : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair address bool) (pair address nat) : pair (pair nat nat) (pair nat address) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        SWAP;       # pair (pair nat nat) (pair nat address) : pair (pair address bool) (pair address nat) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                        DUP;        # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                        DUG 2;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SWAP;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        UNPAIR;     # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CDR;        # nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        PUSH nat 60; # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DUP 8;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        GET 3;      # pair (pair timestamp nat) (pair address address) : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # pair timestamp nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        CAR;        # timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        NOW;        # @now : timestamp : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        SUB;        # int : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        ISNAT;      # option nat : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        EDIV;       # option (pair nat nat) : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                          }; # nat : nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        MUL;        # nat : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        INT;        # int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                        DIG 6;      # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        GET 3;      # pair (pair timestamp nat) (pair address address) : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        CAR;        # pair timestamp nat : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        CAR;        # timestamp : int : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        ADD;        # timestamp : nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        PAIR;       # pair timestamp nat : pair address address : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        PAIR;       # pair (pair timestamp nat) (pair address address) : pair (pair nat nat) (pair address address) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        PAIR;       # pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : list operation
                        SWAP;       # pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat)) : pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)) : list operation
                        PAIR;       # pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))) : list operation
                        SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                      }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
              }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
          }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
      }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
    NIL operation; # list operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
    SWAP;       # list operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
      }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address)))
    PAIR;       # pair (list operation) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair address address))))
  };
view
  "getCurrentInterestIndex" unit nat
  {
    CDR;        # @storage
    LAMBDA
      (pair nat (pair nat nat))
      nat
      {
        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
        SWAP;       # pair nat (pair nat nat) : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
        GET 3;      # nat : pair nat (pair nat nat) : nat
        SWAP;       # pair nat (pair nat nat) : nat : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
        MUL;        # nat : nat : pair nat (pair nat nat)
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
        ADD;        # nat : nat : pair nat (pair nat nat)
        DIG 2;      # pair nat (pair nat nat) : nat : nat
        CAR;        # nat : nat : nat
        MUL;        # nat : nat
        EDIV;       # option (pair nat nat)
        IF_NONE
          {
            UNIT;       # unit
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat
          }; # nat
      }; # lambda (pair nat (pair nat nat)) nat : @storage
    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : @storage
    DUP 3;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : @storage
    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : @storage
    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : @storage
    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : @storage
    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : @storage
    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : @storage
    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : @storage
    IF_NONE
      {
        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : @storage
    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : @storage
    IF_NONE
      {
        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : @storage
        FAILWITH;   # FAILED
      }
      {
        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : @storage
      }; # nat : lambda (pair nat (pair nat nat)) nat : @storage
    DUP 3;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : @storage
    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : @storage
    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : @storage
    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : @storage
    DIG 2;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat
    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat
    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat
    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat
    EXEC;       # nat
  };
view
  "getStabilityFee" unit nat
  {
    GET 7;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)
    CDR;        # nat
  };
view
  "getStorage" unit (pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))))
  CDR;       ;