parameter (or (or (or (pair %borrow nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (pair %deposit address (pair address (pair nat (pair nat (pair bool (pair int int))))))) (or (contract %getInterestIndex nat) (pair %liquidate nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))))) (or (or (pair %repay address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) (pair %updateContracts address (pair address (pair address (pair address address))))) (or (pair %updateFundSplits (nat %developerFundSplit) (nat %stabilityFundSplit)) (or (pair %updateParams nat (pair nat (pair nat (option mutez)))) (pair %withdraw nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))));
storage   (pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))));
code
  {
    LAMBDA
      (pair int (pair nat (pair nat nat)))
      nat
      {
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat))
        CDDAR;      # nat : pair int (pair nat (pair nat nat))
        SWAP;       # pair int (pair nat (pair nat nat)) : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat
        DUG 2;      # pair int (pair nat (pair nat nat)) : nat : pair int (pair nat (pair nat nat))
        CDAR;       # nat : nat : pair int (pair nat (pair nat nat))
        ADD;        # nat : pair int (pair nat (pair nat nat))
        PUSH nat 1000000000000000000; # nat : nat : pair int (pair nat (pair nat nat))
        DIG 2;      # pair int (pair nat (pair nat nat)) : nat : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat
        CDDAR;      # nat : pair int (pair nat (pair nat nat)) : nat : nat
        SWAP;       # pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUG 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat))
        CDAR;       # nat : nat : nat : nat : pair int (pair nat (pair nat nat))
        ADD;        # nat : nat : nat : pair int (pair nat (pair nat nat))
        DIG 3;      # pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUG 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat))
        CAR;        # int : nat : nat : nat : pair int (pair nat (pair nat nat))
        ISNAT;      # option nat : nat : nat : nat : pair int (pair nat (pair nat nat))
        IF_SOME
          {}
          {
            UNIT;       # unit : nat : nat : nat : pair int (pair nat (pair nat nat))
            FAILWITH;   # FAILED
          }; # @some : nat : nat : nat : pair int (pair nat (pair nat nat))
        PUSH nat 1000000000000000000; # nat : @some : nat : nat : nat : pair int (pair nat (pair nat nat))
        DIG 5;      # pair int (pair nat (pair nat nat)) : nat : @some : nat : nat : nat
        CDDDR;      # nat : nat : @some : nat : nat : nat
        MUL;        # nat : @some : nat : nat : nat
        EDIV;       # option (pair nat nat) : nat : nat : nat
        IF_SOME
          {}
          {
            UNIT;       # unit : nat : nat : nat
            FAILWITH;   # FAILED
          }; # @some : nat : nat : nat
        CAR;        # nat : nat : nat : nat
        MUL;        # nat : nat : nat
        EDIV;       # option (pair nat nat) : nat
        IF_SOME
          {}
          {
            UNIT;       # unit : nat
            FAILWITH;   # FAILED
          }; # @some : nat
        CAR;        # nat : nat
        SUB;        # int
        ISNAT;      # option nat
        IF_SOME
          {}
          {
            UNIT;       # unit
            FAILWITH;   # FAILED
          }; # @some
      }; # lambda (pair int (pair nat (pair nat nat))) nat : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair int (pair nat (pair nat nat))) nat
    LAMBDA
      (pair nat (pair nat nat))
      nat
      {
        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
        SWAP;       # pair nat (pair nat nat) : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
        CDAR;       # nat : pair nat (pair nat nat) : nat
        SWAP;       # pair nat (pair nat nat) : nat : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
        CDDR;       # nat : nat : nat : pair nat (pair nat nat)
        MUL;        # nat : nat : pair nat (pair nat nat)
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
        ADD;        # nat : nat : pair nat (pair nat nat)
        DIG 2;      # pair nat (pair nat nat) : nat : nat
        CAR;        # nat : nat : nat
        MUL;        # nat : nat
        EDIV;       # option (pair nat nat)
        IF_SOME
          {
            CAR;        # nat
          }
          {
            UNIT;       # unit
            FAILWITH;   # FAILED
          }; # nat
      }; # lambda (pair nat (pair nat nat)) nat : pair @parameter @storage : lambda (pair int (pair nat (pair nat nat))) nat
    SWAP;       # pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    LAMBDA
      (pair nat (pair nat nat))
      nat
      {
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat)
        CDDR;       # nat : pair nat (pair nat nat)
        PUSH nat 100; # nat : nat : pair nat (pair nat nat)
        SWAP;       # nat : nat : pair nat (pair nat nat)
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
        DUP;        # nat : nat : nat : nat : pair nat (pair nat nat)
        DIG 4;      # pair nat (pair nat nat) : nat : nat : nat : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : nat : nat
        CDAR;       # nat : pair nat (pair nat nat) : nat : nat : nat : nat
        SWAP;       # pair nat (pair nat nat) : nat : nat : nat : nat : nat
        CAR;        # nat : nat : nat : nat : nat : nat
        MUL;        # nat : nat : nat : nat : nat
        EDIV;       # option (pair nat nat) : nat : nat : nat
        IF_SOME
          {
            CAR;        # nat : nat : nat : nat
          }
          {
            UNIT;       # unit : nat : nat : nat
            FAILWITH;   # FAILED
          }; # nat : nat : nat : nat
        MUL;        # nat : nat : nat
        EDIV;       # option (pair nat nat) : nat
        IF_SOME
          {
            CAR;        # nat : nat
          }
          {
            UNIT;       # unit : nat
            FAILWITH;   # FAILED
          }; # nat : nat
        MUL;        # nat
      }; # lambda (pair nat (pair nat nat)) nat : pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    SWAP;       # pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    DUP;        # pair @parameter @storage : pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    CDR;        # @storage : pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    SWAP;       # pair @parameter @storage : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    CAR;        # @parameter : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 2; # int : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%borrow : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%borrow : @parameter%borrow : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : @parameter%borrow : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%borrow : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # bool : pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair bool (pair int (pair int nat)) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int nat) : pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair int (pair int nat) : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH bool False; # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # bool : bool : pair int nat : int : pair int (pair int nat) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # bool : bool : bool : pair int nat : int : pair int (pair int nat) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # bool : bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 16; # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 0; # nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 19;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                DUG 20;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 19;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 20;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 19;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 20;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 3;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 3;      # int : nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 4;      # int : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # pair int nat : nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int nat : pair int nat : nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 3;      # pair int nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # nat : nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # nat : nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                GT;         # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 15;     # @storage : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 16;     # @storage : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAAAR;      # nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 17;     # lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 18;     # lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 20;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                    DUG 21;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 20;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 21;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 20;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 21;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 6;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 5;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair int nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int nat : pair int nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 4;      # pair int nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 16;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 17;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 11;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : nat : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GE;         # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {
                        DIG 2;      # pair int (pair int nat) : pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # pair bool (pair int (pair int nat)) : pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # pair nat (pair bool (pair int (pair int nat))) : pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # nat : pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair int nat : int : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair int nat : int : bool : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # nat : pair int nat : int : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # @parameter%borrow : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # lambda (pair nat (pair nat nat)) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        PUSH int 11; # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    DIG 2;      # pair int (pair int nat) : pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair bool (pair int (pair int nat)) : pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair nat (pair bool (pair int (pair int nat))) : pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # nat : pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair int nat : int : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair int nat : int : bool : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # nat : pair int nat : int : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # @parameter%borrow : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 7;      # lambda (pair nat (pair nat nat)) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }; # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NIL operation; # list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 7;      # @storage : list operation : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 8;      # @storage : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDDDR;     # address : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH mutez 0; # mutez : @some : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 3;      # pair int nat : mutez : @some : list operation : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int nat : pair int nat : mutez : @some : list operation : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 4;      # pair int nat : mutez : @some : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # nat : mutez : @some : list operation : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # address : nat : mutez : @some : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                TRANSFER_TOKENS; # operation : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONS;       # list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # @storage : list operation : pair int nat : int : bool : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int nat : int : bool : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # @storage : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                BALANCE;    # mutez : @some : list operation : pair int nat : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 5;      # bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                INT;        # int : bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage
                DUG 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 7;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : pair int bool : mutez : @some : list operation : pair int nat : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # int : nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ADD;        # nat : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : pair int bool : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair int bool) : mutez : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # pair int nat : pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # nat : pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # nat : nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                ADD;        # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {
                    CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                  }
                  {
                    UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                SWAP;       # @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 2; # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADAR;     # option mutez : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    DROP;       # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDADAR;     # option mutez : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    BALANCE;    # mutez : @some : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    LE;         # bool : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 21; # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {}; # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%deposit : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%deposit : @parameter%deposit : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : @parameter%deposit : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%deposit : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int int)))) : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int int)))) : pair address (pair nat (pair nat (pair bool (pair int int)))) : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair nat (pair nat (pair bool (pair int int)))) : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair nat (pair nat (pair bool (pair int int)))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int int))) : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int int))) : pair nat (pair nat (pair bool (pair int int))) : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair nat (pair bool (pair int int))) : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair nat (pair bool (pair int int))) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int int)) : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int int)) : pair nat (pair bool (pair int int)) : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair bool (pair int int)) : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair bool (pair int int)) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int int) : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int int) : pair bool (pair int int) : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # bool : pair bool (pair int int) : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair bool (pair int int) : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH bool False; # bool : pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # bool : bool : pair int int : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # bool : bool : bool : pair int int : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 3;      # bool : bool : pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # pair bool (pair int int) : pair int int : bool : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair nat (pair bool (pair int int)) : pair int int : bool : nat : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # nat : pair int int : bool : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair nat (pair nat (pair bool (pair int int))) : pair int int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # address : pair int int : bool : nat : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair address (pair nat (pair nat (pair bool (pair int int)))) : pair int int : bool : nat : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # @parameter%deposit : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # lambda (pair nat (pair nat nat)) nat : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    PUSH int 16; # int : pair int int : bool : pair bool (pair int int) : nat : pair nat (pair bool (pair int int)) : nat : pair nat (pair nat (pair bool (pair int int))) : address : pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NIL operation; # list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 5;      # @storage : list operation : pair int int : bool : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int int : bool : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 6;      # @storage : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                BALANCE;    # mutez : @some : list operation : pair int int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                INT;        # int : bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 9;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage
                DUG 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # pair int int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair int int : pair int int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 7;      # pair int int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # pair int int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair int int : pair int int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 7;      # pair int int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : pair int bool : mutez : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # pair int int : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # int : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ADD;        # nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {
                    CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                  }
                  {
                    UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                PUSH mutez 0; # mutez : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                AMOUNT;     # mutez : mutez : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    DROP;       # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    PUSH int 15; # int : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                NIL operation; # list operation : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 0; # mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage
                DUG 5;      # lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 6;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {
                    CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                  }
                  {
                    UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                SWAP;       # @storage : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 2; # int : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%liquidate : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%liquidate : @parameter%liquidate : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : @parameter%liquidate : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%liquidate : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int address)))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int address)))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair nat (pair bool (pair int (pair int address)))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int address))) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int address))) : pair nat (pair bool (pair int (pair int address))) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair bool (pair int (pair int address))) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int address)) : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int address)) : pair bool (pair int (pair int address)) : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # bool : pair bool (pair int (pair int address)) : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair bool (pair int (pair int address)) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int address) : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int address) : pair int (pair int address) : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair int (pair int address) : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair int (pair int address) : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH bool False; # bool : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # bool : bool : pair int address : int : pair int (pair int address) : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # bool : bool : bool : pair int address : int : pair int (pair int address) : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # bool : bool : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 16; # int : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAAAR;      # nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 17;     # lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 18;     # lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 20;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                DUG 21;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 20;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 21;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 20;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 21;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 6;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 16;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 17;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                LT;         # bool : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # pair int (pair int address) : pair int address : int : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # bool : pair int address : int : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # pair bool (pair int (pair int address)) : pair int address : int : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair nat (pair bool (pair int (pair int address))) : pair int address : int : nat : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair nat (pair nat (pair bool (pair int (pair int address)))) : pair int address : int : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # address : pair int address : int : nat : nat : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : pair int address : int : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair int address : int : nat : nat : address : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # nat : pair int address : int : nat : nat : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # @parameter%liquidate : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    PUSH int 10; # int : pair int address : int : pair int (pair int address) : bool : pair bool (pair int (pair int address)) : nat : pair nat (pair bool (pair int (pair int address))) : nat : pair nat (pair nat (pair bool (pair int (pair int address)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NIL operation; # list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # @storage : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDDDR;     # address : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH mutez 0; # mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDAAR;      # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 13;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 7;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 7;      # int : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 8;      # int : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 12;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 13;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # int : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # int : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 7;      # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 8;      # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # pair int address : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # pair int address : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # address : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                TRANSFER_TOKENS; # operation : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONS;       # list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # @storage : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDDDR;     # address : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH mutez 0; # mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAADAR;     # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 12;     # @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDAAR;      # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 15;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 12;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAADDR;     # address : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                TRANSFER_TOKENS; # operation : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONS;       # list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 6;      # @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 7;      # @storage : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDDDR;     # address : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH mutez 0; # mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAADAR;     # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 12;     # @storage : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDAAR;      # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 15;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 16;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 12;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # int : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 1000000000000000000; # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # @storage : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # @storage : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDAAR;      # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # int : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # nat : nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                MUL;        # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 12;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 12;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage
                DUG 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 13;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair int address : pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : nat : nat : mutez : @some : list operation : pair int address : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # int : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ADD;        # nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # @storage : @some : mutez : @some : list operation : pair int address : nat : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : @some : mutez : @some : list operation : pair int address : nat : address : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # @storage : @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDDAR;     # address : @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR %address %value; # pair (address %address) (@some %value) : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair int address : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # address : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT unit; # option (contract unit) : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 1; # mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 1000000000000; # nat : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # nat : nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                MUL;        # mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                UNIT;       # unit : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 2;      # @storage : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUG 3;      # @storage : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDADDR;     # address : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 0; # mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH bool True; # bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage
                DUG 7;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 0; # nat : pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 0; # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {
                    CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                  }
                  {
                    UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%repay : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%repay : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDADDR;     # address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 2; # int : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%repay : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%repay : @parameter%repay : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : @parameter%repay : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%repay : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # bool : pair bool (pair int (pair int nat)) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair bool (pair int (pair int nat)) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int (pair int nat) : pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair int (pair int nat) : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair int (pair int nat) : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH bool False; # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 4;      # bool : bool : pair int nat : int : pair int (pair int nat) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # bool : bool : bool : pair int nat : int : pair int (pair int nat) : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 5;      # bool : bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # pair int (pair int nat) : pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair bool (pair int (pair int nat)) : pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair nat (pair bool (pair int (pair int nat))) : pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # nat : pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair int nat : int : bool : nat : address : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # @parameter%repay : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 7;      # lambda (pair nat (pair nat nat)) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    PUSH int 16; # int : pair int nat : int : pair int (pair int nat) : bool : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 9;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 8;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 9;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 9;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 3;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 5;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 6;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 3;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EXEC;       # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # int : int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 3;      # int : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ISNAT;      # option nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # pair int nat : pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # pair int nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                LT;         # bool : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DUP;        # pair int nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int nat : pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # pair int nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage
                    DUG 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 6;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # int : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    DIG 8;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 9;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 8;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 9;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 6;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 3;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 3;      # int : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 0; # nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage
                    DUG 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 6;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair int nat : pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : nat : nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # int : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 3;      # pair int nat : nat : nat : nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair int nat : pair int nat : nat : nat : nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 4;      # pair int nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # nat : @some : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }; # nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                NIL operation; # list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 8;      # @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 9;      # @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDDDR;     # address : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 0; # mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAADAR;     # nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # nat : nat : nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # nat : nat : nat : nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # nat : nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                MUL;        # nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAADDR;     # address : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 8;      # @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 9;      # @storage : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDDDR;     # address : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 0; # mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 11;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 12;     # @storage : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CAADAR;     # nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # nat : nat : nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # nat : nat : nat : nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # nat : nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                MUL;        # nat : nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : mutez : @some : list operation : nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # nat : nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 10;     # @storage : @some : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : @some : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 11;     # @storage : @some : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDDAR;     # address : @some : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR %address %value; # pair (address %address) (@some %value) : mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # @storage : list operation : nat : @some : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : nat : @some : pair int nat : bool : address : address : lambda (pair nat (pair nat nat)) nat
                DUG 8;      # @storage : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDDDR;     # address : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH mutez 0; # mutez : @some : list operation : nat : @some : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # pair int nat : mutez : @some : list operation : nat : @some : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # nat : mutez : @some : list operation : nat : @some : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 7;      # address : nat : mutez : @some : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # @storage : list operation : nat : @some : bool : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : nat : @some : bool : address : lambda (pair nat (pair nat nat)) nat
                DUG 6;      # @storage : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDADDR;     # address : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                BALANCE;    # mutez : @some : list operation : nat : @some : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 8;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage
                DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage
                DUG 9;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 9;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 9;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : lambda (pair nat (pair nat nat)) nat
                DUG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                EXEC;       # nat : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int bool : mutez : @some : list operation : nat : @some : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 5;      # @some : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                INT;        # int : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                IF_SOME
                  {
                    CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                  }
                  {
                    UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                IF_SOME
                  {
                    CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                  }
                  {
                    UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    FAILWITH;   # FAILED
                  }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                SWAP;       # @storage : @parameter%updateContracts : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%updateContracts : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADAR;      # address : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateContracts : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateContracts : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%updateContracts : @storage
                    DROP;       # @parameter%updateContracts : @storage
                  }
                  {
                    PUSH int 4; # int : @parameter%updateContracts : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%updateContracts : @storage
                DUP;        # @parameter%updateContracts : @parameter%updateContracts : @storage
                CAR;        # address : @parameter%updateContracts : @storage
                SWAP;       # @parameter%updateContracts : address : @storage
                CDR;        # pair address (pair address (pair address address)) : address : @storage
                DUP;        # pair address (pair address (pair address address)) : pair address (pair address (pair address address)) : address : @storage
                CAR;        # address : pair address (pair address (pair address address)) : address : @storage
                SWAP;       # pair address (pair address (pair address address)) : address : address : @storage
                CDR;        # pair address (pair address address) : address : address : @storage
                DUP;        # pair address (pair address address) : pair address (pair address address) : address : address : @storage
                CAR;        # address : pair address (pair address address) : address : address : @storage
                SWAP;       # pair address (pair address address) : address : address : address : @storage
                CDR;        # pair address address : address : address : address : @storage
                DUP;        # pair address address : pair address address : address : address : address : @storage
                CAR;        # address : pair address address : address : address : address : @storage
                SWAP;       # pair address address : address : address : address : address : @storage
                CDR;        # address : address : address : address : address : @storage
                DIG 5;      # @storage : address : address : address : address : address
                DUP;        # @storage : @storage : address : address : address : address : address
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : address : address : address : address : address
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                CDDR;       # pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                DIG 7;      # address : pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                PAIR;       # pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                SWAP;       # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                DUP;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                CAR;        # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                SWAP;       # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                CDR;        # pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                DUP;        # pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                CAR;        # nat : pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                SWAP;       # pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                CDAR;       # address : nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address : address
                DIG 7;      # address : address : nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                SWAP;       # address : address : nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                PAIR;       # pair address address : nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                SWAP;       # nat : pair address address : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                PAIR;       # pair nat (pair address address) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                SWAP;       # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                DUP;        # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                CAR;        # nat : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                SWAP;       # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : nat : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                CDAR;       # option mutez : nat : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address : address
                DIG 6;      # address : option mutez : nat : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                SWAP;       # option mutez : address : nat : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                PAIR;       # pair (option mutez) address : nat : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                SWAP;       # nat : pair (option mutez) address : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                PAIR;       # pair nat (pair (option mutez) address) : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                SWAP;       # pair nat (pair address address) : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                DUP;        # pair nat (pair address address) : pair nat (pair address address) : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                CAR;        # nat : pair nat (pair address address) : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                SWAP;       # pair nat (pair address address) : nat : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                CDDR;       # address : nat : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address : address
                DIG 5;      # address : address : nat : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                PAIR;       # pair address address : nat : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                SWAP;       # nat : pair address address : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                PAIR;       # pair nat (pair address address) : pair nat (pair (option mutez) address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                SWAP;       # pair nat (pair (option mutez) address) : pair nat (pair address address) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                PAIR;       # pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : address
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                CDR;        # pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                DUP;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                CAR;        # nat : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                CDAR;       # nat : nat : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)) : address
                DIG 4;      # address : nat : nat : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                SWAP;       # nat : address : nat : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                PAIR;       # pair nat address : nat : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                SWAP;       # nat : pair nat address : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                PAIR;       # pair nat (pair nat address) : pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                PAIR;       # pair (pair nat (pair nat address)) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair nat (pair (option mutez) address)) (pair nat (pair address address))
                PAIR;       # pair (pair (pair nat (pair nat address)) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)))
                NIL operation; # list operation : pair (pair (pair nat (pair nat address)) (pair address (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair nat (pair (option mutez) address)) (pair nat (pair address address)))
              }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                PUSH nat 1000000000000000000; # nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%updateFundSplits : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CDR;        # nat : @parameter%updateFundSplits : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @parameter%updateFundSplits : nat : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 3;      # @parameter%updateFundSplits : nat : nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CAR;        # nat : nat : nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                ADD;        # nat : nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {}
                  {
                    PUSH int 25; # int : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SWAP;       # @storage : @parameter%updateFundSplits : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUP;        # @storage : @storage : @parameter%updateFundSplits : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DUG 2;      # @storage : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                CADAR;      # address : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                SENDER;     # address : address : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                COMPARE;    # int : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                EQ;         # bool : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                IF
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateFundSplits : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateFundSplits : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%updateFundSplits : @storage
                    DROP;       # @parameter%updateFundSplits : @storage
                  }
                  {
                    PUSH int 4; # int : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    FAILWITH;   # FAILED
                  }; # @parameter%updateFundSplits : @storage
                SWAP;       # @storage : @parameter%updateFundSplits
                DUP;        # @storage : @storage : @parameter%updateFundSplits
                CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : @parameter%updateFundSplits
                SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                DUP;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                CAR;        # nat : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                CDDR;       # address : nat : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                DIG 4;      # @parameter%updateFundSplits : address : nat : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                CAR;        # nat : address : nat : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                PAIR;       # pair nat address : nat : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                SWAP;       # nat : pair nat address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                PAIR;       # pair nat (pair nat address) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                PAIR;       # pair (pair nat (pair nat address)) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                PAIR;       # pair (pair (pair nat (pair nat address)) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                NIL operation; # list operation : pair (pair (pair nat (pair nat address)) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADAR;      # address : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SENDER;     # address : address : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        DROP;       # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                      }
                      {
                        PUSH int 4; # int : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                    DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                    DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    IF_SOME
                      {
                        CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                      }
                      {
                        UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        FAILWITH;   # FAILED
                      }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                    PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                    SWAP;       # @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # @parameter%updateParams : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : @parameter%updateParams : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # @parameter%updateParams : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair nat (pair nat (option mutez)) : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair nat (pair nat (option mutez)) : pair nat (pair nat (option mutez)) : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : pair nat (pair nat (option mutez)) : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair nat (pair nat (option mutez)) : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair nat (option mutez) : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair nat (option mutez) : pair nat (option mutez) : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # nat : pair nat (option mutez) : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair nat (option mutez) : nat : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # option mutez : nat : nat : nat : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 4;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : option mutez : nat : nat : nat
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : option mutez : nat : nat : nat
                    CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : option mutez : nat : nat : nat
                    SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    DUP;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    CAR;        # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    SWAP;       # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    CDDR;       # pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat : nat
                    DIG 6;      # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat
                    PAIR;       # pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat
                    SWAP;       # pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat
                    CDR;        # pair (option %ovenMax mutez) (address %ovenProxyContractAddress) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat : nat
                    DIG 5;      # nat : pair (option %ovenMax mutez) (address %ovenProxyContractAddress) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat
                    PAIR;       # pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat
                    PAIR;       # pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez : nat
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez : nat
                    DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez : nat
                    CDR;        # pair address (pair nat timestamp) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez : nat
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair address (pair nat timestamp) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez : nat
                    CADR;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair address (pair nat timestamp) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez : nat
                    DIG 4;      # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair address (pair nat timestamp) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez
                    PAIR;       # pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez
                    PAIR;       # pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : option mutez
                    SWAP;       # pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    DUP;        # pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    CDR;        # pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    SWAP;       # pair (pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    CAR;        # pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    DUP;        # pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    CAR;        # nat : pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    SWAP;       # pair nat (pair (option %ovenMax mutez) (address %ovenProxyContractAddress)) : nat : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    CDDR;       # address : nat : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : option mutez
                    DIG 4;      # option mutez : address : nat : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))
                    PAIR;       # pair (option mutez) address : nat : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))
                    SWAP;       # nat : pair (option mutez) address : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))
                    PAIR;       # pair nat (pair (option mutez) address) : pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))
                    PAIR;       # pair (pair nat (pair (option mutez) address)) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))
                    SWAP;       # pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair nat (pair (option mutez) address)) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair nat (pair (option mutez) address)) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NIL operation; # list operation : pair (pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair nat (pair (option mutez) address)) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDADDR;     # address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SENDER;     # address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # nat : @parameter%withdraw : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # @parameter%withdraw : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # nat : pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair bool (pair int (pair int mutez)) : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair bool (pair int (pair int mutez)) : pair bool (pair int (pair int mutez)) : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # bool : pair bool (pair int (pair int mutez)) : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair bool (pair int (pair int mutez)) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int (pair int mutez) : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int (pair int mutez) : pair int (pair int mutez) : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair int (pair int mutez) : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair int (pair int mutez) : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 0; # nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 19;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                    DUG 20;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 19;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 20;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 19;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 19;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 20;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int mutez : pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 4;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # int : nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 4;      # int : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 7;      # nat : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # nat : nat : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 8;      # nat : nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GT;         # bool : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {
                        DIG 15;     # @storage : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 16;     # @storage : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAAAR;      # nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 17;     # lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 18;     # lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 20;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                        DUP;        # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat
                        DUG 21;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 20;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 21;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {}
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 20;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 21;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 20;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 21;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 6;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {}
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair int mutez : pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 5;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # int : int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 5;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {}
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 8;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 9;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 16;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 17;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000; # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH mutez 1; # mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # pair int mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair int mutez : pair int mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 6;      # pair int mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat mutez) : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {}
                          {
                            UNIT;       # unit : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 11;     # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # nat : nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 12;     # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_SOME
                          {}
                          {
                            UNIT;       # unit : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @some : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GE;         # bool : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {
                            DIG 2;      # pair int (pair int mutez) : pair int mutez : int : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 3;      # pair bool (pair int (pair int mutez)) : pair int mutez : int : bool : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 4;      # pair nat (pair bool (pair int (pair int mutez))) : pair int mutez : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 5;      # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair int mutez : int : bool : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 6;      # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair int mutez : int : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 7;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair int mutez : int : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 7;      # nat : pair int mutez : int : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 7;      # @parameter%withdraw : pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 8;      # lambda (pair nat (pair nat nat)) nat : pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }
                          {
                            PUSH int 11; # int : pair int mutez : int : pair int (pair int mutez) : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        DIG 2;      # pair int (pair int mutez) : pair int mutez : int : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : pair bool (pair int (pair int mutez)) : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # pair bool (pair int (pair int mutez)) : pair int mutez : int : bool : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : pair nat (pair bool (pair int (pair int mutez))) : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # pair nat (pair bool (pair int (pair int mutez))) : pair int mutez : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : pair int mutez : int : bool : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : pair int mutez : int : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair int mutez : int : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # nat : pair int mutez : int : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # @parameter%withdraw : pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 8;      # lambda (pair nat (pair nat nat)) nat : pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NIL operation; # list operation : pair int mutez : int : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 6;      # address : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONTRACT unit; # option (contract unit) : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # pair int mutez : @some : list operation : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int mutez : pair int mutez : @some : list operation : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 3;      # pair int mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNIT;       # unit : mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    TRANSFER_TOKENS; # operation : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONS;       # list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 7;      # @storage : list operation : pair int mutez : int : bool : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : list operation : pair int mutez : int : bool : nat : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 8;      # @storage : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDADDR;     # address : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # pair int mutez : @some : list operation : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair int mutez : pair int mutez : @some : list operation : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 3;      # pair int mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH mutez 1; # mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 1000000000000; # nat : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # nat : nat : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {
                        CAR;        # nat : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        UNIT;       # unit : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # nat : mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    MUL;        # mutez : mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # mutez : @some : list operation : pair int mutez : int : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 10;     # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    INT;        # int : bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage
                    DUP;        # lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage
                    DUG 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : lambda (pair nat (pair nat nat)) nat
                    DUG 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # int : int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # nat : nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : pair int mutez : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # int : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    INT;        # int : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime))) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CDDR;       # timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CADDDR;     # timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    NOW;        # timestamp : timestamp : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_SOME
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                      }
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUP;        # @storage : @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUG 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CDDAR;      # nat : nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CADDAR;     # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # pair address (pair nat timestamp) : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # address : pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair address (pair nat timestamp) : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDAR;       # nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 5;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUP;        # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    DUG 6;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CADDDR;     # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CADDDR;     # timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    NOW;        # timestamp : timestamp : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SUB;        # int : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    ISNAT;      # option nat : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    IF_SOME
                      {
                        CAR;        # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                      }
                      {
                        UNIT;       # unit : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        FAILWITH;   # FAILED
                      }; # nat : nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    MUL;        # nat : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    INT;        # int : timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    ADD;        # timestamp : nat : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # nat : timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat timestamp : address : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : pair nat timestamp : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address (pair nat timestamp) : pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair address (pair nat timestamp) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp)) : pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair nat (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair nat (pair (option mutez) address)) (pair nat (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair nat (pair nat address)) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    NIL operation; # list operation : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    SWAP;       # list operation : list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    PAIR;       # pair (list operation) (pair (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair address (pair nat timestamp))) (pair (pair (nat %liquidationFeePercent) (pair (option %ovenMax mutez) (address %ovenProxyContractAddress))) (pair (nat %stabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))))
  };