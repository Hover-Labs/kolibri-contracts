parameter (or (or (or (or (pair %borrow nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (pair %deposit address (pair address (pair nat (pair nat (pair bool (pair int int))))))) (or (contract %getInterestIndex nat) (or (nat %initialize) (pair %liquidate nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))))))) (or (or (pair %repay address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) (nat %setCollateralizationPercentage)) (or (address %setDeveloperFundContract) (or (address %setGovernorContract) (address %setInitializerContract))))) (or (or (or (nat %setLiquidationFeePercent) (address %setLiquidityPoolContract)) (or (address %setOvenProxyContract) (or (nat %setPrivateLiquidationThreshold) (nat %setStabilityFee)))) (or (or (address %setStabilityFundContract) (or (address %setTokenContract) (pair %updateContracts address (pair address (pair address (pair address address)))))) (or (pair %updateFundSplits (nat %developerFundSplit) (nat %stabilityFundSplit)) (or (pair %updateParams nat (pair nat (pair nat (option mutez)))) (pair %withdraw nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))));
storage   (pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))));
code
  {
    LAMBDA
      (pair int (pair nat (pair nat nat)))
      nat
      {
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat))
        GET 5;      # nat : pair int (pair nat (pair nat nat))
        SWAP;       # pair int (pair nat (pair nat nat)) : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat
        DUG 2;      # pair int (pair nat (pair nat nat)) : nat : pair int (pair nat (pair nat nat))
        GET 3;      # nat : nat : pair int (pair nat (pair nat nat))
        ADD;        # nat : pair int (pair nat (pair nat nat))
        PUSH nat 1000000000000000000; # nat : nat : pair int (pair nat (pair nat nat))
        DIG 2;      # pair int (pair nat (pair nat nat)) : nat : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat
        GET 5;      # nat : pair int (pair nat (pair nat nat)) : nat : nat
        SWAP;       # pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUP;        # pair int (pair nat (pair nat nat)) : pair int (pair nat (pair nat nat)) : nat : nat : nat
        DUG 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat))
        GET 3;      # nat : nat : nat : nat : pair int (pair nat (pair nat nat))
        ADD;        # nat : nat : nat : pair int (pair nat (pair nat nat))
        DUP 4;      # pair int (pair nat (pair nat nat)) : nat : nat : nat : pair int (pair nat (pair nat nat))
        CAR;        # int : nat : nat : nat : pair int (pair nat (pair nat nat))
        ISNAT;      # option nat : nat : nat : nat : pair int (pair nat (pair nat nat))
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : pair int (pair nat (pair nat nat))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : pair int (pair nat (pair nat nat))
        PUSH nat 1000000000000000000; # nat : @some : nat : nat : nat : pair int (pair nat (pair nat nat))
        DIG 5;      # pair int (pair nat (pair nat nat)) : nat : @some : nat : nat : nat
        GET 6;      # nat : nat : @some : nat : nat : nat
        MUL;        # nat : @some : nat : nat : nat
        EDIV;       # option (pair nat nat) : nat : nat : nat
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat
        CAR;        # nat : nat : nat : nat
        MUL;        # nat : nat : nat
        EDIV;       # option (pair nat nat) : nat
        IF_NONE
          {
            UNIT;       # unit : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat
        CAR;        # nat : nat
        SUB;        # int
        ISNAT;      # option nat
        IF_NONE
          {
            UNIT;       # unit
            FAILWITH;   # FAILED
          }
          {}; # @some
      }; # lambda (pair int (pair nat (pair nat nat))) nat : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair int (pair nat (pair nat nat))) nat
    LAMBDA
      (pair nat (pair nat nat))
      nat
      {
        PUSH nat 1000000000000000000; # nat : pair nat (pair nat nat)
        SWAP;       # pair nat (pair nat nat) : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat
        GET 3;      # nat : pair nat (pair nat nat) : nat
        SWAP;       # pair nat (pair nat nat) : nat : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat
        DUG 3;      # pair nat (pair nat nat) : nat : nat : pair nat (pair nat nat)
        GET 4;      # nat : nat : nat : pair nat (pair nat nat)
        MUL;        # nat : nat : pair nat (pair nat nat)
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
        ADD;        # nat : nat : pair nat (pair nat nat)
        DIG 2;      # pair nat (pair nat nat) : nat : nat
        CAR;        # nat : nat : nat
        MUL;        # nat : nat
        EDIV;       # option (pair nat nat)
        IF_NONE
          {
            UNIT;       # unit
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat
          }; # nat
      }; # lambda (pair nat (pair nat nat)) nat : pair @parameter @storage : lambda (pair int (pair nat (pair nat nat))) nat
    SWAP;       # pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    LAMBDA
      (pair nat (pair nat nat))
      nat
      {
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat)
        GET 4;      # nat : pair nat (pair nat nat)
        PUSH nat 100; # nat : nat : pair nat (pair nat nat)
        SWAP;       # nat : nat : pair nat (pair nat nat)
        PUSH nat 1000000000000000000; # nat : nat : nat : pair nat (pair nat nat)
        DUP;        # nat : nat : nat : nat : pair nat (pair nat nat)
        DIG 4;      # pair nat (pair nat nat) : nat : nat : nat : nat
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : nat : nat
        GET 3;      # nat : pair nat (pair nat nat) : nat : nat : nat : nat
        SWAP;       # pair nat (pair nat nat) : nat : nat : nat : nat : nat
        CAR;        # nat : nat : nat : nat : nat : nat
        MUL;        # nat : nat : nat : nat : nat
        EDIV;       # option (pair nat nat) : nat : nat : nat
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : nat : nat
          }; # nat : nat : nat : nat
        MUL;        # nat : nat : nat
        EDIV;       # option (pair nat nat) : nat
        IF_NONE
          {
            UNIT;       # unit : nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat
          }; # nat : nat
        MUL;        # nat
      }; # lambda (pair nat (pair nat nat)) nat : pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    SWAP;       # pair @parameter @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    UNPAIR;     # @parameter : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%borrow : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SENDER;     # @sender : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @parameter%borrow : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair nat (pair bool (pair int (pair int nat)))) : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair nat (pair bool (pair int (pair int nat))) : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # pair nat (pair bool (pair int (pair int nat))) : pair nat (pair bool (pair int (pair int nat))) : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # pair nat (pair bool (pair int (pair int nat))) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # nat : pair bool (pair int (pair int nat)) : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair bool (pair int (pair int nat)) : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # bool : pair int (pair int nat) : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair int (pair int nat) : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH bool False; # bool : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 4;      # bool : bool : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 16; # int : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 0; # nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 18;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 18;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 18;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 18;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 18;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 5;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 3;      # int : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 4;      # pair int nat : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 7;      # nat : nat : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : nat : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GT;         # bool : int : pair int nat : bool : nat : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {
                        DIG 5;      # pair nat (pair bool (pair int (pair int nat))) : int : pair int nat : bool : nat : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : int : pair int nat : bool : nat : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : int : pair int nat : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 8;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : int : pair int nat : bool : nat : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : nat : address : address : nat : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 8;      # @parameter%borrow : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # @storage : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 10;     # lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 5;      # pair int nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # nat : nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 10;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GE;         # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 11; # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }
                      {
                        DIG 4;      # nat : int : pair int nat : bool : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : pair nat (pair bool (pair int (pair int nat))) : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 4;      # pair nat (pair bool (pair int (pair int nat))) : int : pair int nat : bool : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # pair nat (pair nat (pair bool (pair int (pair int nat)))) : int : pair int nat : bool : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : int : pair int nat : bool : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # nat : int : pair int nat : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))) : int : pair int nat : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : @parameter%borrow : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # @parameter%borrow : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 7;      # lambda (pair nat (pair nat nat)) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NIL operation; # list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 8;      # @storage : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 8;      # address : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH mutez 0; # mutez : @some : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 5;      # pair int nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 8;      # address : nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair address nat : mutez : @some : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    TRANSFER_TOKENS; # operation : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONS;       # list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 7;      # @storage : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # address : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    BALANCE;    # @balance : @some : list operation : int : pair int nat : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 5;      # bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    INT;        # int : bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 8;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : pair int bool : @balance : @some : list operation : int : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # int : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    INT;        # int : pair int bool : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : pair int nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # pair int nat : pair int (pair int bool) : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : pair int (pair int bool) : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # nat : nat : pair int (pair int bool) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : pair int (pair int bool) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 3;      # lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 4;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 4;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 4;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 3;      # @storage : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 8;      # address : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # nat : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : nat : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUG 7;      # @storage : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 4;      # address : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 3;      # @storage : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 8;      # address : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # nat : @storage : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : nat : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : nat : nat : mutez : @some : list operation : nat : lambda (pair nat (pair nat nat)) nat
                    DUG 7;      # @storage : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 7;      # nat : nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    MUL;        # nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # nat : nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : @some : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 7;      # address : @some : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : nat : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # nat : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 2;      # @storage : nat : list operation : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : list operation : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # nat : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : lambda (pair nat (pair nat nat)) nat
                    DUP;        # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 7;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CAR;        # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                      }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%deposit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SENDER;     # @sender : address : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int int)))) : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int int)))) : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # pair nat (pair bool (pair int int)) : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # nat : pair bool (pair int int) : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair bool (pair int int) : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # bool : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH bool False; # bool : bool : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 16; # int : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NIL operation; # list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 6;      # @storage : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # address : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    BALANCE;    # @balance : @some : list operation : bool : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 9;      # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    INT;        # int : bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 9;      # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 10;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 7;      # pair int int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 7;      # pair int int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : pair int bool : @balance : @some : list operation : pair int int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # pair int int : nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # int : nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ADD;        # nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    INT;        # int : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # nat : pair int (pair int bool) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                      }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 3;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    DROP;       # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    AMOUNT;     # @amount : mutez : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    COMPARE;    # int : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    EQ;         # bool : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    IF
                      {}
                      {
                        PUSH int 15; # int : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    NIL operation; # list operation : @parameter%getInterestIndex : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 5;      # lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : mutez : @parameter%getInterestIndex : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                      }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%initialize : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%initialize : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%initialize : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%initialize : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%initialize : @storage
                        DROP;       # @parameter%initialize : @storage
                        PUSH bool False; # bool : @parameter%initialize : @storage
                        DUP 3;      # @storage : bool : @parameter%initialize : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : bool : @parameter%initialize : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : bool : @parameter%initialize : @storage
                        CDR;        # bool : bool : @parameter%initialize : @storage
                        COMPARE;    # int : @parameter%initialize : @storage
                        EQ;         # bool : @parameter%initialize : @storage
                        IF
                          {}
                          {
                            PUSH int 29; # int : @parameter%initialize : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%initialize : @storage
                        SWAP;       # @storage : @parameter%initialize
                        DUP;        # @storage : @storage : @parameter%initialize
                        DUG 2;      # @storage : @parameter%initialize : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%initialize : @storage
                        GET 5;      # address : @parameter%initialize : @storage
                        SENDER;     # @sender : address : @parameter%initialize : @storage
                        COMPARE;    # int : @parameter%initialize : @storage
                        EQ;         # bool : @parameter%initialize : @storage
                        IF
                          {}
                          {
                            UNIT;       # unit : @parameter%initialize : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%initialize : @storage
                        SWAP;       # @storage : @parameter%initialize
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                        UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                        CDR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%initialize
                        DIG 4;      # @parameter%initialize : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair @parameter%initialize nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        CAR;        # address : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PUSH bool True; # bool : address : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # address : bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair address bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        NIL operation; # list operation : pair (pair (pair (pair @parameter%initialize nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        SWAP;       # @storage : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : @parameter%liquidate : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 2;      # @storage : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 4;      # address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SENDER;     # @sender : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EQ;         # bool : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 2; # int : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @parameter%liquidate : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int address))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # pair nat (pair nat (pair bool (pair int (pair int address)))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair nat (pair bool (pair int (pair int address))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair nat (pair bool (pair int (pair int address))) : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair bool (pair int (pair int address)) : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair bool (pair int (pair int address)) : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # bool : pair int (pair int address) : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair int (pair int address) : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # int : pair int address : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH bool False; # bool : int : pair int address : bool : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # bool : bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 16; # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # @storage : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        LT;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 10; # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # @storage : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 3;      # pair int address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {
                            PUSH bool True; # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }
                          {
                            DUP 9;      # @storage : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 7;      # address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 3;      # pair int address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # address : address : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            COMPARE;    # int : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EQ;         # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # bool : int : pair int address : nat : nat : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {
                            DIG 5;      # nat : int : pair int address : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 5;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : int : pair int address : nat : nat : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 5;      # @parameter%liquidate : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 6;      # lambda (pair nat (pair nat nat)) nat : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PUSH bool True; # bool : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }
                          {
                            DIG 6;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))) : int : pair int address : nat : nat : address : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : nat : @parameter%liquidate : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 6;      # @parameter%liquidate : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 6;      # @storage : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP;        # @storage : @storage : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : @storage : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # nat : @storage : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            SWAP;       # @storage : nat : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP;        # @storage : @storage : nat : int : pair int address : nat : nat : address : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUG 8;      # @storage : nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # nat : nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            SUB;        # int : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 8;      # lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 11;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                              }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 6;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ADD;        # nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 6;      # nat : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ADD;        # nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 8;      # nat : nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 7;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : @some : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : @some : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            COMPARE;    # int : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            LT;         # bool : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # bool : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 26; # int : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NIL operation; # list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # @storage : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 8;      # address : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONTRACT %burn (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH mutez 0; # mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # int : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 13;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # int : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # pair int address : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # address : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair address nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        TRANSFER_TOKENS; # operation : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONS;       # list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # @storage : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 8;      # address : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH mutez 0; # mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # @storage : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # int : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 4;      # address : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair address nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        TRANSFER_TOKENS; # operation : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONS;       # list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # @storage : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 8;      # address : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH mutez 0; # mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # @storage : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 16;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 12;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # int : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # nat : nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000000000; # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # @storage : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 14;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # int : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # nat : nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 12;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 9;      # pair int address : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : nat : nat : mutez : @some : list operation : int : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 6;      # int : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ADD;        # nat : nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ADD;        # nat : nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # @storage : @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 7;      # address : @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair address @some : mutez : @some : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        TRANSFER_TOKENS; # operation : list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CONS;       # list operation : pair int address : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair int address : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # address : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CONTRACT unit; # option (contract unit) : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH mutez 1; # mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 1000000000000; # nat : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 4;      # nat : nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        MUL;        # mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        UNIT;       # unit : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        TRANSFER_TOKENS; # operation : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CONS;       # list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 3;      # @storage : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 4;      # address : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH mutez 0; # mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH bool True; # bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 7;      # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        INT;        # int : bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 0; # nat : pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        INT;        # int : pair int bool : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 0; # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                          }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        IF_NONE
                          {
                            UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                          }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        SWAP;       # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # @storage : @parameter%repay : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # @storage : @storage : @parameter%repay : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # @storage : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 4;      # address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SENDER;     # @sender : address : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # @parameter%repay : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))) : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair nat (pair nat (pair bool (pair int (pair int nat)))) : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # pair nat (pair bool (pair int (pair int nat))) : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # nat : pair bool (pair int (pair int nat)) : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair bool (pair int (pair int nat)) : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # bool : pair int (pair int nat) : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # pair int (pair int nat) : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    UNPAIR;     # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH bool False; # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 4;      # bool : bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EQ;         # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {}
                      {
                        PUSH int 16; # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }; # int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 9;      # lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 9;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 3;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 6;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    EXEC;       # nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    SWAP;       # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP;        # int : int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUG 2;      # int : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ISNAT;      # option nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    ADD;        # nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DUP 3;      # pair int nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    CDR;        # nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    COMPARE;    # int : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    LT;         # bool : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    IF
                      {
                        SWAP;       # pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair int nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : pair int nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair int nat : pair int nat : nat : int : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 3;      # pair int nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 6;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 3;      # int : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ADD;        # nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 4;      # nat : @some : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }
                      {
                        DUP 9;      # lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 9;      # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 3;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # int : int : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 2;      # int : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 0; # nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 6;      # pair int nat : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : nat : nat : int : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 3;      # int : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ADD;        # nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 4;      # pair int nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : pair int nat : bool : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 5;      # nat : @some : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NIL operation; # list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 9;      # @storage : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 8;      # address : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 8;      # nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    MUL;        # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 4;      # address : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 9;      # @storage : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 8;      # address : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 12;     # @storage : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 8;      # nat : nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    MUL;        # nat : nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : mutez : @some : list operation : nat : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # nat : nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 11;     # @storage : @some : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 7;      # address : @some : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address @some : mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 8;      # @storage : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 8;      # address : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %burn (pair address nat); # option (contract (pair address nat)) : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH mutez 0; # mutez : @some : list operation : nat : nat : pair int nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # pair int nat : mutez : @some : list operation : nat : nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : mutez : @some : list operation : nat : nat : bool : address : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 7;      # address : nat : mutez : @some : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address nat : mutez : @some : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 6;      # @storage : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 4;      # address : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    BALANCE;    # @balance : @some : list operation : nat : nat : bool : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 9;      # lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                      }; # nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 10;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DUP 10;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    EXEC;       # nat : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    INT;        # int : bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int bool : @balance : @some : list operation : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 5;      # nat : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    INT;        # int : pair int bool : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair int (pair int bool) : @balance : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # nat : pair int (pair int bool) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair nat (pair int (pair int bool)) : @balance : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 4;      # address : pair nat (pair int (pair int bool)) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    PAIR;       # pair address (pair nat (pair int (pair int bool))) : @balance : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                    DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                    DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                      }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                    DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    IF_NONE
                      {
                        UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                      }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setCollateralizationPercentage : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%setCollateralizationPercentage : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setCollateralizationPercentage : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%setCollateralizationPercentage : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%setCollateralizationPercentage : @storage
                    DROP;       # @parameter%setCollateralizationPercentage : @storage
                    SWAP;       # @storage : @parameter%setCollateralizationPercentage
                    DUP;        # @storage : @storage : @parameter%setCollateralizationPercentage
                    DUG 2;      # @storage : @parameter%setCollateralizationPercentage : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setCollateralizationPercentage : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setCollateralizationPercentage : @storage
                    CAR;        # address : @parameter%setCollateralizationPercentage : @storage
                    SENDER;     # @sender : address : @parameter%setCollateralizationPercentage : @storage
                    COMPARE;    # int : @parameter%setCollateralizationPercentage : @storage
                    EQ;         # bool : @parameter%setCollateralizationPercentage : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setCollateralizationPercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setCollateralizationPercentage : @storage
                    SWAP;       # @storage : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    CAR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setCollateralizationPercentage
                    DIG 4;      # @parameter%setCollateralizationPercentage : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # nat : @parameter%setCollateralizationPercentage : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair nat @parameter%setCollateralizationPercentage : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NIL operation; # list operation : pair (pair (pair (pair nat @parameter%setCollateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.left.right.right : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.left.right.right : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.left.right.right : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.left.right.right : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter.left.right.right : @storage
                DROP;       # @parameter.left.right.right : @storage
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setDeveloperFundContract
                    DUP;        # @storage : @storage : @parameter%setDeveloperFundContract
                    DUG 2;      # @storage : @parameter%setDeveloperFundContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setDeveloperFundContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setDeveloperFundContract : @storage
                    CAR;        # address : @parameter%setDeveloperFundContract : @storage
                    SENDER;     # @sender : address : @parameter%setDeveloperFundContract : @storage
                    COMPARE;    # int : @parameter%setDeveloperFundContract : @storage
                    EQ;         # bool : @parameter%setDeveloperFundContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setDeveloperFundContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setDeveloperFundContract : @storage
                    SWAP;       # @storage : @parameter%setDeveloperFundContract
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                    SWAP;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                    CAR;        # nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setDeveloperFundContract
                    DIG 4;      # @parameter%setDeveloperFundContract : nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # nat : @parameter%setDeveloperFundContract : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair nat @parameter%setDeveloperFundContract : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat @parameter%setDeveloperFundContract : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat @parameter%setDeveloperFundContract)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%setGovernorContract
                        DUP;        # @storage : @storage : @parameter%setGovernorContract
                        DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setGovernorContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setGovernorContract : @storage
                        CAR;        # address : @parameter%setGovernorContract : @storage
                        SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                        COMPARE;    # int : @parameter%setGovernorContract : @storage
                        EQ;         # bool : @parameter%setGovernorContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setGovernorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setGovernorContract : @storage
                        SWAP;       # @storage : @parameter%setGovernorContract
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        CDR;        # bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        DIG 4;      # @parameter%setGovernorContract : bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair @parameter%setGovernorContract bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair @parameter%setGovernorContract bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        SWAP;       # @storage : @parameter%setInitializerContract
                        DUP;        # @storage : @storage : @parameter%setInitializerContract
                        DUG 2;      # @storage : @parameter%setInitializerContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setInitializerContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setInitializerContract : @storage
                        CAR;        # address : @parameter%setInitializerContract : @storage
                        SENDER;     # @sender : address : @parameter%setInitializerContract : @storage
                        COMPARE;    # int : @parameter%setInitializerContract : @storage
                        EQ;         # bool : @parameter%setInitializerContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setInitializerContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setInitializerContract : @storage
                        SWAP;       # @storage : @parameter%setInitializerContract
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        CDR;        # nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setInitializerContract
                        DIG 4;      # @parameter%setInitializerContract : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair @parameter%setInitializerContract nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair @parameter%setInitializerContract nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair @parameter%setInitializerContract nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.right.left.left : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.right.left.left : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.right.left.left : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.right.left.left : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter.right.left.left : @storage
                DROP;       # @parameter.right.left.left : @storage
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setLiquidationFeePercent
                    DUP;        # @storage : @storage : @parameter%setLiquidationFeePercent
                    DUG 2;      # @storage : @parameter%setLiquidationFeePercent : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setLiquidationFeePercent : @storage
                    CAR;        # address : @parameter%setLiquidationFeePercent : @storage
                    SENDER;     # @sender : address : @parameter%setLiquidationFeePercent : @storage
                    COMPARE;    # int : @parameter%setLiquidationFeePercent : @storage
                    EQ;         # bool : @parameter%setLiquidationFeePercent : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setLiquidationFeePercent : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setLiquidationFeePercent : @storage
                    SWAP;       # @storage : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setLiquidationFeePercent
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    CAR;        # timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidationFeePercent
                    DIG 4;      # @parameter%setLiquidationFeePercent : timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # timestamp : @parameter%setLiquidationFeePercent : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair timestamp @parameter%setLiquidationFeePercent : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair timestamp @parameter%setLiquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setLiquidityPoolContract
                    DUP;        # @storage : @storage : @parameter%setLiquidityPoolContract
                    DUG 2;      # @storage : @parameter%setLiquidityPoolContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setLiquidityPoolContract : @storage
                    CAR;        # address : @parameter%setLiquidityPoolContract : @storage
                    SENDER;     # @sender : address : @parameter%setLiquidityPoolContract : @storage
                    COMPARE;    # int : @parameter%setLiquidityPoolContract : @storage
                    EQ;         # bool : @parameter%setLiquidityPoolContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setLiquidityPoolContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setLiquidityPoolContract : @storage
                    SWAP;       # @storage : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setLiquidityPoolContract
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    SWAP;       # pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    CDR;        # address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setLiquidityPoolContract
                    DIG 4;      # @parameter%setLiquidityPoolContract : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair @parameter%setLiquidityPoolContract address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair @parameter%setLiquidityPoolContract address : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair @parameter%setLiquidityPoolContract address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setOvenProxyContract : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%setOvenProxyContract : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setOvenProxyContract : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%setOvenProxyContract : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%setOvenProxyContract : @storage
                    DROP;       # @parameter%setOvenProxyContract : @storage
                    SWAP;       # @storage : @parameter%setOvenProxyContract
                    DUP;        # @storage : @storage : @parameter%setOvenProxyContract
                    DUG 2;      # @storage : @parameter%setOvenProxyContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setOvenProxyContract : @storage
                    CAR;        # address : @parameter%setOvenProxyContract : @storage
                    SENDER;     # @sender : address : @parameter%setOvenProxyContract : @storage
                    COMPARE;    # int : @parameter%setOvenProxyContract : @storage
                    EQ;         # bool : @parameter%setOvenProxyContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setOvenProxyContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setOvenProxyContract : @storage
                    SWAP;       # @storage : @parameter%setOvenProxyContract
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setOvenProxyContract
                    SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                    UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                    UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                    SWAP;       # pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                    CAR;        # address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setOvenProxyContract
                    DIG 4;      # @parameter%setOvenProxyContract : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # address : @parameter%setOvenProxyContract : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair address @parameter%setOvenProxyContract : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair address @parameter%setOvenProxyContract : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                    SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address @parameter%setOvenProxyContract)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setPrivateLiquidationThreshold : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%setPrivateLiquidationThreshold : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setPrivateLiquidationThreshold : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%setPrivateLiquidationThreshold : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%setPrivateLiquidationThreshold : @storage
                        DROP;       # @parameter%setPrivateLiquidationThreshold : @storage
                        SWAP;       # @storage : @parameter%setPrivateLiquidationThreshold
                        DUP;        # @storage : @storage : @parameter%setPrivateLiquidationThreshold
                        DUG 2;      # @storage : @parameter%setPrivateLiquidationThreshold : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setPrivateLiquidationThreshold : @storage
                        CAR;        # address : @parameter%setPrivateLiquidationThreshold : @storage
                        SENDER;     # @sender : address : @parameter%setPrivateLiquidationThreshold : @storage
                        COMPARE;    # int : @parameter%setPrivateLiquidationThreshold : @storage
                        EQ;         # bool : @parameter%setPrivateLiquidationThreshold : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setPrivateLiquidationThreshold : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setPrivateLiquidationThreshold : @storage
                        SWAP;       # @storage : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setPrivateLiquidationThreshold
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        SWAP;       # pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        UNPAIR;     # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        CDR;        # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setPrivateLiquidationThreshold
                        DIG 4;      # @parameter%setPrivateLiquidationThreshold : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair @parameter%setPrivateLiquidationThreshold nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair @parameter%setPrivateLiquidationThreshold nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        DROP;       # @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : @parameter%setStabilityFee : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : @parameter%setStabilityFee : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        SENDER;     # @sender : address : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        COMPARE;    # int : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        EQ;         # bool : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }; # @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : @parameter%setStabilityFee : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : @parameter%setStabilityFee : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                          }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : @storage
                        DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%setStabilityFee
                        DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%setStabilityFee
                        DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        IF_NONE
                          {
                            UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                          }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        SWAP;       # pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        UNPAIR;     # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        CAR;        # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%setStabilityFee
                        DIG 4;      # @parameter%setStabilityFee : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        SWAP;       # nat : @parameter%setStabilityFee : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        PAIR;       # pair nat @parameter%setStabilityFee : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        PAIR;       # pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        SWAP;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat @parameter%setStabilityFee) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
            NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.right.right.left : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.right.right.left : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter.right.right.left : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DROP;       # @parameter.right.right.left : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter.right.right.left : @storage
                DROP;       # @parameter.right.right.left : @storage
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setStabilityFundContract
                    DUP;        # @storage : @storage : @parameter%setStabilityFundContract
                    DUG 2;      # @storage : @parameter%setStabilityFundContract : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setStabilityFundContract : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setStabilityFundContract : @storage
                    CAR;        # address : @parameter%setStabilityFundContract : @storage
                    SENDER;     # @sender : address : @parameter%setStabilityFundContract : @storage
                    COMPARE;    # int : @parameter%setStabilityFundContract : @storage
                    EQ;         # bool : @parameter%setStabilityFundContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setStabilityFundContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setStabilityFundContract : @storage
                    UPDATE 7;   # @storage
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%setTokenContract
                        DUP;        # @storage : @storage : @parameter%setTokenContract
                        DUG 2;      # @storage : @parameter%setTokenContract : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%setTokenContract : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%setTokenContract : @storage
                        CAR;        # address : @parameter%setTokenContract : @storage
                        SENDER;     # @sender : address : @parameter%setTokenContract : @storage
                        COMPARE;    # int : @parameter%setTokenContract : @storage
                        EQ;         # bool : @parameter%setTokenContract : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%setTokenContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setTokenContract : @storage
                        UPDATE 8;   # @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%updateContracts
                        DUP;        # @storage : @storage : @parameter%updateContracts
                        DUG 2;      # @storage : @parameter%updateContracts : @storage
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%updateContracts : @storage
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%updateContracts : @storage
                        CAR;        # address : @parameter%updateContracts : @storage
                        SENDER;     # @sender : address : @parameter%updateContracts : @storage
                        COMPARE;    # int : @parameter%updateContracts : @storage
                        EQ;         # bool : @parameter%updateContracts : @storage
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%updateContracts : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateContracts : @storage
                        UNPAIR;     # address : pair address (pair address (pair address address)) : @storage
                        SWAP;       # pair address (pair address (pair address address)) : address : @storage
                        UNPAIR;     # address : pair address (pair address address) : address : @storage
                        SWAP;       # pair address (pair address address) : address : address : @storage
                        UNPAIR;     # address : pair address address : address : address : @storage
                        SWAP;       # pair address address : address : address : address : @storage
                        UNPAIR;     # address : address : address : address : address : @storage
                        DIG 5;      # @storage : address : address : address : address : address
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                        CDR;        # bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address : address
                        DIG 8;      # address : bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                        PAIR;       # pair address bool : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                        PAIR;       # pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address : address
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address : address : address : address
                        DIG 4;      # address : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address : address : address
                        UPDATE 8;   # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address : address : address
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address : address
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address : address
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address : address
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address : address
                        SWAP;       # pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address : address
                        CAR;        # address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address : address
                        DIG 6;      # address : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        SWAP;       # address : address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        PAIR;       # pair address address : pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        SWAP;       # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair address address : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        PAIR;       # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        PAIR;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : address : address
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address : address
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address : address
                        SWAP;       # address : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address
                        UPDATE 7;   # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : address
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address
                        UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address
                        SWAP;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address
                        CAR;        # nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : address
                        DIG 4;      # address : nat : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # nat : address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair nat address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat address : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address) : pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair address bool) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair address address)) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateFundSplits : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateFundSplits : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DROP;       # @parameter%updateFundSplits : @storage : lambda (pair int (pair nat (pair nat nat))) nat
                    DIG 2;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%updateFundSplits : @storage
                    DROP;       # @parameter%updateFundSplits : @storage
                    PUSH nat 1000000000000000000; # nat : @parameter%updateFundSplits : @storage
                    SWAP;       # @parameter%updateFundSplits : nat : @storage
                    DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : @storage
                    CDR;        # nat : @parameter%updateFundSplits : nat : @storage
                    SWAP;       # @parameter%updateFundSplits : nat : nat : @storage
                    DUP;        # @parameter%updateFundSplits : @parameter%updateFundSplits : nat : nat : @storage
                    DUG 3;      # @parameter%updateFundSplits : nat : nat : @parameter%updateFundSplits : @storage
                    CAR;        # nat : nat : nat : @parameter%updateFundSplits : @storage
                    ADD;        # nat : nat : @parameter%updateFundSplits : @storage
                    COMPARE;    # int : @parameter%updateFundSplits : @storage
                    EQ;         # bool : @parameter%updateFundSplits : @storage
                    IF
                      {}
                      {
                        PUSH int 25; # int : @parameter%updateFundSplits : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateFundSplits : @storage
                    SWAP;       # @storage : @parameter%updateFundSplits
                    DUP;        # @storage : @storage : @parameter%updateFundSplits
                    DUG 2;      # @storage : @parameter%updateFundSplits : @storage
                    CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%updateFundSplits : @storage
                    GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%updateFundSplits : @storage
                    CAR;        # address : @parameter%updateFundSplits : @storage
                    SENDER;     # @sender : address : @parameter%updateFundSplits : @storage
                    COMPARE;    # int : @parameter%updateFundSplits : @storage
                    EQ;         # bool : @parameter%updateFundSplits : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%updateFundSplits : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateFundSplits : @storage
                    SWAP;       # @storage : @parameter%updateFundSplits
                    UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                    UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                    UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                    SWAP;       # pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                    CDR;        # address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateFundSplits
                    DIG 4;      # @parameter%updateFundSplits : address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    CAR;        # nat : address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair nat address : pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    SWAP;       # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair nat address : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                    NIL operation; # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }
                  {
                    IF_LEFT
                      {
                        DIG 2;      # lambda (pair nat (pair nat nat)) nat : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DROP;       # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 3;      # lambda (pair int (pair nat (pair nat nat))) nat : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        DROP;       # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (address %governorContractAddress) (bool %initialized) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        SENDER;     # @sender : address : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        COMPARE;    # int : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        EQ;         # bool : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        IF
                          {}
                          {
                            PUSH int 4; # int : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }; # @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : @parameter%updateParams : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                          }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : @storage
                        DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                        DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                        DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        IF_NONE
                          {
                            UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                          }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : @parameter%updateParams
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : @parameter%updateParams
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : @parameter%updateParams
                        SWAP;       # @parameter%updateParams : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # nat : pair nat (pair nat (option mutez)) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        SWAP;       # pair nat (pair nat (option mutez)) : nat : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # nat : pair nat (option mutez) : nat : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DIG 3;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair nat (option mutez) : nat
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : nat : pair nat (option mutez) : nat
                        SWAP;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez) : nat
                        UNPAIR;     # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez) : nat
                        SWAP;       # pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez) : nat
                        UNPAIR;     # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez) : nat
                        CAR;        # nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez) : nat
                        DIG 6;      # nat : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        SWAP;       # nat : nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        PAIR;       # pair nat nat : pair (address %stabilityFundContractAddress) (address %tokenContractAddress) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        PAIR;       # pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        SWAP;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        UNPAIR;     # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        CAR;        # timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : nat : pair nat (option mutez)
                        DIG 4;      # nat : timestamp : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat (option mutez)
                        SWAP;       # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat (option mutez)
                        PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat (option mutez)
                        PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat (option mutez)
                        PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair nat (option mutez)
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair nat (option mutez)
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair nat (option mutez)
                        UNPAIR;     # pair (nat %amountLoaned) (nat %collateralizationPercentage) : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair nat (option mutez)
                        CAR;        # nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair nat (option mutez)
                        DIG 4;      # pair nat (option mutez) : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        CAR;        # nat : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        SWAP;       # nat : nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair nat nat : pair (nat %devFundSplit) (address %developerFundContractAddress) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        NIL operation; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }
                      {
                        SWAP;       # @storage : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @storage : @storage : @parameter%withdraw : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 2;      # @storage : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 4;      # address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SENDER;     # @sender : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EQ;         # bool : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {}
                          {
                            PUSH int 2; # int : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }; # @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # @parameter%withdraw : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP;        # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUG 2;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # address : pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # address : pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair nat (pair nat (pair bool (pair int (pair int mutez)))) : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair nat (pair bool (pair int (pair int mutez))) : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair nat (pair bool (pair int (pair int mutez))) : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # nat : pair bool (pair int (pair int mutez)) : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair bool (pair int (pair int mutez)) : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # bool : pair int (pair int mutez) : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SWAP;       # pair int (pair int mutez) : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNPAIR;     # int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 0; # nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 15;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 7;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 5;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 3;      # int : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 6;      # nat : nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ADD;        # nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        COMPARE;    # int : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GT;         # bool : int : pair int mutez : bool : nat : nat : address : address : nat : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF
                          {
                            DIG 8;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : int : pair int mutez : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : nat : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 8;      # @parameter%withdraw : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 9;      # @storage : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (nat %amountLoaned) (nat %collateralizationPercentage) : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 10;     # lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 13;     # lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 13;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                              }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 14;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 14;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 5;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 8;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 6;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 4;      # int : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 7;      # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ADD;        # nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : nat : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 10;     # nat : nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PUSH nat 1000000000000; # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PUSH mutez 1; # mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 7;      # pair int mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CDR;        # mutez : mutez : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EDIV;       # option (pair nat mutez) : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            CAR;        # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            MUL;        # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DUP 9;      # nat : nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            SUB;        # int : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            ISNAT;      # option nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF_NONE
                              {
                                UNIT;       # unit : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair nat nat : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            PAIR;       # pair @some (pair nat nat) : lambda (pair nat (pair nat nat)) nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            EXEC;       # nat : nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            COMPARE;    # int : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            GE;         # bool : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            IF
                              {}
                              {
                                PUSH int 11; # int : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                                FAILWITH;   # FAILED
                              }; # int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }
                          {
                            DIG 7;      # nat : int : pair int mutez : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 7;      # pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))) : int : pair int mutez : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : @parameter%withdraw : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 7;      # @parameter%withdraw : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DIG 8;      # lambda (pair nat (pair nat nat)) nat : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            DROP;       # int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NIL operation; # list operation : int : pair int mutez : bool : nat : nat : address : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 6;      # address : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONTRACT unit; # option (contract unit) : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # pair int mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        UNIT;       # unit : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        TRANSFER_TOKENS; # operation : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONS;       # list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 8;      # @storage : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 4;      # address : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 4;      # pair int mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH mutez 1; # mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 1000000000000; # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 9;      # nat : nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        MUL;        # mutez : mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # mutez : @some : list operation : int : pair int mutez : bool : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 5;      # bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 10;     # lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DUP 11;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        EXEC;       # nat : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        INT;        # int : bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        PAIR;       # pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat
                        DIG 10;     # lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 11;     # lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                          }; # nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 12;     # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 7;      # int : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DUP 9;      # nat : pair @some nat : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : pair int mutez : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 7;      # pair int mutez : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # int : pair nat (pair @some nat) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair nat (pair @some nat)) : lambda (pair int (pair nat (pair nat nat))) nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        EXEC;       # nat : pair int bool : mutez : @some : list operation : int : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 5;      # int : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ISNAT;      # option nat : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        IF_NONE
                          {
                            UNIT;       # unit : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        ADD;        # nat : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        INT;        # int : pair int bool : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair int (pair int bool) : mutez : @some : list operation : nat : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 4;      # nat : pair int (pair int bool) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair nat (pair int (pair int bool)) : mutez : @some : list operation : address : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 4;      # address : pair nat (pair int (pair int bool)) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        PAIR;       # pair address (pair nat (pair int (pair int bool))) : mutez : @some : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        TRANSFER_TOKENS; # operation : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        CONS;       # list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # @storage : list operation : lambda (pair nat (pair nat nat)) nat
                        DUP;        # @storage : @storage : list operation : lambda (pair nat (pair nat nat)) nat
                        DUG 2;      # @storage : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex)) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        UNPAIR;     # pair (address %governorContractAddress) (bool %initialized) : pair (address %initializerContractAddress) (nat %interestIndex) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        SWAP;       # pair (address %initializerContractAddress) (nat %interestIndex) : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        CAR;        # address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage : lambda (pair nat (pair nat nat)) nat
                        DIG 6;      # lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        PUSH nat 60; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CAR;        # timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        NOW;        # @now : timestamp : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        SUB;        # int : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        ISNAT;      # option nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        EDIV;       # option (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                          }; # nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DUP 8;      # @storage : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        GET 5;      # pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee) : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        CDR;        # nat : nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        PAIR;       # pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : @storage
                        DIG 7;      # @storage : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        CAR;        # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair (address %initializerContractAddress) (nat %interestIndex))) : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        GET 6;      # nat : pair nat nat : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair nat (pair nat nat) : lambda (pair nat (pair nat nat)) nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        EXEC;       # nat : address : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # address : nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair address nat : pair (address %governorContractAddress) (bool %initialized) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # pair (address %governorContractAddress) (bool %initialized) : pair address nat : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        SWAP;       # pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress)) : pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        DUP;        # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        DUG 2;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        SWAP;       # pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        UNPAIR;     # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CDR;        # nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP 6;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        CAR;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        PUSH nat 60; # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DUP;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                        DIG 8;      # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        GET 3;      # pair (pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent)) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        CAR;        # pair (timestamp %lastInterestIndexUpdateTime) (nat %liquidationFeePercent) : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        CAR;        # timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        NOW;        # @now : timestamp : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        SUB;        # int : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        ISNAT;      # option nat : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        IF_NONE
                          {
                            UNIT;       # unit : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        EDIV;       # option (pair nat nat) : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        IF_NONE
                          {
                            UNIT;       # unit : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                            FAILWITH;   # FAILED
                          }
                          {
                            CAR;        # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                          }; # nat : nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        MUL;        # nat : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        INT;        # int : timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        ADD;        # timestamp : nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair timestamp nat : pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress)) : pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        PAIR;       # pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : list operation
                        SWAP;       # pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat)) : pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))) : list operation
                        SWAP;       # list operation : pair (pair (pair (pair (nat %amountLoaned) (nat %collateralizationPercentage)) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                      }; # list operation : pair (pair (pair (pair nat nat) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair (address %governorContractAddress) (bool %initialized)) (pair address nat))) (pair (pair (pair timestamp nat) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair nat nat) (pair nat address)) (pair (pair address bool) (pair address nat))) (pair (pair (pair timestamp nat) (pair address address)) (pair (pair nat nat) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress)))))
  };