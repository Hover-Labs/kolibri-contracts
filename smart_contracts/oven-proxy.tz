parameter (or (or (or (or (pair %borrow address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) (nat %borrow_callback)) (or (unit %default) (pair %deposit address (pair address (pair nat (pair nat (pair bool (pair int int)))))))) (or (or (pair %liquidate address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) (nat %liquidate_callback)) (or (unit %pause) (pair %repay address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))))) (or (or (or (address %setGovernorContract) (address %setMinterContract)) (or (address %setOracleContract) (address %setOvenRegistryContract))) (or (or (address %setPauseGuardianContract) (unit %unpause)) (or (pair %updateState address (pair nat (pair int (pair int bool)))) (or (pair %withdraw address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))) (nat %withdraw_callback))))));
storage   (pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == borrow ==
                    # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryContractAddress, entry_point='isOven').open_some()) # @parameter%borrow : @storage
                    NIL operation; # list operation : @parameter%borrow : @storage
                    DUP 3;      # @storage : list operation : @parameter%borrow : @storage
                    GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : list operation : @parameter%borrow : @storage
                    CAR;        # address : list operation : @parameter%borrow : @storage
                    CONTRACT %isOven address; # option (contract address) : list operation : @parameter%borrow : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%borrow : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%borrow : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%borrow : @storage
                    SENDER;     # @sender : mutez : @some : list operation : @parameter%borrow : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%borrow : @storage
                    CONS;       # list operation : @parameter%borrow : @storage
                    # sp.verify(self.data.paused == False, 18) # list operation : @parameter%borrow : @storage
                    PUSH bool False; # bool : list operation : @parameter%borrow : @storage
                    DUP 4;      # @storage : bool : list operation : @parameter%borrow : @storage
                    GET 5;      # bool : bool : list operation : @parameter%borrow : @storage
                    COMPARE;    # int : list operation : @parameter%borrow : @storage
                    EQ;         # bool : list operation : @parameter%borrow : @storage
                    IF
                      {}
                      {
                        PUSH int 18; # int : list operation : @parameter%borrow : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%borrow : @storage
                    # sp.verify(self.data.state == 0, 12) # list operation : @parameter%borrow : @storage
                    PUSH int 0; # int : list operation : @parameter%borrow : @storage
                    DUP 4;      # @storage : int : list operation : @parameter%borrow : @storage
                    GET 7;      # int : int : list operation : @parameter%borrow : @storage
                    COMPARE;    # int : list operation : @parameter%borrow : @storage
                    EQ;         # bool : list operation : @parameter%borrow : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : list operation : @parameter%borrow : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%borrow : @storage
                    # self.data.state = 1 # list operation : @parameter%borrow : @storage
                    DIG 2;      # @storage : list operation : @parameter%borrow
                    PUSH int 1; # int : @storage : list operation : @parameter%borrow
                    UPDATE 7;   # @storage : list operation : @parameter%borrow
                    # self.data.borrowParams = sp.some(params) # @storage : list operation : @parameter%borrow
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%borrow
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%borrow
                    CDR;        # address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%borrow
                    DIG 4;      # @parameter%borrow : address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    SOME;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    # sp.transfer(sp.self_entry_point('borrow_callback'), sp.tez(0), sp.contract(sp.TContract(sp.TNat), self.data.oracleContractAddress, entry_point='getXtzUsdRate').open_some()) # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    DUP;        # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    DUG 2;      # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CAR;        # pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    GET 6;      # address : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CONTRACT %getXtzUsdRate (contract nat); # option (contract (contract nat)) : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    SELF %borrow_callback; # @self : mutez : @some : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CONS;       # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }
                  {
                    SWAP;       # @storage : @parameter%borrow_callback
                    # == borrow_callback ==
                    # sp.verify(sp.sender == self.data.oracleContractAddress, 3) # @storage : @parameter%borrow_callback
                    DUP;        # @storage : @storage : @parameter%borrow_callback
                    DUG 2;      # @storage : @parameter%borrow_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%borrow_callback : @storage
                    GET 6;      # address : @parameter%borrow_callback : @storage
                    SENDER;     # @sender : address : @parameter%borrow_callback : @storage
                    COMPARE;    # int : @parameter%borrow_callback : @storage
                    EQ;         # bool : @parameter%borrow_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 3; # int : @parameter%borrow_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%borrow_callback : @storage
                    # sp.verify(self.data.state == 1, 12) # @parameter%borrow_callback : @storage
                    PUSH int 1; # int : @parameter%borrow_callback : @storage
                    DUP 3;      # @storage : int : @parameter%borrow_callback : @storage
                    GET 7;      # int : int : @parameter%borrow_callback : @storage
                    COMPARE;    # int : @parameter%borrow_callback : @storage
                    EQ;         # bool : @parameter%borrow_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : @parameter%borrow_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%borrow_callback : @storage
                    # sp.transfer((params, self.data.borrowParams.open_some()), sp.balance, sp.contract(sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TNat)))))))), self.data.minterContractAddress, entry_point='borrow').open_some()) # @parameter%borrow_callback : @storage
                    NIL operation; # list operation : @parameter%borrow_callback : @storage
                    DUP 3;      # @storage : list operation : @parameter%borrow_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @parameter%borrow_callback : @storage
                    GET 5;      # address : list operation : @parameter%borrow_callback : @storage
                    CONTRACT %borrow (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))); # option (contract (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))))) : list operation : @parameter%borrow_callback : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%borrow_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%borrow_callback : @storage
                    BALANCE;    # @balance : @some : list operation : @parameter%borrow_callback : @storage
                    DUP 5;      # @storage : @balance : @some : list operation : @parameter%borrow_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @balance : @some : list operation : @parameter%borrow_callback : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @balance : @some : list operation : @parameter%borrow_callback : @storage
                    CAR;        # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : @balance : @some : list operation : @parameter%borrow_callback : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @balance : @some : list operation : @parameter%borrow_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @balance : @some : list operation : @parameter%borrow_callback : @storage
                    DIG 4;      # @parameter%borrow_callback : @some : @balance : @some : list operation : @storage
                    PAIR;       # pair @parameter%borrow_callback @some : @balance : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = 0 # @storage : list operation
                    PUSH int 0; # int : @storage : list operation
                    UPDATE 7;   # @storage : list operation
                    # self.data.borrowParams = sp.none # @storage : list operation
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    CDR;        # address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    NONE (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))); # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    SWAP;       # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
              }
              {
                IF_LEFT
                  {
                    PUSH int 19; # int : @parameter%default : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # == deposit ==
                    # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryContractAddress, entry_point='isOven').open_some()) # @parameter%deposit : @storage
                    NIL operation; # list operation : @parameter%deposit : @storage
                    DUP 3;      # @storage : list operation : @parameter%deposit : @storage
                    GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : list operation : @parameter%deposit : @storage
                    CAR;        # address : list operation : @parameter%deposit : @storage
                    CONTRACT %isOven address; # option (contract address) : list operation : @parameter%deposit : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%deposit : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%deposit : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%deposit : @storage
                    SENDER;     # @sender : mutez : @some : list operation : @parameter%deposit : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%deposit : @storage
                    CONS;       # list operation : @parameter%deposit : @storage
                    # sp.verify(self.data.paused == False, 18) # list operation : @parameter%deposit : @storage
                    PUSH bool False; # bool : list operation : @parameter%deposit : @storage
                    DUP 4;      # @storage : bool : list operation : @parameter%deposit : @storage
                    GET 5;      # bool : bool : list operation : @parameter%deposit : @storage
                    COMPARE;    # int : list operation : @parameter%deposit : @storage
                    EQ;         # bool : list operation : @parameter%deposit : @storage
                    IF
                      {}
                      {
                        PUSH int 18; # int : list operation : @parameter%deposit : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%deposit : @storage
                    # sp.verify(self.data.state == 0, 12) # list operation : @parameter%deposit : @storage
                    PUSH int 0; # int : list operation : @parameter%deposit : @storage
                    DUP 4;      # @storage : int : list operation : @parameter%deposit : @storage
                    GET 7;      # int : int : list operation : @parameter%deposit : @storage
                    COMPARE;    # int : list operation : @parameter%deposit : @storage
                    EQ;         # bool : list operation : @parameter%deposit : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : list operation : @parameter%deposit : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%deposit : @storage
                    # sp.transfer(params, sp.amount, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TInt)))))), self.data.minterContractAddress, entry_point='deposit').open_some()) # list operation : @parameter%deposit : @storage
                    DUP 3;      # @storage : list operation : @parameter%deposit : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @parameter%deposit : @storage
                    GET 5;      # address : list operation : @parameter%deposit : @storage
                    CONTRACT %deposit (pair address (pair address (pair nat (pair nat (pair bool (pair int int)))))); # option (contract (pair address (pair address (pair nat (pair nat (pair bool (pair int int))))))) : list operation : @parameter%deposit : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%deposit : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%deposit : @storage
                    AMOUNT;     # @amount : @some : list operation : @parameter%deposit : @storage
                    DIG 3;      # @parameter%deposit : @amount : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == liquidate ==
                    # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryContractAddress, entry_point='isOven').open_some()) # @parameter%liquidate : @storage
                    NIL operation; # list operation : @parameter%liquidate : @storage
                    DUP 3;      # @storage : list operation : @parameter%liquidate : @storage
                    GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : list operation : @parameter%liquidate : @storage
                    CAR;        # address : list operation : @parameter%liquidate : @storage
                    CONTRACT %isOven address; # option (contract address) : list operation : @parameter%liquidate : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%liquidate : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%liquidate : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%liquidate : @storage
                    SENDER;     # @sender : mutez : @some : list operation : @parameter%liquidate : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%liquidate : @storage
                    CONS;       # list operation : @parameter%liquidate : @storage
                    # sp.verify(self.data.paused == False, 18) # list operation : @parameter%liquidate : @storage
                    PUSH bool False; # bool : list operation : @parameter%liquidate : @storage
                    DUP 4;      # @storage : bool : list operation : @parameter%liquidate : @storage
                    GET 5;      # bool : bool : list operation : @parameter%liquidate : @storage
                    COMPARE;    # int : list operation : @parameter%liquidate : @storage
                    EQ;         # bool : list operation : @parameter%liquidate : @storage
                    IF
                      {}
                      {
                        PUSH int 18; # int : list operation : @parameter%liquidate : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%liquidate : @storage
                    # sp.verify(self.data.state == 0, 12) # list operation : @parameter%liquidate : @storage
                    PUSH int 0; # int : list operation : @parameter%liquidate : @storage
                    DUP 4;      # @storage : int : list operation : @parameter%liquidate : @storage
                    GET 7;      # int : int : list operation : @parameter%liquidate : @storage
                    COMPARE;    # int : list operation : @parameter%liquidate : @storage
                    EQ;         # bool : list operation : @parameter%liquidate : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : list operation : @parameter%liquidate : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%liquidate : @storage
                    # self.data.state = 3 # list operation : @parameter%liquidate : @storage
                    DIG 2;      # @storage : list operation : @parameter%liquidate
                    PUSH int 3; # int : @storage : list operation : @parameter%liquidate
                    UPDATE 7;   # @storage : list operation : @parameter%liquidate
                    # self.data.liquidateParams = sp.some(params) # @storage : list operation : @parameter%liquidate
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%liquidate
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%liquidate
                    SWAP;       # pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%liquidate
                    CDR;        # pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation : @parameter%liquidate
                    DIG 4;      # @parameter%liquidate : pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    SOME;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    SWAP;       # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    # sp.transfer(sp.self_entry_point('liquidate_callback'), sp.tez(0), sp.contract(sp.TContract(sp.TNat), self.data.oracleContractAddress, entry_point='getXtzUsdRate').open_some()) # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    DUP;        # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    DUG 2;      # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    GET 6;      # address : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CONTRACT %getXtzUsdRate (contract nat); # option (contract (contract nat)) : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    SELF %liquidate_callback; # @self : mutez : @some : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                    CONS;       # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }
                  {
                    SWAP;       # @storage : @parameter%liquidate_callback
                    # == liquidate_callback ==
                    # sp.verify(sp.sender == self.data.oracleContractAddress, 3) # @storage : @parameter%liquidate_callback
                    DUP;        # @storage : @storage : @parameter%liquidate_callback
                    DUG 2;      # @storage : @parameter%liquidate_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%liquidate_callback : @storage
                    GET 6;      # address : @parameter%liquidate_callback : @storage
                    SENDER;     # @sender : address : @parameter%liquidate_callback : @storage
                    COMPARE;    # int : @parameter%liquidate_callback : @storage
                    EQ;         # bool : @parameter%liquidate_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 3; # int : @parameter%liquidate_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%liquidate_callback : @storage
                    # sp.verify(self.data.state == 3, 12) # @parameter%liquidate_callback : @storage
                    PUSH int 3; # int : @parameter%liquidate_callback : @storage
                    DUP 3;      # @storage : int : @parameter%liquidate_callback : @storage
                    GET 7;      # int : int : @parameter%liquidate_callback : @storage
                    COMPARE;    # int : @parameter%liquidate_callback : @storage
                    EQ;         # bool : @parameter%liquidate_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : @parameter%liquidate_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%liquidate_callback : @storage
                    # sp.transfer((params, self.data.liquidateParams.open_some()), sp.balance, sp.contract(sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TAddress)))))))), self.data.minterContractAddress, entry_point='liquidate').open_some()) # @parameter%liquidate_callback : @storage
                    NIL operation; # list operation : @parameter%liquidate_callback : @storage
                    DUP 3;      # @storage : list operation : @parameter%liquidate_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @parameter%liquidate_callback : @storage
                    GET 5;      # address : list operation : @parameter%liquidate_callback : @storage
                    CONTRACT %liquidate (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))); # option (contract (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))))) : list operation : @parameter%liquidate_callback : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%liquidate_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%liquidate_callback : @storage
                    BALANCE;    # @balance : @some : list operation : @parameter%liquidate_callback : @storage
                    DUP 5;      # @storage : @balance : @some : list operation : @parameter%liquidate_callback : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @balance : @some : list operation : @parameter%liquidate_callback : @storage
                    GET 3;      # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : @balance : @some : list operation : @parameter%liquidate_callback : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @balance : @some : list operation : @parameter%liquidate_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @balance : @some : list operation : @parameter%liquidate_callback : @storage
                    DIG 4;      # @parameter%liquidate_callback : @some : @balance : @some : list operation : @storage
                    PAIR;       # pair @parameter%liquidate_callback @some : @balance : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = 0 # @storage : list operation
                    PUSH int 0; # int : @storage : list operation
                    UPDATE 7;   # @storage : list operation
                    # self.data.liquidateParams = sp.none # @storage : list operation
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    SWAP;       # pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    CDR;        # pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    NONE (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))); # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    SWAP;       # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : list operation
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))) : list operation
                    SWAP;       # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }; # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == pause ==
                    # sp.verify(sp.sender == self.data.pauseGuardianContractAddress, 9) # @storage
                    DUP;        # @storage : @storage
                    GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : @storage
                    CDR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 9; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.paused = True # @storage
                    PUSH bool True; # bool : @storage
                    UPDATE 5;   # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    # == repay ==
                    # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryContractAddress, entry_point='isOven').open_some()) # @parameter%repay : @storage
                    NIL operation; # list operation : @parameter%repay : @storage
                    DUP 3;      # @storage : list operation : @parameter%repay : @storage
                    GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : list operation : @parameter%repay : @storage
                    CAR;        # address : list operation : @parameter%repay : @storage
                    CONTRACT %isOven address; # option (contract address) : list operation : @parameter%repay : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%repay : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%repay : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%repay : @storage
                    SENDER;     # @sender : mutez : @some : list operation : @parameter%repay : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%repay : @storage
                    CONS;       # list operation : @parameter%repay : @storage
                    # sp.verify(self.data.paused == False, 18) # list operation : @parameter%repay : @storage
                    PUSH bool False; # bool : list operation : @parameter%repay : @storage
                    DUP 4;      # @storage : bool : list operation : @parameter%repay : @storage
                    GET 5;      # bool : bool : list operation : @parameter%repay : @storage
                    COMPARE;    # int : list operation : @parameter%repay : @storage
                    EQ;         # bool : list operation : @parameter%repay : @storage
                    IF
                      {}
                      {
                        PUSH int 18; # int : list operation : @parameter%repay : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%repay : @storage
                    # sp.verify(self.data.state == 0, 12) # list operation : @parameter%repay : @storage
                    PUSH int 0; # int : list operation : @parameter%repay : @storage
                    DUP 4;      # @storage : int : list operation : @parameter%repay : @storage
                    GET 7;      # int : int : list operation : @parameter%repay : @storage
                    COMPARE;    # int : list operation : @parameter%repay : @storage
                    EQ;         # bool : list operation : @parameter%repay : @storage
                    IF
                      {}
                      {
                        PUSH int 12; # int : list operation : @parameter%repay : @storage
                        FAILWITH;   # FAILED
                      }; # list operation : @parameter%repay : @storage
                    # sp.transfer(params, sp.amount, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TNat))))))), self.data.minterContractAddress, entry_point='repay').open_some()) # list operation : @parameter%repay : @storage
                    DUP 3;      # @storage : list operation : @parameter%repay : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @parameter%repay : @storage
                    GET 5;      # address : list operation : @parameter%repay : @storage
                    CONTRACT %repay (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))); # option (contract (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) : list operation : @parameter%repay : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : list operation : @parameter%repay : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%repay : @storage
                    AMOUNT;     # @amount : @some : list operation : @parameter%repay : @storage
                    DIG 3;      # @parameter%repay : @amount : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
          }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setGovernorContract
                    # == setGovernorContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setGovernorContract
                    DUP;        # @storage : @storage : @parameter%setGovernorContract
                    DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setGovernorContract : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @parameter%setGovernorContract : @storage
                    CDR;        # address : @parameter%setGovernorContract : @storage
                    SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                    COMPARE;    # int : @parameter%setGovernorContract : @storage
                    EQ;         # bool : @parameter%setGovernorContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setGovernorContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setGovernorContract : @storage
                    SWAP;       # @storage : @parameter%setGovernorContract
                    # self.data.governorContractAddress = params # @storage : @parameter%setGovernorContract
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setGovernorContract
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setGovernorContract
                    CAR;        # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setGovernorContract
                    DIG 3;      # @parameter%setGovernorContract : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat))))))) : @parameter%setGovernorContract : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) @parameter%setGovernorContract : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) @parameter%setGovernorContract) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) @parameter%setGovernorContract) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setMinterContract
                    # == setMinterContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setMinterContract
                    DUP;        # @storage : @storage : @parameter%setMinterContract
                    DUG 2;      # @storage : @parameter%setMinterContract : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setMinterContract : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @parameter%setMinterContract : @storage
                    CDR;        # address : @parameter%setMinterContract : @storage
                    SENDER;     # @sender : address : @parameter%setMinterContract : @storage
                    COMPARE;    # int : @parameter%setMinterContract : @storage
                    EQ;         # bool : @parameter%setMinterContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setMinterContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinterContract : @storage
                    SWAP;       # @storage : @parameter%setMinterContract
                    # self.data.minterContractAddress = params # @storage : @parameter%setMinterContract
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    SWAP;       # pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    UNPAIR;     # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    SWAP;       # pair (address %minterContractAddress) (address %oracleContractAddress) : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    CDR;        # address : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setMinterContract
                    DIG 4;      # @parameter%setMinterContract : address : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair @parameter%setMinterContract address : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair @parameter%setMinterContract address : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair @parameter%setMinterContract address) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair @parameter%setMinterContract address) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair @parameter%setMinterContract address)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair @parameter%setMinterContract address))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }; # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setOracleContract
                    # == setOracleContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setOracleContract
                    DUP;        # @storage : @storage : @parameter%setOracleContract
                    DUG 2;      # @storage : @parameter%setOracleContract : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setOracleContract : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @parameter%setOracleContract : @storage
                    CDR;        # address : @parameter%setOracleContract : @storage
                    SENDER;     # @sender : address : @parameter%setOracleContract : @storage
                    COMPARE;    # int : @parameter%setOracleContract : @storage
                    EQ;         # bool : @parameter%setOracleContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setOracleContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setOracleContract : @storage
                    SWAP;       # @storage : @parameter%setOracleContract
                    # self.data.oracleContractAddress = params # @storage : @parameter%setOracleContract
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    UNPAIR;     # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    SWAP;       # pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    UNPAIR;     # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (address %minterContractAddress) (address %oracleContractAddress) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    SWAP;       # pair (address %minterContractAddress) (address %oracleContractAddress) : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    CAR;        # address : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOracleContract
                    DIG 4;      # @parameter%setOracleContract : address : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # address : @parameter%setOracleContract : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair address @parameter%setOracleContract : option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address))))))) : pair address @parameter%setOracleContract : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address @parameter%setOracleContract) : pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    SWAP;       # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address @parameter%setOracleContract) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address @parameter%setOracleContract)) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address @parameter%setOracleContract))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setOvenRegistryContract
                    # == setOvenRegistryContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setOvenRegistryContract
                    DUP;        # @storage : @storage : @parameter%setOvenRegistryContract
                    DUG 2;      # @storage : @parameter%setOvenRegistryContract : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setOvenRegistryContract : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @parameter%setOvenRegistryContract : @storage
                    CDR;        # address : @parameter%setOvenRegistryContract : @storage
                    SENDER;     # @sender : address : @parameter%setOvenRegistryContract : @storage
                    COMPARE;    # int : @parameter%setOvenRegistryContract : @storage
                    EQ;         # bool : @parameter%setOvenRegistryContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setOvenRegistryContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setOvenRegistryContract : @storage
                    SWAP;       # @storage : @parameter%setOvenRegistryContract
                    # self.data.ovenRegistryContractAddress = params # @storage : @parameter%setOvenRegistryContract
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setOvenRegistryContract
                    SWAP;       # pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setOvenRegistryContract
                    UNPAIR;     # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setOvenRegistryContract
                    CDR;        # address : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setOvenRegistryContract
                    DIG 3;      # @parameter%setOvenRegistryContract : address : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    PAIR;       # pair @parameter%setOvenRegistryContract address : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    PAIR;       # pair (pair @parameter%setOvenRegistryContract address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    SWAP;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair @parameter%setOvenRegistryContract address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair @parameter%setOvenRegistryContract address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }; # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
              }; # pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
            NIL operation; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setPauseGuardianContract
                    # == setPauseGuardianContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage : @parameter%setPauseGuardianContract
                    DUP;        # @storage : @storage : @parameter%setPauseGuardianContract
                    DUG 2;      # @storage : @parameter%setPauseGuardianContract : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setPauseGuardianContract : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @parameter%setPauseGuardianContract : @storage
                    CDR;        # address : @parameter%setPauseGuardianContract : @storage
                    SENDER;     # @sender : address : @parameter%setPauseGuardianContract : @storage
                    COMPARE;    # int : @parameter%setPauseGuardianContract : @storage
                    EQ;         # bool : @parameter%setPauseGuardianContract : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%setPauseGuardianContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPauseGuardianContract : @storage
                    SWAP;       # @storage : @parameter%setPauseGuardianContract
                    # self.data.pauseGuardianContractAddress = params # @storage : @parameter%setPauseGuardianContract
                    UNPAIR;     # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : @parameter%setPauseGuardianContract
                    SWAP;       # pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setPauseGuardianContract
                    UNPAIR;     # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setPauseGuardianContract
                    CAR;        # address : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%setPauseGuardianContract
                    DIG 3;      # @parameter%setPauseGuardianContract : address : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    SWAP;       # address : @parameter%setPauseGuardianContract : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    PAIR;       # pair address @parameter%setPauseGuardianContract : pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    PAIR;       # pair (pair address @parameter%setPauseGuardianContract) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))) : pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))
                    SWAP;       # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : pair (pair address @parameter%setPauseGuardianContract) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))
                    PAIR;       # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair address @parameter%setPauseGuardianContract) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                  }
                  {
                    DROP;       # @storage
                    # == unpause ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 4) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @storage
                    CAR;        # pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress) : @storage
                    CDR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.paused = False # @storage
                    PUSH bool False; # bool : @storage
                    UPDATE 5;   # @storage
                  }; # pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
                NIL operation; # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateState
                    # == updateState ==
                    # sp.verify(sp.sender == self.data.minterContractAddress, 5) # @storage : @parameter%updateState
                    DUP;        # @storage : @storage : @parameter%updateState
                    DUG 2;      # @storage : @parameter%updateState : @storage
                    CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%updateState : @storage
                    GET 5;      # address : @parameter%updateState : @storage
                    SENDER;     # @sender : address : @parameter%updateState : @storage
                    COMPARE;    # int : @parameter%updateState : @storage
                    EQ;         # bool : @parameter%updateState : @storage
                    IF
                      {}
                      {
                        PUSH int 5; # int : @parameter%updateState : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateState : @storage
                    # sp.transfer(params, sp.amount, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), sp.fst(params), entry_point='updateState').open_some()) # @parameter%updateState : @storage
                    DUP;        # @parameter%updateState : @parameter%updateState : @storage
                    CAR;        # address : @parameter%updateState : @storage
                    CONTRACT %updateState (pair address (pair nat (pair int (pair int bool)))); # option (contract (pair address (pair nat (pair int (pair int bool))))) : @parameter%updateState : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @parameter%updateState : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%updateState : @storage
                    NIL operation; # list operation : @some : @parameter%updateState : @storage
                    SWAP;       # @some : list operation : @parameter%updateState : @storage
                    AMOUNT;     # @amount : @some : list operation : @parameter%updateState : @storage
                    DIG 3;      # @parameter%updateState : @amount : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == withdraw ==
                        # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryContractAddress, entry_point='isOven').open_some()) # @parameter%withdraw : @storage
                        NIL operation; # list operation : @parameter%withdraw : @storage
                        DUP 3;      # @storage : list operation : @parameter%withdraw : @storage
                        GET 3;      # pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress) : list operation : @parameter%withdraw : @storage
                        CAR;        # address : list operation : @parameter%withdraw : @storage
                        CONTRACT %isOven address; # option (contract address) : list operation : @parameter%withdraw : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : @parameter%withdraw : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%withdraw : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%withdraw : @storage
                        SENDER;     # @sender : mutez : @some : list operation : @parameter%withdraw : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%withdraw : @storage
                        CONS;       # list operation : @parameter%withdraw : @storage
                        # sp.verify(self.data.state == 0, 12) # list operation : @parameter%withdraw : @storage
                        PUSH int 0; # int : list operation : @parameter%withdraw : @storage
                        DUP 4;      # @storage : int : list operation : @parameter%withdraw : @storage
                        GET 7;      # int : int : list operation : @parameter%withdraw : @storage
                        COMPARE;    # int : list operation : @parameter%withdraw : @storage
                        EQ;         # bool : list operation : @parameter%withdraw : @storage
                        IF
                          {}
                          {
                            PUSH int 12; # int : list operation : @parameter%withdraw : @storage
                            FAILWITH;   # FAILED
                          }; # list operation : @parameter%withdraw : @storage
                        # sp.verify(self.data.paused == False, 18) # list operation : @parameter%withdraw : @storage
                        PUSH bool False; # bool : list operation : @parameter%withdraw : @storage
                        DUP 4;      # @storage : bool : list operation : @parameter%withdraw : @storage
                        GET 5;      # bool : bool : list operation : @parameter%withdraw : @storage
                        COMPARE;    # int : list operation : @parameter%withdraw : @storage
                        EQ;         # bool : list operation : @parameter%withdraw : @storage
                        IF
                          {}
                          {
                            PUSH int 18; # int : list operation : @parameter%withdraw : @storage
                            FAILWITH;   # FAILED
                          }; # list operation : @parameter%withdraw : @storage
                        # self.data.state = 2 # list operation : @parameter%withdraw : @storage
                        DIG 2;      # @storage : list operation : @parameter%withdraw
                        PUSH int 2; # int : @storage : list operation : @parameter%withdraw
                        UPDATE 7;   # @storage : list operation : @parameter%withdraw
                        DUG 2;      # list operation : @parameter%withdraw : @storage
                        # self.data.withdrawParams = sp.some(params) # list operation : @parameter%withdraw : @storage
                        DUG 2;      # @parameter%withdraw : @storage : list operation
                        SOME;       # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))) : @storage : list operation
                        UPDATE 8;   # @storage : list operation
                        # sp.transfer(sp.self_entry_point('withdraw_callback'), sp.tez(0), sp.contract(sp.TContract(sp.TNat), self.data.oracleContractAddress, entry_point='getXtzUsdRate').open_some()) # @storage : list operation
                        DUP;        # @storage : @storage : list operation
                        DUG 2;      # @storage : list operation : @storage
                        CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @storage
                        GET 6;      # address : list operation : @storage
                        CONTRACT %getXtzUsdRate (contract nat); # option (contract (contract nat)) : list operation : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @storage
                        SELF %withdraw_callback; # @self : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%withdraw_callback
                        # == withdraw_callback ==
                        # sp.verify(sp.sender == self.data.oracleContractAddress, 3) # @storage : @parameter%withdraw_callback
                        DUP;        # @storage : @storage : @parameter%withdraw_callback
                        DUG 2;      # @storage : @parameter%withdraw_callback : @storage
                        CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : @parameter%withdraw_callback : @storage
                        GET 6;      # address : @parameter%withdraw_callback : @storage
                        SENDER;     # @sender : address : @parameter%withdraw_callback : @storage
                        COMPARE;    # int : @parameter%withdraw_callback : @storage
                        EQ;         # bool : @parameter%withdraw_callback : @storage
                        IF
                          {}
                          {
                            PUSH int 3; # int : @parameter%withdraw_callback : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%withdraw_callback : @storage
                        # sp.verify(self.data.state == 2, 12) # @parameter%withdraw_callback : @storage
                        PUSH int 2; # int : @parameter%withdraw_callback : @storage
                        DUP 3;      # @storage : int : @parameter%withdraw_callback : @storage
                        GET 7;      # int : int : @parameter%withdraw_callback : @storage
                        COMPARE;    # int : @parameter%withdraw_callback : @storage
                        EQ;         # bool : @parameter%withdraw_callback : @storage
                        IF
                          {}
                          {
                            PUSH int 12; # int : @parameter%withdraw_callback : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%withdraw_callback : @storage
                        # sp.transfer((params, self.data.withdrawParams.open_some()), sp.balance, sp.contract(sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TMutez)))))))), self.data.minterContractAddress, entry_point='withdraw').open_some()) # @parameter%withdraw_callback : @storage
                        NIL operation; # list operation : @parameter%withdraw_callback : @storage
                        DUP 3;      # @storage : list operation : @parameter%withdraw_callback : @storage
                        CAR;        # pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress))) : list operation : @parameter%withdraw_callback : @storage
                        GET 5;      # address : list operation : @parameter%withdraw_callback : @storage
                        CONTRACT %withdraw (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))); # option (contract (pair nat (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))) : list operation : @parameter%withdraw_callback : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : list operation : @parameter%withdraw_callback : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%withdraw_callback : @storage
                        BALANCE;    # @balance : @some : list operation : @parameter%withdraw_callback : @storage
                        DUP 5;      # @storage : @balance : @some : list operation : @parameter%withdraw_callback : @storage
                        GET 8;      # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))) : @balance : @some : list operation : @parameter%withdraw_callback : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : @balance : @some : list operation : @parameter%withdraw_callback : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @balance : @some : list operation : @parameter%withdraw_callback : @storage
                        DIG 4;      # @parameter%withdraw_callback : @some : @balance : @some : list operation : @storage
                        PAIR;       # pair @parameter%withdraw_callback @some : @balance : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                        SWAP;       # @storage : list operation
                        # self.data.state = 0 # @storage : list operation
                        PUSH int 0; # int : @storage : list operation
                        UPDATE 7;   # @storage : list operation
                        # self.data.withdrawParams = sp.none # @storage : list operation
                        NONE (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))); # option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))) : @storage : list operation
                        UPDATE 8;   # @storage : list operation
                        SWAP;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
          }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
      }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
    NIL operation; # list operation : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
    SWAP;       # list operation : list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
      }; # list operation : pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))
    PAIR;       # pair (list operation) (pair (pair (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) address) (pair (option (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair address address))) (pair (pair address address) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez))))))))))))
  };