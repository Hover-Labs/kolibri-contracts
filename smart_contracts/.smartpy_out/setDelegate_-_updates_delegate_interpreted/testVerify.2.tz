parameter (pair (pair (nat %borrowedTokens) (pair (int %interestIndex) (bool %isLiquidated))) (pair (address %ovenProxyContractAddress) (pair (address %owner) (int %stabilityFeeTokens))));
storage   unit;
code
  {
    CDR;        # @storage
    # == verify ==
    # sp.verify(sp.some(sp.key_hash('tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf')).open_some() == sp.some(sp.key_hash('tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf')).open_some()) # @storage
    PUSH (option key_hash) (Some "tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf"); # option key_hash : @storage
    IF_SOME
      {}
      {
        PUSH int 598; # int : @storage
        FAILWITH;   # FAILED
      }; # @some : @storage
    PUSH (option key_hash) (Some "tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf"); # option key_hash : @some : @storage
    IF_SOME
      {}
      {
        PUSH int 598; # int : @some : @storage
        FAILWITH;   # FAILED
      }; # @some : @some : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.some(sp.key_hash('tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf')).open_some() == sp.some(sp.key_hash('tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf')).open_some()"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };