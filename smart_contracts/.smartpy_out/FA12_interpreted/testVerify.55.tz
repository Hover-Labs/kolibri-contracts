parameter (pair (pair %k0 (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (nat %debtCeiling) (address %governorContractAddress))) (pair (pair (big_map %metadata string bytes) (bool %paused)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) (pair (option %k1 nat) (pair (option %k2 address) (pair (option %k3 nat) (option %k4 nat)))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(sp.pack(sp.set_type_expr(params.k4.last, sp.TOption(sp.TNat))) == sp.pack(sp.set_type_expr(sp.some(1), sp.TOption(sp.TNat)))) # @parameter : @storage
    PUSH (option nat) (Some 1); # option nat : @parameter : @storage
    PACK;       # bytes : @parameter : @storage
    SWAP;       # @parameter : bytes : @storage
    CDDDDR;     # option nat : bytes : @storage
    PACK;       # bytes : bytes : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(params.k4.last, sp.TOption(sp.TNat))) == sp.pack(sp.set_type_expr(sp.some(1), sp.TOption(sp.TNat)))"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };