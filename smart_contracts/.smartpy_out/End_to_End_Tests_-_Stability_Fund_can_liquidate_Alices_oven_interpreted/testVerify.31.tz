parameter (pair (pair %k0 (string %harbingerAsset) (pair (timestamp %harbingerUpdateTime) (nat %harbingerValue))) (pair (pair %k1 (int %intValue) (nat %natValue)) (pair (unit %k10) (pair (pair %k11 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair (pair %k12 (int %intValue) (nat %natValue)) (pair (pair %k13 (pair (nat %borrowedTokens) (pair (int %interestIndex) (bool %isLiquidated))) (pair (address %ovenProxyContractAddress) (pair (address %owner) (int %stabilityFeeTokens)))) (pair (pair %k2 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair (pair %k3 (pair (address %administratorContractAddress) (address %governorContractAddress)) (pair (address %ovenRegistryContractAddress) (address %tokenContractAddress))) (pair (pair %k4 (pair (option %clientCallback address) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (pair (nat %maxDataDelaySec) (int %state)))) (pair (pair %k6 (pair (address %governorContractAddress) (pair (option %initialDelegate key_hash) (option %makeOvenOwner address))) (pair (pair (address %minterContractAddress) (address %ovenProxyContractAddress)) (pair (address %ovenRegistryContractAddress) (int %state)))) (pair (pair %k7 (pair (pair (option %borrowParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int nat)))))))) (address %governorContractAddress)) (pair (option %liquidateParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int address)))))))) (pair (address %minterContractAddress) (address %oracleContractAddress)))) (pair (pair (address %ovenRegistryContractAddress) (address %pauseGuardianContractAddress)) (pair (bool %paused) (pair (int %state) (option %withdrawParams (pair address (pair address (pair nat (pair nat (pair bool (pair int (pair int mutez)))))))))))) (pair (pair %k8 (address %governorContractAddress) (pair (address %ovenFactoryContractAddress) (big_map %ovenMap address address))) (pair %k9 (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (nat %debtCeiling) (address %governorContractAddress))) (pair (pair (big_map %metadata string bytes) (bool %paused)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))))))))))))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(params.k9.balances[sp.contract_address(Contract3)].balance == (100 * 1000000000000000000)) # @parameter : @storage
    PUSH nat 1000000000000000000; # nat : @parameter : @storage
    PUSH nat 100; # nat : nat : @parameter : @storage
    MUL;        # nat : @parameter : @storage
    SWAP;       # @parameter : nat : @storage
    CDDDDDDDDDDDDAADR; # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
    PUSH address "Contract_3"; # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @storage
    IF_SOME
      {
        # of_some: Get-item:720 # @some : nat : @storage
      }
      {
        PUSH int 720; # int : nat : @storage
        FAILWITH;   # FAILED
      }; # @some : nat : @storage
    CDR;        # nat : nat : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: params.k9.balances[sp.contract_address(Contract3)].balance == (100 * 1000000000000000000)"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };