import smartpy as sp

class Contract(sp.Contract):
  def __init__(self):
    self.init(collateralizationPercentage = 200000000000000000000, developerFundContractAddress = sp.address('tz1R6Ej25VSerE3MkSoEEeBjKHCDTFbpKuSX'), governorContractAddress = sp.address('tz1abmz7jiCV2GH2u81LRrGgAFFgvQgiDiaf'), interestIndex = 1000000000000000000, lastInterestIndexUpdateTime = sp.timestamp(1601871456), liquidationFeePercent = 80000000000000000, ovenMax = sp.some(sp.tez(100)), ovenProxyContractAddress = sp.address('tz1c461F8GirBvq5DpFftPoPyCcPR7HQM6gm'), stabilityDevFundSplit = 100000000000000000, stabilityFee = 0, stabilityFundContractAddress = sp.address('tz1W5VkdB5s7ENMESVBtwyt9kyvLqPcUczRT'), tokenContractAddress = sp.address('tz1cYufsxHXJcvANhvS55h3aY32a9BAFB494'))

  @sp.entry_point
  def borrow(self, params):
    sp.set_type(params, sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TNat)))))))))
    sp.verify(sp.sender == self.data.ovenProxyContractAddress, message = 2)
    match_pair_85_fst, match_pair_85_snd = sp.match_tuple(params, names = [ "match_pair_85_fst", "match_pair_85_snd" ])
    match_pair_86_fst, match_pair_86_snd = sp.match_tuple(match_pair_85_snd, names = [ "match_pair_86_fst", "match_pair_86_snd" ])
    match_pair_87_fst, match_pair_87_snd = sp.match_tuple(match_pair_86_snd, names = [ "match_pair_87_fst", "match_pair_87_snd" ])
    match_pair_88_fst, match_pair_88_snd = sp.match_tuple(match_pair_87_snd, names = [ "match_pair_88_fst", "match_pair_88_snd" ])
    match_pair_89_fst, match_pair_89_snd = sp.match_tuple(match_pair_88_snd, names = [ "match_pair_89_fst", "match_pair_89_snd" ])
    match_pair_90_fst, match_pair_90_snd = sp.match_tuple(match_pair_89_snd, names = [ "match_pair_90_fst", "match_pair_90_snd" ])
    match_pair_91_fst, match_pair_91_snd = sp.match_tuple(match_pair_90_snd, names = [ "match_pair_91_fst", "match_pair_91_snd" ])
    sp.set_type(match_pair_85_fst, sp.TNat)
    sp.set_type(match_pair_86_fst, sp.TAddress)
    sp.set_type(match_pair_87_fst, sp.TAddress)
    sp.set_type(match_pair_88_fst, sp.TNat)
    sp.set_type(match_pair_89_fst, sp.TNat)
    sp.set_type(match_pair_90_fst, sp.TBool)
    sp.set_type(sp.as_nat(match_pair_91_fst), sp.TNat)
    sp.set_type(sp.fst(match_pair_91_snd), sp.TInt)
    sp.set_type(sp.snd(match_pair_91_snd), sp.TNat)
    sp.verify(match_pair_90_fst == False, message = 16)
    sp.set_type(match_pair_89_fst + sp.snd(match_pair_91_snd), sp.TNat)
    sp.set_type((match_pair_89_fst + sp.snd(match_pair_91_snd)) + (sp.as_nat(match_pair_91_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_91_snd), (match_pair_89_fst, (sp.as_nat(match_pair_91_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))), sp.TNat)
    sp.if ((match_pair_89_fst + sp.snd(match_pair_91_snd)) + (sp.as_nat(match_pair_91_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_91_snd), (match_pair_89_fst, (sp.as_nat(match_pair_91_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) > 0:
      sp.verify(self.computeCollateralizationPercentage((match_pair_88_fst, (match_pair_85_fst, (match_pair_89_fst + sp.snd(match_pair_91_snd)) + (sp.as_nat(match_pair_91_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_91_snd), (match_pair_89_fst, (sp.as_nat(match_pair_91_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))))) >= self.data.collateralizationPercentage, message = 11)
    sp.set_type(sp.snd(match_pair_91_snd), sp.TNat)
    sp.set_type(match_pair_87_fst, sp.TAddress)
    sp.transfer(sp.record(address = match_pair_87_fst, value = sp.snd(match_pair_91_snd)), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='mint').open_some())
    sp.set_type(match_pair_86_fst, sp.TAddress)
    sp.set_type(match_pair_89_fst + sp.snd(match_pair_91_snd), sp.TNat)
    sp.set_type(sp.as_nat(match_pair_91_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_91_snd), (match_pair_89_fst, (sp.as_nat(match_pair_91_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))), sp.TNat)
    sp.set_type(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.TNat)
    sp.set_type(match_pair_90_fst, sp.TBool)
    sp.set_type(sp.balance, sp.TMutez)
    sp.transfer((match_pair_86_fst, (match_pair_89_fst + sp.snd(match_pair_91_snd), (sp.to_int(sp.as_nat(match_pair_91_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_91_snd), (match_pair_89_fst, (sp.as_nat(match_pair_91_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))), (sp.to_int(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))), match_pair_90_fst)))), sp.balance, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), self.data.ovenProxyContractAddress, entry_point='updateState').open_some())
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))

  @sp.entry_point
  def deposit(self, params):
    sp.set_type(params, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TInt)))))))
    sp.verify(sp.sender == self.data.ovenProxyContractAddress, message = 2)
    sp.if self.data.ovenMax.is_some():
      sp.verify(sp.balance <= self.data.ovenMax.open_some(), message = 21)
    match_pair_219_fst, match_pair_219_snd = sp.match_tuple(params, names = [ "match_pair_219_fst", "match_pair_219_snd" ])
    match_pair_220_fst, match_pair_220_snd = sp.match_tuple(match_pair_219_snd, names = [ "match_pair_220_fst", "match_pair_220_snd" ])
    match_pair_221_fst, match_pair_221_snd = sp.match_tuple(match_pair_220_snd, names = [ "match_pair_221_fst", "match_pair_221_snd" ])
    match_pair_222_fst, match_pair_222_snd = sp.match_tuple(match_pair_221_snd, names = [ "match_pair_222_fst", "match_pair_222_snd" ])
    match_pair_223_fst, match_pair_223_snd = sp.match_tuple(match_pair_222_snd, names = [ "match_pair_223_fst", "match_pair_223_snd" ])
    sp.set_type(match_pair_219_fst, sp.TAddress)
    sp.set_type(match_pair_220_fst, sp.TAddress)
    sp.set_type(match_pair_221_fst, sp.TNat)
    sp.set_type(match_pair_222_fst, sp.TNat)
    sp.set_type(match_pair_223_fst, sp.TBool)
    sp.set_type(sp.as_nat(sp.fst(match_pair_223_snd)), sp.TNat)
    sp.set_type(sp.snd(match_pair_223_snd), sp.TInt)
    sp.verify(match_pair_223_fst == False, message = 16)
    sp.set_type(match_pair_219_fst, sp.TAddress)
    sp.set_type(match_pair_222_fst, sp.TNat)
    sp.set_type(sp.as_nat(sp.fst(match_pair_223_snd)) + self.calculateNewAccruedInterest((sp.snd(match_pair_223_snd), (match_pair_222_fst, (sp.as_nat(sp.fst(match_pair_223_snd)), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))), sp.TNat)
    sp.set_type(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.TNat)
    sp.set_type(match_pair_223_fst, sp.TBool)
    sp.set_type(sp.balance, sp.TMutez)
    sp.transfer((match_pair_219_fst, (match_pair_222_fst, (sp.to_int(sp.as_nat(sp.fst(match_pair_223_snd)) + self.calculateNewAccruedInterest((sp.snd(match_pair_223_snd), (match_pair_222_fst, (sp.as_nat(sp.fst(match_pair_223_snd)), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))), (sp.to_int(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))), match_pair_223_fst)))), sp.balance, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), self.data.ovenProxyContractAddress, entry_point='updateState').open_some())
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))

  @sp.entry_point
  def getInterestIndex(self, params):
    sp.set_type(params, sp.TContract(sp.TNat))
    sp.verify(sp.amount == sp.tez(0), message = 15)
    sp.transfer(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.tez(0), params)
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))

  @sp.entry_point
  def liquidate(self, params):
    sp.set_type(params, sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TAddress)))))))))
    sp.verify(sp.sender == self.data.ovenProxyContractAddress, message = 2)
    match_pair_323_fst, match_pair_323_snd = sp.match_tuple(params, names = [ "match_pair_323_fst", "match_pair_323_snd" ])
    match_pair_324_fst, match_pair_324_snd = sp.match_tuple(match_pair_323_snd, names = [ "match_pair_324_fst", "match_pair_324_snd" ])
    match_pair_325_fst, match_pair_325_snd = sp.match_tuple(match_pair_324_snd, names = [ "match_pair_325_fst", "match_pair_325_snd" ])
    match_pair_326_fst, match_pair_326_snd = sp.match_tuple(match_pair_325_snd, names = [ "match_pair_326_fst", "match_pair_326_snd" ])
    match_pair_327_fst, match_pair_327_snd = sp.match_tuple(match_pair_326_snd, names = [ "match_pair_327_fst", "match_pair_327_snd" ])
    match_pair_328_fst, match_pair_328_snd = sp.match_tuple(match_pair_327_snd, names = [ "match_pair_328_fst", "match_pair_328_snd" ])
    match_pair_329_fst, match_pair_329_snd = sp.match_tuple(match_pair_328_snd, names = [ "match_pair_329_fst", "match_pair_329_snd" ])
    sp.set_type(match_pair_323_fst, sp.TNat)
    sp.set_type(match_pair_324_fst, sp.TAddress)
    sp.set_type(match_pair_325_fst, sp.TAddress)
    sp.set_type(match_pair_326_fst, sp.TNat)
    sp.set_type(match_pair_327_fst, sp.TNat)
    sp.set_type(match_pair_328_fst, sp.TBool)
    sp.set_type(sp.as_nat(match_pair_329_fst), sp.TNat)
    sp.set_type(sp.fst(match_pair_329_snd), sp.TInt)
    sp.set_type(sp.snd(match_pair_329_snd), sp.TAddress)
    sp.verify(match_pair_328_fst == False, message = 16)
    sp.verify(self.computeCollateralizationPercentage((match_pair_326_fst, (match_pair_323_fst, match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))))) < self.data.collateralizationPercentage, message = 10)
    sp.set_type((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000), sp.TNat)
    sp.set_type(sp.snd(match_pair_329_snd), sp.TAddress)
    sp.transfer(sp.record(address = sp.snd(match_pair_329_snd), value = (match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='burn').open_some())
    sp.set_type((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000), sp.TNat)
    sp.set_type((((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) * self.data.stabilityDevFundSplit) // 1000000000000000000, sp.TNat)
    sp.set_type(self.data.developerFundContractAddress, sp.TAddress)
    sp.transfer(sp.record(address = self.data.developerFundContractAddress, value = (((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) * self.data.stabilityDevFundSplit) // 1000000000000000000), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='mint').open_some())
    sp.set_type(sp.as_nat(((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) - ((((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) * self.data.stabilityDevFundSplit) // 1000000000000000000)), sp.TNat)
    sp.set_type(self.data.stabilityFundContractAddress, sp.TAddress)
    sp.transfer(sp.record(address = self.data.stabilityFundContractAddress, value = sp.as_nat(((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) - ((((sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) + (((match_pair_327_fst + (sp.as_nat(match_pair_329_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_329_snd), (match_pair_327_fst, (sp.as_nat(match_pair_329_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) * self.data.liquidationFeePercent) // 1000000000000000000)) * self.data.stabilityDevFundSplit) // 1000000000000000000))), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='mint').open_some())
    sp.send(sp.snd(match_pair_329_snd), sp.mutez(match_pair_326_fst // 1000000000000))
    sp.set_type(match_pair_324_fst, sp.TAddress)
    sp.set_type(0, sp.TNat)
    sp.set_type(0, sp.TNat)
    sp.set_type(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.TNat)
    sp.set_type(True, sp.TBool)
    sp.set_type(sp.tez(0), sp.TMutez)
    sp.transfer((match_pair_324_fst, (0, (sp.to_int(0), (sp.to_int(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))), True)))), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), self.data.ovenProxyContractAddress, entry_point='updateState').open_some())
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))

  @sp.entry_point
  def repay(self, params):
    sp.set_type(params, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TNat))))))))
    sp.verify(sp.sender == self.data.ovenProxyContractAddress, message = 2)
    match_pair_149_fst, match_pair_149_snd = sp.match_tuple(params, names = [ "match_pair_149_fst", "match_pair_149_snd" ])
    match_pair_150_fst, match_pair_150_snd = sp.match_tuple(match_pair_149_snd, names = [ "match_pair_150_fst", "match_pair_150_snd" ])
    match_pair_151_fst, match_pair_151_snd = sp.match_tuple(match_pair_150_snd, names = [ "match_pair_151_fst", "match_pair_151_snd" ])
    match_pair_152_fst, match_pair_152_snd = sp.match_tuple(match_pair_151_snd, names = [ "match_pair_152_fst", "match_pair_152_snd" ])
    match_pair_153_fst, match_pair_153_snd = sp.match_tuple(match_pair_152_snd, names = [ "match_pair_153_fst", "match_pair_153_snd" ])
    match_pair_154_fst, match_pair_154_snd = sp.match_tuple(match_pair_153_snd, names = [ "match_pair_154_fst", "match_pair_154_snd" ])
    sp.set_type(match_pair_149_fst, sp.TAddress)
    sp.set_type(match_pair_150_fst, sp.TAddress)
    sp.set_type(match_pair_151_fst, sp.TNat)
    sp.set_type(match_pair_152_fst, sp.TNat)
    sp.set_type(match_pair_153_fst, sp.TBool)
    sp.set_type(sp.as_nat(match_pair_154_fst), sp.TNat)
    sp.set_type(sp.fst(match_pair_154_snd), sp.TInt)
    sp.set_type(sp.snd(match_pair_154_snd), sp.TNat)
    sp.verify(match_pair_153_fst == False, message = 16)
    stabilityFeeTokensRepaid = sp.local("stabilityFeeTokensRepaid", 0)
    remainingStabilityFeeTokens = sp.local("remainingStabilityFeeTokens", 0)
    remainingBorrowedTokenBalance = sp.local("remainingBorrowedTokenBalance", 0)
    sp.if sp.snd(match_pair_154_snd) < (sp.as_nat(match_pair_154_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_154_snd), (match_pair_152_fst, (sp.as_nat(match_pair_154_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))):
      stabilityFeeTokensRepaid.value = sp.snd(match_pair_154_snd)
      remainingStabilityFeeTokens.value = sp.as_nat((sp.as_nat(match_pair_154_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_154_snd), (match_pair_152_fst, (sp.as_nat(match_pair_154_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))) - sp.snd(match_pair_154_snd))
      remainingBorrowedTokenBalance.value = match_pair_152_fst
    sp.else:
      stabilityFeeTokensRepaid.value = sp.as_nat(match_pair_154_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_154_snd), (match_pair_152_fst, (sp.as_nat(match_pair_154_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))
      remainingStabilityFeeTokens.value = 0
      remainingBorrowedTokenBalance.value = sp.as_nat(match_pair_152_fst - sp.as_nat(sp.snd(match_pair_154_snd) - (sp.as_nat(match_pair_154_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_154_snd), (match_pair_152_fst, (sp.as_nat(match_pair_154_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))))
    sp.set_type(stabilityFeeTokensRepaid.value, sp.TNat)
    sp.set_type((stabilityFeeTokensRepaid.value * self.data.stabilityDevFundSplit) // 1000000000000000000, sp.TNat)
    sp.set_type(self.data.developerFundContractAddress, sp.TAddress)
    sp.transfer(sp.record(address = self.data.developerFundContractAddress, value = (stabilityFeeTokensRepaid.value * self.data.stabilityDevFundSplit) // 1000000000000000000), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='mint').open_some())
    sp.set_type(sp.as_nat(stabilityFeeTokensRepaid.value - ((stabilityFeeTokensRepaid.value * self.data.stabilityDevFundSplit) // 1000000000000000000)), sp.TNat)
    sp.set_type(self.data.stabilityFundContractAddress, sp.TAddress)
    sp.transfer(sp.record(address = self.data.stabilityFundContractAddress, value = sp.as_nat(stabilityFeeTokensRepaid.value - ((stabilityFeeTokensRepaid.value * self.data.stabilityDevFundSplit) // 1000000000000000000))), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='mint').open_some())
    sp.set_type(sp.snd(match_pair_154_snd), sp.TNat)
    sp.set_type(match_pair_150_fst, sp.TAddress)
    sp.transfer(sp.record(address = match_pair_150_fst, value = sp.snd(match_pair_154_snd)), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.tokenContractAddress, entry_point='burn').open_some())
    sp.set_type(match_pair_149_fst, sp.TAddress)
    sp.set_type(remainingBorrowedTokenBalance.value, sp.TNat)
    sp.set_type(remainingStabilityFeeTokens.value, sp.TNat)
    sp.set_type(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.TNat)
    sp.set_type(match_pair_153_fst, sp.TBool)
    sp.set_type(sp.balance, sp.TMutez)
    sp.transfer((match_pair_149_fst, (remainingBorrowedTokenBalance.value, (sp.to_int(remainingStabilityFeeTokens.value), (sp.to_int(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))), match_pair_153_fst)))), sp.balance, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), self.data.ovenProxyContractAddress, entry_point='updateState').open_some())
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))

  @sp.entry_point
  def updateContracts(self, params):
    sp.set_type(params, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TAddress)))))
    sp.verify(sp.sender == self.data.governorContractAddress, message = 4)
    match_pair_419_fst, match_pair_419_snd = sp.match_tuple(params, names = [ "match_pair_419_fst", "match_pair_419_snd" ])
    match_pair_420_fst, match_pair_420_snd = sp.match_tuple(match_pair_419_snd, names = [ "match_pair_420_fst", "match_pair_420_snd" ])
    match_pair_421_fst, match_pair_421_snd = sp.match_tuple(match_pair_420_snd, names = [ "match_pair_421_fst", "match_pair_421_snd" ])
    match_pair_422_fst, match_pair_422_snd = sp.match_tuple(match_pair_421_snd, names = [ "match_pair_422_fst", "match_pair_422_snd" ])
    self.data.governorContractAddress = match_pair_419_fst
    self.data.tokenContractAddress = match_pair_420_fst
    self.data.ovenProxyContractAddress = match_pair_421_fst
    self.data.stabilityFundContractAddress = match_pair_422_fst
    self.data.developerFundContractAddress = match_pair_422_snd

  @sp.entry_point
  def updateParams(self, params):
    sp.set_type(params, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TOption(sp.TMutez)))))
    sp.verify(sp.sender == self.data.governorContractAddress, message = 4)
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))
    match_pair_403_fst, match_pair_403_snd = sp.match_tuple(params, names = [ "match_pair_403_fst", "match_pair_403_snd" ])
    match_pair_404_fst, match_pair_404_snd = sp.match_tuple(match_pair_403_snd, names = [ "match_pair_404_fst", "match_pair_404_snd" ])
    match_pair_405_fst, match_pair_405_snd = sp.match_tuple(match_pair_404_snd, names = [ "match_pair_405_fst", "match_pair_405_snd" ])
    self.data.stabilityFee = match_pair_403_fst
    self.data.liquidationFeePercent = match_pair_404_fst
    self.data.collateralizationPercentage = match_pair_405_fst
    self.data.ovenMax = match_pair_405_snd

  @sp.entry_point
  def withdraw(self, params):
    sp.set_type(params, sp.TPair(sp.TNat, sp.TPair(sp.TAddress, sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TBool, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TMutez)))))))))
    sp.verify(sp.sender == self.data.ovenProxyContractAddress, message = 2)
    match_pair_264_fst, match_pair_264_snd = sp.match_tuple(params, names = [ "match_pair_264_fst", "match_pair_264_snd" ])
    match_pair_265_fst, match_pair_265_snd = sp.match_tuple(match_pair_264_snd, names = [ "match_pair_265_fst", "match_pair_265_snd" ])
    match_pair_266_fst, match_pair_266_snd = sp.match_tuple(match_pair_265_snd, names = [ "match_pair_266_fst", "match_pair_266_snd" ])
    match_pair_267_fst, match_pair_267_snd = sp.match_tuple(match_pair_266_snd, names = [ "match_pair_267_fst", "match_pair_267_snd" ])
    match_pair_268_fst, match_pair_268_snd = sp.match_tuple(match_pair_267_snd, names = [ "match_pair_268_fst", "match_pair_268_snd" ])
    match_pair_269_fst, match_pair_269_snd = sp.match_tuple(match_pair_268_snd, names = [ "match_pair_269_fst", "match_pair_269_snd" ])
    match_pair_270_fst, match_pair_270_snd = sp.match_tuple(match_pair_269_snd, names = [ "match_pair_270_fst", "match_pair_270_snd" ])
    sp.set_type(match_pair_264_fst, sp.TNat)
    sp.set_type(match_pair_265_fst, sp.TAddress)
    sp.set_type(match_pair_266_fst, sp.TAddress)
    sp.set_type(match_pair_267_fst, sp.TNat)
    sp.set_type(match_pair_268_fst, sp.TNat)
    sp.set_type(match_pair_269_fst, sp.TBool)
    sp.set_type(sp.as_nat(match_pair_270_fst), sp.TNat)
    sp.set_type(sp.fst(match_pair_270_snd), sp.TInt)
    sp.set_type(sp.snd(match_pair_270_snd), sp.TMutez)
    sp.if (match_pair_268_fst + (sp.as_nat(match_pair_270_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_270_snd), (match_pair_268_fst, (sp.as_nat(match_pair_270_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))) > 0:
      sp.verify(self.computeCollateralizationPercentage((sp.as_nat(match_pair_267_fst - (sp.fst(sp.ediv(sp.snd(match_pair_270_snd), sp.mutez(1)).open_some()) * 1000000000000)), (match_pair_264_fst, match_pair_268_fst + (sp.as_nat(match_pair_270_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_270_snd), (match_pair_268_fst, (sp.as_nat(match_pair_270_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))))))) >= self.data.collateralizationPercentage, message = 11)
    sp.send(match_pair_266_fst, sp.snd(match_pair_270_snd))
    sp.set_type(match_pair_265_fst, sp.TAddress)
    sp.set_type(match_pair_268_fst, sp.TNat)
    sp.set_type(sp.as_nat(match_pair_270_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_270_snd), (match_pair_268_fst, (sp.as_nat(match_pair_270_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))))))), sp.TNat)
    sp.set_type(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60))), sp.TNat)
    sp.set_type(match_pair_269_fst, sp.TBool)
    sp.set_type(sp.mutez(match_pair_267_fst // 1000000000000) - sp.snd(match_pair_270_snd), sp.TMutez)
    sp.transfer((match_pair_265_fst, (match_pair_268_fst, (sp.to_int(sp.as_nat(match_pair_270_fst) + self.calculateNewAccruedInterest((sp.fst(match_pair_270_snd), (match_pair_268_fst, (sp.as_nat(match_pair_270_fst), self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))))))), (sp.to_int(self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))), match_pair_269_fst)))), sp.mutez(match_pair_267_fst // 1000000000000) - sp.snd(match_pair_270_snd), sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TPair(sp.TInt, sp.TPair(sp.TInt, sp.TBool)))), self.data.ovenProxyContractAddress, entry_point='updateState').open_some())
    self.data.interestIndex = self.compoundWithLinearApproximation((self.data.interestIndex, (self.data.stabilityFee, sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60)))
    self.data.lastInterestIndexUpdateTime = sp.add_seconds(self.data.lastInterestIndexUpdateTime, sp.to_int((sp.as_nat(sp.now - self.data.lastInterestIndexUpdateTime) // 60) * 60))