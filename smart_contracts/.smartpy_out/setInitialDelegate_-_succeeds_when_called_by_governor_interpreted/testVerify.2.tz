parameter (pair (pair (address %governorContractAddress) (pair (option %initialDelegate key_hash) (option %makeOvenOwner address))) (pair (pair (address %minterContractAddress) (address %ovenProxyContractAddress)) (pair (address %ovenRegistryContractAddress) (int %state))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(params.k1.initialDelegate.open_some() == sp.some(sp.key_hash('tz1NRTQeqcuwybgrZfJavBY3of83u8uLpFBj')).open_some()) # @parameter : @storage
    PUSH (option key_hash) (Some "tz1NRTQeqcuwybgrZfJavBY3of83u8uLpFBj"); # option key_hash : @parameter : @storage
    IF_SOME
      {}
      {
        PUSH int 626; # int : @parameter : @storage
        FAILWITH;   # FAILED
      }; # @some : @parameter : @storage
    SWAP;       # @parameter : @some : @storage
    CADAR;      # option key_hash : @some : @storage
    IF_SOME
      {}
      {
        PUSH int 626; # int : @some : @storage
        FAILWITH;   # FAILED
      }; # @some : @some : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: params.k1.initialDelegate.open_some() == sp.some(sp.key_hash('tz1NRTQeqcuwybgrZfJavBY3of83u8uLpFBj')).open_some()"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };