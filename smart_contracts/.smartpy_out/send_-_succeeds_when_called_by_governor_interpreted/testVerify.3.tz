parameter (pair (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(sp.contract_balance(0) == sp.tez(0)) # @parameter : @storage
    PUSH mutez 0; # mutez : @parameter : @storage
    MIerror: No conversion for expression sp.contract_balance(0) of type sp.TMutez # mutez{_} : pair @parameter !verify (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)){params} : unit @storage{storage}
    MIerror: COMPARE on mutez{_} : pair @parameter !verify (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)){params} : unit @storage{storage} # mutez{_} : pair @parameter !verify (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)){params} : unit @storage{storage}
    COMPARE;    # Error stack: COMPARE on mutez{_} : pair @parameter !verify (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)){params} : unit @storage{storage}
    MIerror: EQ on mutez{_} : pair @parameter !verify (pair %k0 (address %administratorContractAddress) (pair (address %governorContractAddress) (address %tokenContractAddress))) (pair %k1 (int %intValue) (nat %natValue)){params} : unit @storage{storage} # Error stack: previous type error
    EQ;         # Error stack: previous type error
    MIerror: mi_if # Error stack: previous type error
    SWAP;       # Error stack: previous type error
    DROP;       # Error stack: previous type error
    NIL operation; # Error stack: previous type error
    PAIR;       # Error stack: previous type error
    MIerror: finalize # Error stack: previous type error
  };