parameter (pair (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(sp.contract_balance(2) == sp.tez(1)) # @parameter : @storage
    PUSH mutez 1000000; # mutez : @parameter : @storage
    MIerror: No conversion for expression sp.contract_balance(2) of type sp.TMutez # mutez{_} : pair @parameter !verify (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))){params} : unit @storage{storage}
    MIerror: COMPARE on mutez{_} : pair @parameter !verify (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))){params} : unit @storage{storage} # mutez{_} : pair @parameter !verify (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))){params} : unit @storage{storage}
    COMPARE;    # Error stack: COMPARE on mutez{_} : pair @parameter !verify (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))){params} : unit @storage{storage}
    MIerror: EQ on mutez{_} : pair @parameter !verify (pair %k0 (pair (pair (pair (pair (nat %borrow_borrowedTokens) (bool %borrow_liquidated)) (pair (address %borrow_ovenAddress) (pair (nat %borrow_ovenBalance) (int %borrow_ovenInterestIndex)))) (pair (pair (address %borrow_ownerAddress) (pair (int %borrow_stabilityFeeTokens) (nat %borrow_tokensToBorrow))) (pair (nat %deposit_borrowedTokens) (pair (bool %deposit_liquidated) (address %deposit_ovenAddress))))) (pair (pair (pair (nat %deposit_ovenBalance) (int %deposit_ovenInterestIndex)) (pair (address %deposit_ownerAddress) (pair (int %deposit_stabilityFeeTokens) (nat %liquidate_borrowedTokens)))) (pair (pair (bool %liquidate_liquidated) (pair (address %liquidate_liquidatorAddress) (address %liquidate_ovenAddress))) (pair (nat %liquidate_ovenBalance) (pair (int %liquidate_ovenInterestIndex) (address %liquidate_ownerAddress)))))) (pair (pair (pair (pair (int %liquidate_stabilityFeeTokens) (nat %repay_borrowedTokens)) (pair (bool %repay_liquidated) (pair (address %repay_ovenAddress) (nat %repay_ovenBalance)))) (pair (pair (int %repay_ovenInterestIndex) (pair (address %repay_ownerAddress) (int %repay_stabilityFeeTokens))) (pair (nat %repay_tokensToRepay) (pair (nat %updateState_borrowedTokens) (int %updateState_interestIndex))))) (pair (pair (pair (bool %updateState_isLiquidated) (address %updateState_ovenAddress)) (pair (int %updateState_stabilityFeeTokens) (pair (nat %withdraw_borrowedTokens) (bool %withdraw_liquidated)))) (pair (pair (mutez %withdraw_mutezToWithdraw) (pair (address %withdraw_ovenAddress) (nat %withdraw_ovenBalance))) (pair (int %withdraw_ovenInterestIndex) (pair (address %withdraw_ownerAddress) (int %withdraw_stabilityFeeTokens))))))) (pair (pair %k1 (pair (pair (nat %collateralizationPercentage) (pair (nat %devFundSplit) (address %developerFundContractAddress))) (pair (address %governorContractAddress) (pair (nat %interestIndex) (timestamp %lastInterestIndexUpdateTime)))) (pair (pair (nat %liquidationFeePercent) (pair (address %liquidityPoolContractAddress) (address %ovenProxyContractAddress))) (pair (pair (nat %privateOwnerLiquidationThreshold) (nat %stabilityFee)) (pair (address %stabilityFundContractAddress) (address %tokenContractAddress))))) (pair %k2 (int %intValue) (nat %natValue))){params} : unit @storage{storage} # Error stack: previous type error
    EQ;         # Error stack: previous type error
    MIerror: mi_if # Error stack: previous type error
    SWAP;       # Error stack: previous type error
    DROP;       # Error stack: previous type error
    NIL operation; # Error stack: previous type error
    PAIR;       # Error stack: previous type error
    MIerror: finalize # Error stack: previous type error
  };